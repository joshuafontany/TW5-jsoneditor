{
    "title": "$:/plugins/joshuafontany/jsoneditor",
    "description": "JSON Editor: Generate html forms from JSON schema",
    "dependents": "$:/plugins/TheDiveO/FontAwesome $:/plugins/@oss/bootstrap4 $:/plugins/joshuafontany/jsonmangler $:/plugins/ebalster/modloader $:/plugins/matabele/action-maketid",
    "author": "Joshua Fontany",
    "version": "0.0.6",
    "list": "readme usage license",
    "core-version": ">=5.1.20",
    "source": "https://github.com/joshuafontany/TW5-jsoneditor",
    "plugin-type": "plugin",

    "tiddlers": {
        "$:/plugins/joshuafontany/jsoneditor/jsoneditor.js": {
            "text": "if($tw.browser){\n/**\r\n * @name JSON Editor\r\n * @description JSON Schema Based Editor\r\n * This library is the continuation of jdorn's great work (see also https://github.com/jdorn/json-editor/issues/800)\r\n * @version 1.4.0-beta.0 TiddlyWiki fork @ https://joshuafontany.github.io/TW5-jsoneditor/\r\n * @author Jeremy Dorn\r\n * @see https://github.com/jdorn/json-editor/\r\n * @see https://github.com/json-editor/json-editor\r\n * @license MIT\r\n * @example see README.md and docs/ for requirements, examples and usage info\r\n */\r\n\r\n;(function (global, factory) {\r\n\t\"use strict\";\r\n\tvar JSONEditor = factory(global);\r\n\tif (typeof module === \"object\" && module != null && module.exports) {\r\n\t\tmodule.exports = JSONEditor;\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tdefine(function () { return JSONEditor; });\r\n\t} else {\r\n\t\tglobal.JSONEditor = JSONEditor;\r\n\t}\r\n})(typeof window !== \"undefined\" ? window : this, function (global, undefined) {\r\n\r\n/*jshint loopfunc: true */\r\n/* Simple JavaScript Inheritance\r\n * By John Resig http://ejohn.org/\r\n * MIT Licensed.\r\n */\r\n// Inspired by base2 and Prototype\r\nvar Class;\r\n(function(){\r\n  var initializing = false, fnTest = /xyz/.test(function(){window.postMessage(\"xyz\");}) ? /\\b_super\\b/ : /.*/;\r\n \r\n  // The base Class implementation (does nothing)\r\n  Class = function(){};\r\n \r\n  // Create a new Class that inherits from this class\r\n  Class.extend = function extend(prop) {\r\n    var _super = this.prototype;\r\n   \r\n    // Instantiate a base class (but only create the instance,\r\n    // don't run the init constructor)\r\n    initializing = true;\r\n    var prototype = new this();\r\n    initializing = false;\r\n   \r\n    // Copy the properties over onto the new prototype\r\n    for (var name in prop) {\r\n      // Check if we're overwriting an existing function\r\n      prototype[name] = typeof prop[name] == \"function\" &&\r\n        typeof _super[name] == \"function\" && fnTest.test(prop[name]) ?\r\n        (function(name, fn){\r\n          return function() {\r\n            var tmp = this._super;\r\n           \r\n            // Add a new ._super() method that is the same method\r\n            // but on the super-class\r\n            this._super = _super[name];\r\n           \r\n            // The method only need to be bound temporarily, so we\r\n            // remove it when we're done executing\r\n            var ret = fn.apply(this, arguments);        \r\n            this._super = tmp;\r\n           \r\n            return ret;\r\n          };\r\n        })(name, prop[name]) :\r\n        prop[name];\r\n    }\r\n   \r\n    // The dummy class constructor\r\n    function Class() {\r\n      // All construction is actually done in the init method\r\n      if ( !initializing && this.init )\r\n        this.init.apply(this, arguments);\r\n    }\r\n   \r\n    // Populate our constructed prototype object\r\n    Class.prototype = prototype;\r\n   \r\n    // Enforce the constructor to be what we expect\r\n    Class.prototype.constructor = Class;\r\n \r\n    // And make this class extendable\r\n    Class.extend = extend;\r\n   \r\n    return Class;\r\n  };\r\n  \r\n  return Class;\r\n})();\r\n\r\n// CustomEvent constructor polyfill\r\n// From MDN\r\n(function () {\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n    var evt = document.createEvent( 'CustomEvent' );\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\r\n    return evt;\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype;\r\n\r\n  window.CustomEvent = CustomEvent;\r\n})();\r\n\r\n// requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel\r\n// MIT license\r\n(function() {\r\n    var lastTime = 0;\r\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\r\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\r\n        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || \r\n                                      window[vendors[x]+'CancelRequestAnimationFrame'];\r\n    }\r\n \r\n    if (!window.requestAnimationFrame)\r\n        window.requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, \r\n              timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n \r\n    if (!window.cancelAnimationFrame)\r\n        window.cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n}());\r\n\r\n// Array.isArray polyfill\r\n// From MDN\r\n(function() {\r\n\tif(!Array.isArray) {\r\n\t  Array.isArray = function(arg) {\r\n\t\treturn Object.prototype.toString.call(arg) === '[object Array]';\r\n\t  };\r\n\t}\r\n}());\r\n/**\r\n * Taken from jQuery 2.1.3\r\n *\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nvar $isplainobject = function( obj ) {\r\n  // Not plain objects:\r\n  // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\r\n  // - DOM nodes\r\n  // - window\r\n  if (typeof obj !== \"object\" || obj.nodeType || (obj !== null && obj === obj.window)) {\r\n    return false;\r\n  }\r\n\r\n  if (obj.constructor && !Object.prototype.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\")) {\r\n    return false;\r\n  }\r\n\r\n  // If the function hasn't returned already, we're confident that\r\n  // |obj| is a plain object, created by {} or constructed with new Object\r\n  return true;\r\n};\r\n\r\nvar $extend = function(destination) {\r\n  var source, i,property;\r\n  for(i=1; i<arguments.length; i++) {\r\n    source = arguments[i];\r\n    for (property in source) {\r\n      if(!source.hasOwnProperty(property)) continue;\r\n      if(source[property] && $isplainobject(source[property])) {\r\n        if(!destination.hasOwnProperty(property)) destination[property] = {};\r\n        $extend(destination[property], source[property]);\r\n      }\r\n      else {\r\n        destination[property] = source[property];\r\n      }\r\n    }\r\n  }\r\n  return destination;\r\n};\r\n\r\nvar $each = function(obj,callback) {\r\n  if(!obj || typeof obj !== \"object\") return;\r\n  var i;\r\n  if(Array.isArray(obj) || (typeof obj.length === 'number' && obj.length > 0 && (obj.length - 1) in obj)) {\r\n    for(i=0; i<obj.length; i++) {\r\n      if(callback(i,obj[i])===false) return;\r\n    }\r\n  }\r\n  else {\r\n    if (Object.keys) {\r\n      var keys = Object.keys(obj);\r\n      for(i=0; i<keys.length; i++) {\r\n        if(callback(keys[i],obj[keys[i]])===false) return;\r\n      }\r\n    }\r\n    else {\r\n      for(i in obj) {\r\n        if(!obj.hasOwnProperty(i)) continue;\r\n        if(callback(i,obj[i])===false) return;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar $trigger = function(el,event) {\r\n  var e = document.createEvent('HTMLEvents');\r\n  e.initEvent(event, true, true);\r\n  el.dispatchEvent(e);\r\n};\r\nvar $triggerc = function(el,event) {\r\n  var e = new CustomEvent(event,{\r\n    bubbles: true,\r\n    cancelable: true\r\n  });\r\n\r\n  el.dispatchEvent(e);\r\n};\r\n\r\nvar JSONEditor = function(element,options) {\r\n  if (!(element instanceof Element)) {\r\n    throw new Error('element should be an instance of Element');\r\n  }\r\n  options = $extend({},JSONEditor.defaults.options,options||{});\r\n  this.element = element;\r\n  this.options = options;\r\n  this.init();\r\n};\r\nJSONEditor.prototype = {\r\n  // necessary since we remove the ctor property by doing a literal assignment. Without this\r\n  // the $isplainobject function will think that this is a plain object.\r\n  constructor: JSONEditor,\r\n  init: function() {\r\n    var self = this;\r\n    \r\n    this.ready = false;\r\n    this.copyClipboard = null;\r\n    // full references info\r\n    this.refs_with_info = {};\r\n    this.refs_prefix = \"#/counter/\";\r\n    this.refs_counter = 1;\r\n\r\n    var theme_class = JSONEditor.defaults.themes[this.options.theme || JSONEditor.defaults.theme];\r\n    if(!theme_class) throw \"Unknown theme \" + (this.options.theme || JSONEditor.defaults.theme);\r\n    \r\n    this.schema = this.options.schema;\r\n    this.theme = new theme_class();\r\n    this.template = this.options.template;\r\n    this.refs = this.options.refs || {};\r\n    this.uuid = 0;\r\n    this.__data = {};\r\n    \r\n    var icon_class = JSONEditor.defaults.iconlibs[this.options.iconlib || JSONEditor.defaults.iconlib];\r\n    if(icon_class) this.iconlib = new icon_class();\r\n\r\n    this.root_container = this.theme.getContainer();\r\n    this.element.appendChild(this.root_container);\r\n    \r\n    this.translate = this.options.translate || JSONEditor.defaults.translate;\r\n\r\n    // Fetch all external refs via ajax\r\n    var fetchUrl = document.location.toString();\r\n    var fileBase = this._getFileBase();\r\n    this._loadExternalRefs(this.schema, function() {\r\n      self._getDefinitions(self.schema, fetchUrl + '#/definitions/');\r\n      \r\n      // Validator options\r\n      var validator_options = {};\r\n      if(self.options.custom_validators) {\r\n        validator_options.custom_validators = self.options.custom_validators;\r\n      }\r\n      self.validator = new JSONEditor.Validator(self,null,validator_options);\r\n      \r\n      // Create the root editor\r\n      var schema = self.expandRefs(self.schema);\r\n      var editor_class = self.getEditorClass(schema);\r\n      self.root = self.createEditor(editor_class, {\r\n        jsoneditor: self,\r\n        schema: schema,\r\n        required: true,\r\n        container: self.root_container\r\n      });\r\n      \r\n      self.root.preBuild();\r\n      self.root.build();\r\n      self.root.postBuild();\r\n\r\n      // Starting data\r\n      if(self.options.hasOwnProperty('startval')) self.root.setValue(self.options.startval);\r\n\r\n      self.validation_results = self.validator.validate(self.root.getValue());\r\n      self.root.showValidationErrors(self.validation_results);\r\n      self.ready = true;\r\n\r\n      // Fire ready event asynchronously\r\n      window.requestAnimationFrame(function() {\r\n        if(!self.ready) return;\r\n        self.validation_results = self.validator.validate(self.root.getValue());\r\n        self.root.showValidationErrors(self.validation_results);\r\n        self.trigger('ready');\r\n        self.trigger('change');\r\n      });\r\n    }, fetchUrl, fileBase);\r\n  },\r\n  getValue: function() {\r\n    if(!this.ready) throw \"JSON Editor not ready yet.  Listen for 'ready' event before getting the value\";\r\n\r\n    return this.root.getValue();\r\n  },\r\n  setValue: function(value) {\r\n    if(!this.ready) throw \"JSON Editor not ready yet.  Listen for 'ready' event before setting the value\";\r\n\r\n    this.root.setValue(value);\r\n    return this;\r\n  },\r\n  validate: function(value) {\r\n    if(!this.ready) throw \"JSON Editor not ready yet.  Listen for 'ready' event before validating\";\r\n    \r\n    // Custom value\r\n    if(arguments.length === 1) {\r\n      return this.validator.validate(value);\r\n    }\r\n    // Current value (use cached result)\r\n    else {\r\n      return this.validation_results;\r\n    }\r\n  },\r\n  destroy: function() {\r\n    if(this.destroyed) return;\r\n    if(!this.ready) return;\r\n    \r\n    this.schema = null;\r\n    this.options = null;\r\n    this.root.destroy();\r\n    this.root = null;\r\n    this.root_container = null;\r\n    this.validator = null;\r\n    this.validation_results = null;\r\n    this.theme = null;\r\n    this.iconlib = null;\r\n    this.template = null;\r\n    this.__data = null;\r\n    this.ready = false;\r\n    this.element.innerHTML = '';\r\n    \r\n    this.destroyed = true;\r\n  },\r\n  on: function(event, callback) {\r\n    this.callbacks = this.callbacks || {};\r\n    this.callbacks[event] = this.callbacks[event] || [];\r\n    this.callbacks[event].push(callback);\r\n    \r\n    return this;\r\n  },\r\n  off: function(event, callback) {\r\n    // Specific callback\r\n    if(event && callback) {\r\n      this.callbacks = this.callbacks || {};\r\n      this.callbacks[event] = this.callbacks[event] || [];\r\n      var newcallbacks = [];\r\n      for(var i=0; i<this.callbacks[event].length; i++) {\r\n        if(this.callbacks[event][i]===callback) continue;\r\n        newcallbacks.push(this.callbacks[event][i]);\r\n      }\r\n      this.callbacks[event] = newcallbacks;\r\n    }\r\n    // All callbacks for a specific event\r\n    else if(event) {\r\n      this.callbacks = this.callbacks || {};\r\n      this.callbacks[event] = [];\r\n    }\r\n    // All callbacks for all events\r\n    else {\r\n      this.callbacks = {};\r\n    }\r\n    \r\n    return this;\r\n  },\r\n  trigger: function(event) {\r\n    if(this.callbacks && this.callbacks[event] && this.callbacks[event].length) {\r\n      for(var i=0; i<this.callbacks[event].length; i++) {\r\n        this.callbacks[event][i].apply(this, []);\r\n      }\r\n    }\r\n    \r\n    return this;\r\n  },\r\n  setOption: function(option, value) {\r\n    if(option === \"show_errors\") {\r\n      this.options.show_errors = value;\r\n      this.onChange();\r\n    }\r\n    // Only the `show_errors` option is supported for now\r\n    else {\r\n      throw \"Option \"+option+\" must be set during instantiation and cannot be changed later\";\r\n    }\r\n    \r\n    return this;\r\n  },\r\n  getEditorClass: function(schema) {\r\n    var classname;\r\n\r\n    schema = this.expandSchema(schema);\r\n\r\n    $each(JSONEditor.defaults.resolvers,function(i,resolver) {\r\n      var tmp = resolver(schema);\r\n      if(tmp) {\r\n        if(JSONEditor.defaults.editors[tmp]) {\r\n          classname = tmp;\r\n          return false;\r\n        }\r\n      }\r\n    });\r\n\r\n    if(!classname) throw \"Unknown editor for schema \"+JSON.stringify(schema);\r\n    if(!JSONEditor.defaults.editors[classname]) throw \"Unknown editor \"+classname;\r\n\r\n    return JSONEditor.defaults.editors[classname];\r\n  },\r\n  createEditor: function(editor_class, options) {\r\n    options = $extend({},editor_class.options||{},options);\r\n    return new editor_class(options);\r\n  },\r\n  onChange: function() {\r\n    if(!this.ready) return;\r\n    \r\n    if(this.firing_change) return;\r\n    this.firing_change = true;\r\n    \r\n    var self = this;\r\n    \r\n    window.requestAnimationFrame(function() {\r\n      self.firing_change = false;\r\n      if(!self.ready) return;\r\n\r\n      // Validate and cache results\r\n      self.validation_results = self.validator.validate(self.root.getValue());\r\n      \r\n      if(self.options.show_errors !== \"never\") {\r\n        self.root.showValidationErrors(self.validation_results);\r\n      }\r\n      else {\r\n        self.root.showValidationErrors([]);\r\n      }\r\n      \r\n      // Fire change event\r\n      self.trigger('change');\r\n    });\r\n    \r\n    return this;\r\n  },\r\n  compileTemplate: function(template, name) {\r\n    name = name || JSONEditor.defaults.template;\r\n\r\n    var engine;\r\n\r\n    // Specifying a preset engine\r\n    if(typeof name === 'string') {\r\n      if(!JSONEditor.defaults.templates[name]) throw \"Unknown template engine \"+name;\r\n      engine = JSONEditor.defaults.templates[name]();\r\n\r\n      if(!engine) throw \"Template engine \"+name+\" missing required library.\";\r\n    }\r\n    // Specifying a custom engine\r\n    else {\r\n      engine = name;\r\n    }\r\n\r\n    if(!engine) throw \"No template engine set\";\r\n    if(!engine.compile) throw \"Invalid template engine set\";\r\n\r\n    return engine.compile(template);\r\n  },\r\n  _data: function(el,key,value) {\r\n    // Setting data\r\n    if(arguments.length === 3) {\r\n      var uuid;\r\n      if(el.hasAttribute('data-jsoneditor-'+key)) {\r\n        uuid = el.getAttribute('data-jsoneditor-'+key);\r\n      }\r\n      else {\r\n        uuid = this.uuid++;\r\n        el.setAttribute('data-jsoneditor-'+key,uuid);\r\n      }\r\n\r\n      this.__data[uuid] = value;\r\n    }\r\n    // Getting data\r\n    else {\r\n      // No data stored\r\n      if(!el.hasAttribute('data-jsoneditor-'+key)) return null;\r\n      \r\n      return this.__data[el.getAttribute('data-jsoneditor-'+key)];\r\n    }\r\n  },\r\n  registerEditor: function(editor) {\r\n    this.editors = this.editors || {};\r\n    this.editors[editor.path] = editor;\r\n    return this;\r\n  },\r\n  unregisterEditor: function(editor) {\r\n    this.editors = this.editors || {};\r\n    this.editors[editor.path] = null;\r\n    return this;\r\n  },\r\n  getEditor: function(path) {\r\n    if(!this.editors) return;\r\n    return this.editors[path];\r\n  },\r\n  watch: function(path,callback) {\r\n    this.watchlist = this.watchlist || {};\r\n    this.watchlist[path] = this.watchlist[path] || [];\r\n    this.watchlist[path].push(callback);\r\n    \r\n    return this;\r\n  },\r\n  unwatch: function(path,callback) {\r\n    if(!this.watchlist || !this.watchlist[path]) return this;\r\n    // If removing all callbacks for a path\r\n    if(!callback) {\r\n      this.watchlist[path] = null;\r\n      return this;\r\n    }\r\n    \r\n    var newlist = [];\r\n    for(var i=0; i<this.watchlist[path].length; i++) {\r\n      if(this.watchlist[path][i] === callback) continue;\r\n      else newlist.push(this.watchlist[path][i]);\r\n    }\r\n    this.watchlist[path] = newlist.length? newlist : null;\r\n    return this;\r\n  },\r\n  notifyWatchers: function(path) {\r\n    if(!this.watchlist || !this.watchlist[path]) return this;\r\n    for(var i=0; i<this.watchlist[path].length; i++) {\r\n      this.watchlist[path][i]();\r\n    }\r\n  },\r\n  isEnabled: function() {\r\n    return !this.root || this.root.isEnabled();\r\n  },\r\n  enable: function() {\r\n    this.root.enable();\r\n  },\r\n  disable: function() {\r\n    this.root.disable();\r\n  },\r\n  _getDefinitions: function(schema,path) {\r\n    if(schema.definitions) {\r\n      for(var i in schema.definitions) {\r\n        if(!schema.definitions.hasOwnProperty(i)) continue;\r\n        this.refs[path+i] = schema.definitions[i];\r\n        if(schema.definitions[i].definitions) {\r\n          this._getDefinitions(schema.definitions[i],path+i+'/definitions/');\r\n        }\r\n      }\r\n    }\r\n  },\r\n  _getExternalRefs: function(schema, fetchUrl) {\r\n    var refs = {};\r\n    var merge_refs = function(newrefs) {\r\n      for(var i in newrefs) {\r\n        if(newrefs.hasOwnProperty(i)) {\r\n          refs[i] = true;\r\n        }\r\n      }\r\n    };\r\n    \r\n    if(schema.$ref && typeof schema.$ref !== \"object\") {\r\n      var ref_counter = this.refs_prefix + this.refs_counter++;\r\n      if(schema.$ref.substr(0,1) !== \"#\" && !this.refs[schema.$ref]) {\r\n        refs[schema.$ref] = true;\r\n      }\r\n      this.refs_with_info[ref_counter] = { fetchUrl: fetchUrl, \"$ref\": schema.$ref };\r\n      schema.$ref = ref_counter;\r\n    }\r\n    \r\n    for(var i in schema) {\r\n      if(!schema.hasOwnProperty(i)) continue;\r\n      if (!schema[i] || typeof schema[i] !== \"object\") continue;\r\n      if(Array.isArray(schema[i])) {\r\n        for(var j=0; j<schema[i].length; j++) {\r\n          if(schema[i][j] && typeof schema[i][j]===\"object\") {\r\n            merge_refs(this._getExternalRefs(schema[i][j], fetchUrl));\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        merge_refs(this._getExternalRefs(schema[i], fetchUrl));\r\n      }\r\n    }\r\n    return refs;\r\n  },\r\n  _getFileBase: function() {\r\n    var fileBase = this.options.ajaxBase;\r\n    if (typeof fileBase === 'undefined') {\r\n      fileBase = this._getFileBaseFromFileLocation(document.location.toString());\r\n    }\r\n    return fileBase;\r\n  },\r\n  _getFileBaseFromFileLocation: function(fileLocationString) {\r\n    var pathItems = fileLocationString.split(\"/\");\r\n    pathItems.pop();\r\n    return pathItems.join(\"/\")+\"/\";\r\n  },\r\n  _loadExternalRefs: function(schema, callback, fetchUrl, fileBase) {\r\n    var self = this;\r\n    var refs = this._getExternalRefs(schema, fetchUrl);\r\n    var done = 0, waiting = 0, callback_fired = false;\r\n\r\n    $each(refs,function(url) {\r\n      if(self.refs[url]) return;\r\n      if(!self.options.ajax) throw \"Must set ajax option to true to load external ref \"+url;\r\n      self.refs[url] = 'loading';\r\n      waiting++;\r\n\r\n      var fetchUrl=url;\r\n      if( fileBase!=url.substr(0,fileBase.length) && \"http\"!=url.substr(0,4) && \"/\"!=url.substr(0,1)) fetchUrl=fileBase+url;\r\n\r\n      var r = new XMLHttpRequest();\r\n      r.overrideMimeType('application/json');\r\n      r.open(\"GET\", fetchUrl, true);\r\n      if(self.options.ajaxCredentials) r.withCredentials=self.options.ajaxCredentials;\r\n      r.onreadystatechange = function () {\r\n        if (r.readyState != 4) return;\r\n        // Request succeeded\r\n        if(r.status === 200) {\r\n          var response;\r\n          try {\r\n            response = JSON.parse(r.responseText);\r\n          }\r\n          catch(e) {\r\n            window.console.log(e);\r\n            throw \"Failed to parse external ref \"+fetchUrl;\r\n          }\r\n          if (!(typeof response === \"boolean\" || typeof response === \"object\") || response === null || Array.isArray(response)) throw \"External ref does not contain a valid schema - \"+fetchUrl;  \r\n\r\n          self.refs[url] = response;\r\n          var fileBase = self._getFileBaseFromFileLocation(fetchUrl);\r\n          self._getDefinitions(response, fetchUrl + \"#/definitions/\");\r\n          self._loadExternalRefs(response,function() {\r\n            done++;\r\n            if(done >= waiting && !callback_fired) {\r\n              callback_fired = true;\r\n              callback();\r\n            }\r\n          }, fetchUrl, fileBase);\r\n        }\r\n        // Request failed\r\n        else {\r\n          window.console.log(r);\r\n          throw \"Failed to fetch ref via ajax- \"+url;\r\n        }\r\n      };\r\n      r.send();\r\n    });\r\n    \r\n    if(!waiting) {\r\n      callback();\r\n    }\r\n  },\r\n  expandRefs: function(schema) {\r\n    schema = $extend({},schema);\r\n    \r\n    while (schema.$ref) {\r\n      var refObj = this.refs_with_info[schema.$ref];\r\n      delete schema.$ref;\r\n      var fetchUrl = \"\";\r\n      if (refObj.$ref.startsWith(\"#\")) {\r\n        fetchUrl = refObj.fetchUrl;\r\n      }\r\n      var ref = fetchUrl + refObj.$ref;\r\n      if(!this.refs[ref]) ref = fetchUrl + decodeURIComponent(refObj.$ref);\r\n      schema = this.extendSchemas(schema, $extend({},this.refs[ref]));\r\n    }\r\n    return schema;\r\n  },\r\n  expandSchema: function(schema, fileBase) {\r\n    var self = this;\r\n    var extended = $extend({},schema);\r\n    var i;\r\n\r\n    // Version 3 `type`\r\n    if(typeof schema.type === 'object') {\r\n      // Array of types\r\n      if(Array.isArray(schema.type)) {\r\n        $each(schema.type, function(key,value) {\r\n          // Schema\r\n          if(typeof value === 'object') {\r\n            schema.type[key] = self.expandSchema(value);\r\n          }\r\n        });\r\n      }\r\n      // Schema\r\n      else {\r\n        schema.type = self.expandSchema(schema.type);\r\n      }\r\n    }\r\n    // Version 3 `disallow`\r\n    if(typeof schema.disallow === 'object') {\r\n      // Array of types\r\n      if(Array.isArray(schema.disallow)) {\r\n        $each(schema.disallow, function(key,value) {\r\n          // Schema\r\n          if(typeof value === 'object') {\r\n            schema.disallow[key] = self.expandSchema(value);\r\n          }\r\n        });\r\n      }\r\n      // Schema\r\n      else {\r\n        schema.disallow = self.expandSchema(schema.disallow);\r\n      }\r\n    }\r\n    // Version 4 `anyOf`\r\n    if(schema.anyOf) {\r\n      $each(schema.anyOf, function(key,value) {\r\n        schema.anyOf[key] = self.expandSchema(value);\r\n      });\r\n    }\r\n    // Version 4 `dependencies` (schema dependencies)\r\n    if(schema.dependencies) {\r\n      $each(schema.dependencies,function(key,value) {\r\n        if(typeof value === \"object\" && !(Array.isArray(value))) {\r\n          schema.dependencies[key] = self.expandSchema(value);\r\n        }\r\n      });\r\n    }\r\n    // Version 4 `not`\r\n    if(schema.not) {\r\n      schema.not = this.expandSchema(schema.not);\r\n    }\r\n    \r\n    // allOf schemas should be merged into the parent\r\n    if(schema.allOf) {\r\n      for(i=0; i<schema.allOf.length; i++) {\r\n        extended = this.extendSchemas(extended,this.expandSchema(schema.allOf[i]));\r\n      }\r\n      delete extended.allOf;\r\n    }\r\n    // extends schemas should be merged into parent\r\n    if(schema[\"extends\"]) {\r\n      // If extends is a schema\r\n      if(!(Array.isArray(schema[\"extends\"]))) {\r\n        extended = this.extendSchemas(extended,this.expandSchema(schema[\"extends\"]));\r\n      }\r\n      // If extends is an array of schemas\r\n      else {\r\n        for(i=0; i<schema[\"extends\"].length; i++) {\r\n          extended = this.extendSchemas(extended,this.expandSchema(schema[\"extends\"][i]));\r\n        }\r\n      }\r\n      delete extended[\"extends\"];\r\n    }\r\n    // parent should be merged into oneOf schemas\r\n    if(schema.oneOf) {\r\n      var tmp = $extend({},extended);\r\n      delete tmp.oneOf;\r\n      for(i=0; i<schema.oneOf.length; i++) {\r\n        extended.oneOf[i] = this.extendSchemas(this.expandSchema(schema.oneOf[i]),tmp);\r\n      }\r\n    }\r\n    \r\n    return this.expandRefs(extended);\r\n  },\r\n  extendSchemas: function(obj1, obj2) {\r\n    obj1 = $extend({},obj1);\r\n    obj2 = $extend({},obj2);\r\n\r\n    var self = this;\r\n    var extended = {};\r\n    $each(obj1, function(prop,val) {\r\n      // If this key is also defined in obj2, merge them\r\n      if(typeof obj2[prop] !== \"undefined\") {\r\n        // Required and defaultProperties arrays should be unioned together\r\n        if((prop === 'required'||prop === 'defaultProperties') && typeof val === \"object\" && Array.isArray(val)) {\r\n          // Union arrays and unique\r\n          extended[prop] = val.concat(obj2[prop]).reduce(function(p, c) {\r\n            if (p.indexOf(c) < 0) p.push(c);\r\n            return p;\r\n          }, []);\r\n        }\r\n        // Type should be intersected and is either an array or string\r\n        else if(prop === 'type' && (typeof val === \"string\" || Array.isArray(val))) {\r\n          // Make sure we're dealing with arrays\r\n          if(typeof val === \"string\") val = [val];\r\n          if(typeof obj2.type === \"string\") obj2.type = [obj2.type];\r\n\r\n          // If type is only defined in the first schema, keep it\r\n          if(!obj2.type || !obj2.type.length) {\r\n            extended.type = val;\r\n          }\r\n          // If type is defined in both schemas, do an intersect\r\n          else {\r\n            extended.type = val.filter(function(n) {\r\n              return obj2.type.indexOf(n) !== -1;\r\n            });\r\n          }\r\n\r\n          // If there's only 1 type and it's a primitive, use a string instead of array\r\n          if(extended.type.length === 1 && typeof extended.type[0] === \"string\") {\r\n            extended.type = extended.type[0];\r\n          }\r\n          // Remove the type property if it's empty\r\n          else if(extended.type.length === 0) {\r\n            delete extended.type;\r\n          }\r\n        }\r\n        // All other arrays should be intersected (enum, etc.)\r\n        else if(typeof val === \"object\" && Array.isArray(val)){\r\n          extended[prop] = val.filter(function(n) {\r\n            return obj2[prop].indexOf(n) !== -1;\r\n          });\r\n        }\r\n        // Objects should be recursively merged\r\n        else if(typeof val === \"object\" && val !== null) {\r\n          extended[prop] = self.extendSchemas(val,obj2[prop]);\r\n        }\r\n        // Otherwise, use the first value\r\n        else {\r\n          extended[prop] = val;\r\n        }\r\n      }\r\n      // Otherwise, just use the one in obj1\r\n      else {\r\n        extended[prop] = val;\r\n      }\r\n    });\r\n    // Properties in obj2 that aren't in obj1\r\n    $each(obj2, function(prop,val) {\r\n      if(typeof obj1[prop] === \"undefined\") {\r\n        extended[prop] = val;\r\n      }\r\n    });\r\n\r\n    return extended;\r\n  },\r\n  setCopyClipboardContents: function(value) {\r\n    this.copyClipboard = value;\r\n  },\r\n  getCopyClipboardContents: function() {\r\n    return this.copyClipboard;\r\n  }\r\n};\r\n\r\nJSONEditor.defaults = {\r\n  themes: {},\r\n  templates: {},\r\n  iconlibs: {},\r\n  editors: {},\r\n  languages: {},\r\n  resolvers: [],\r\n  custom_validators: []\r\n};\r\n\r\nJSONEditor.Validator = Class.extend({\r\n  init: function(jsoneditor,schema,options) {\r\n    this.jsoneditor = jsoneditor;\r\n    this.schema = schema || this.jsoneditor.schema;\r\n    this.options = options || {};\r\n    this.translate = this.jsoneditor.translate || JSONEditor.defaults.translate;\r\n  },\r\n  validate: function(value) {\r\n    return this._validateSchema(this.schema, value);\r\n  },\r\n  _validateSchema: function(schema,value,path) {\r\n    var self = this;\r\n    var errors = [];\r\n    var valid, i, j;\r\n    var stringified = JSON.stringify(value);\r\n\r\n    path = path || 'root';\r\n\r\n    // Work on a copy of the schema\r\n    schema = $extend({},this.jsoneditor.expandRefs(schema));\r\n\r\n    /*\r\n     * Type Agnostic Validation\r\n     */\r\n\r\n    // Version 3 `required` and `required_by_default`\r\n    if(typeof value === \"undefined\") {\r\n      if((typeof schema.required !== \"undefined\" && schema.required === true) || (typeof schema.required === \"undefined\" && this.jsoneditor.options.required_by_default === true)) {\r\n        errors.push({\r\n          path: path,\r\n          property: 'required',\r\n          message: this.translate(\"error_notset\")\r\n        });\r\n      }\r\n      \r\n      return errors;\r\n    }\r\n\r\n    // `enum`\r\n    if(schema[\"enum\"]) {\r\n      valid = false;\r\n      for(i=0; i<schema[\"enum\"].length; i++) {\r\n        if(stringified === JSON.stringify(schema[\"enum\"][i])) valid = true;\r\n      }\r\n      if(!valid) {\r\n        errors.push({\r\n          path: path,\r\n          property: 'enum',\r\n          message: this.translate(\"error_enum\")\r\n        });\r\n      }\r\n    }\r\n\r\n    // `extends` (version 3)\r\n    if(schema[\"extends\"]) {\r\n      for(i=0; i<schema[\"extends\"].length; i++) {\r\n        errors = errors.concat(this._validateSchema(schema[\"extends\"][i],value,path));\r\n      }\r\n    }\r\n\r\n    // `allOf`\r\n    if(schema.allOf) {\r\n      for(i=0; i<schema.allOf.length; i++) {\r\n        errors = errors.concat(this._validateSchema(schema.allOf[i],value,path));\r\n      }\r\n    }\r\n\r\n    // `anyOf`\r\n    if(schema.anyOf) {\r\n      valid = false;\r\n      for(i=0; i<schema.anyOf.length; i++) {\r\n        if(!this._validateSchema(schema.anyOf[i],value,path).length) {\r\n          valid = true;\r\n          break;\r\n        }\r\n      }\r\n      if(!valid) {\r\n        errors.push({\r\n          path: path,\r\n          property: 'anyOf',\r\n          message: this.translate('error_anyOf')\r\n        });\r\n      }\r\n    }\r\n\r\n    // `oneOf`\r\n    if(schema.oneOf) {\r\n      valid = 0;\r\n      var oneof_errors = [];\r\n      for(i=0; i<schema.oneOf.length; i++) {\r\n        // Set the error paths to be path.oneOf[i].rest.of.path\r\n        var tmp = this._validateSchema(schema.oneOf[i],value,path);\r\n        if(!tmp.length) {\r\n          valid++;\r\n        }\r\n\r\n        for(j=0; j<tmp.length; j++) {\r\n          tmp[j].path = path+'.oneOf['+i+']'+tmp[j].path.substr(path.length);\r\n        }\r\n        oneof_errors = oneof_errors.concat(tmp);\r\n\r\n      }\r\n      if(valid !== 1) {\r\n        errors.push({\r\n          path: path,\r\n          property: 'oneOf',\r\n          message: this.translate('error_oneOf', [valid])\r\n        });\r\n        errors = errors.concat(oneof_errors);\r\n      }\r\n    }\r\n\r\n    // `not`\r\n    if(schema.not) {\r\n      if(!this._validateSchema(schema.not,value,path).length) {\r\n        errors.push({\r\n          path: path,\r\n          property: 'not',\r\n          message: this.translate('error_not')\r\n        });\r\n      }\r\n    }\r\n\r\n    // `type` (both Version 3 and Version 4 support)\r\n    if(schema.type) {\r\n      // Union type\r\n      if(Array.isArray(schema.type)) {\r\n        valid = false;\r\n        for(i=0;i<schema.type.length;i++) {\r\n          if(this._checkType(schema.type[i], value)) {\r\n            valid = true;\r\n            break;\r\n          }\r\n        }\r\n        if(!valid) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'type',\r\n            message: this.translate('error_type_union')\r\n          });\r\n        }\r\n      }\r\n      // Simple type\r\n      else {\r\n        if(['date', 'time', 'datetime-local'].indexOf(schema.format) != -1 && schema.type == 'integer') {\r\n          // Hack to get validator to validate as string even if value is integer\r\n          // As validation of 'date', 'time', 'datetime-local' is done in separate validator\r\n          if(!this._checkType('string', \"\"+value)) {\r\n            errors.push({\r\n              path: path,\r\n              property: 'type',\r\n              message: this.translate('error_type', [schema.format])\r\n            });\r\n          }\r\n        }\r\n        else if(!this._checkType(schema.type, value)) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'type',\r\n            message: this.translate('error_type', [schema.type])\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    // `disallow` (version 3)\r\n    if(schema.disallow) {\r\n      // Union type\r\n      if(Array.isArray(schema.disallow)) {\r\n        valid = true;\r\n        for(i=0;i<schema.disallow.length;i++) {\r\n          if(this._checkType(schema.disallow[i], value)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if(!valid) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'disallow',\r\n            message: this.translate('error_disallow_union')\r\n          });\r\n        }\r\n      }\r\n      // Simple type\r\n      else {\r\n        if(this._checkType(schema.disallow, value)) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'disallow',\r\n            message: this.translate('error_disallow', [schema.disallow])\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    /*\r\n     * Type Specific Validation\r\n     */\r\n\r\n    // Number Specific Validation\r\n    if(typeof value === \"number\") {\r\n      // `multipleOf` and `divisibleBy`\r\n      if(schema.multipleOf || schema.divisibleBy) {\r\n        var divisor = schema.multipleOf || schema.divisibleBy;\r\n        // Vanilla JS, prone to floating point rounding errors (e.g. 1.14 / .01 == 113.99999)\r\n        valid = (value/divisor === Math.floor(value/divisor));\r\n\r\n        // Use math.js is available\r\n        if(window.math) {\r\n          valid = window.math.mod(window.math.bignumber(value), window.math.bignumber(divisor)).equals(0);\r\n        }\r\n        // Use decimal.js is available\r\n        else if(window.Decimal) {\r\n          valid = (new window.Decimal(value)).mod(new window.Decimal(divisor)).equals(0);\r\n        }\r\n\r\n        if(!valid) {\r\n          errors.push({\r\n            path: path,\r\n            property: schema.multipleOf? 'multipleOf' : 'divisibleBy',\r\n            message: this.translate('error_multipleOf', [divisor])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `maximum`\r\n      if(schema.hasOwnProperty('maximum')) {\r\n        // Vanilla JS, prone to floating point rounding errors (e.g. .999999999999999 == 1)\r\n        valid = schema.exclusiveMaximum? (value < schema.maximum) : (value <= schema.maximum);\r\n\r\n        // Use math.js is available\r\n        if(window.math) {\r\n          valid = window.math[schema.exclusiveMaximum?'smaller':'smallerEq'](\r\n            window.math.bignumber(value),\r\n            window.math.bignumber(schema.maximum)\r\n          );\r\n        }\r\n        // Use Decimal.js if available\r\n        else if(window.Decimal) {\r\n          valid = (new window.Decimal(value))[schema.exclusiveMaximum?'lt':'lte'](new window.Decimal(schema.maximum));\r\n        }\r\n\r\n        if(!valid) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'maximum',\r\n            message: this.translate(\r\n              (schema.exclusiveMaximum?'error_maximum_excl':'error_maximum_incl'),\r\n              [schema.maximum]\r\n            )\r\n          });\r\n        }\r\n      }\r\n\r\n      // `minimum`\r\n      if(schema.hasOwnProperty('minimum')) {\r\n        // Vanilla JS, prone to floating point rounding errors (e.g. .999999999999999 == 1)\r\n        valid = schema.exclusiveMinimum? (value > schema.minimum) : (value >= schema.minimum);\r\n\r\n        // Use math.js is available\r\n        if(window.math) {\r\n          valid = window.math[schema.exclusiveMinimum?'larger':'largerEq'](\r\n            window.math.bignumber(value),\r\n            window.math.bignumber(schema.minimum)\r\n          );\r\n        }\r\n        // Use Decimal.js if available\r\n        else if(window.Decimal) {\r\n          valid = (new window.Decimal(value))[schema.exclusiveMinimum?'gt':'gte'](new window.Decimal(schema.minimum));\r\n        }\r\n\r\n        if(!valid) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'minimum',\r\n            message: this.translate(\r\n              (schema.exclusiveMinimum?'error_minimum_excl':'error_minimum_incl'),\r\n              [schema.minimum]\r\n            )\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // String specific validation\r\n    else if(typeof value === \"string\") {\r\n      // `maxLength`\r\n      if(schema.maxLength) {\r\n        if((value+\"\").length > schema.maxLength) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'maxLength',\r\n            message: this.translate('error_maxLength', [schema.maxLength])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `minLength`\r\n      if(schema.minLength) {\r\n        if((value+\"\").length < schema.minLength) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'minLength',\r\n            message: this.translate((schema.minLength===1?'error_notempty':'error_minLength'), [schema.minLength])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `pattern`\r\n      if(schema.pattern) {\r\n        if(!(new RegExp(schema.pattern)).test(value)) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'pattern',\r\n            message: this.translate('error_pattern', [schema.pattern])\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Array specific validation\r\n    else if(typeof value === \"object\" && value !== null && Array.isArray(value)) {\r\n      // `items` and `additionalItems`\r\n      if(schema.items) {\r\n        // `items` is an array\r\n        if(Array.isArray(schema.items)) {\r\n          for(i=0; i<value.length; i++) {\r\n            // If this item has a specific schema tied to it\r\n            // Validate against it\r\n            if(schema.items[i]) {\r\n              errors = errors.concat(this._validateSchema(schema.items[i],value[i],path+'.'+i));\r\n            }\r\n            // If all additional items are allowed\r\n            else if(schema.additionalItems === true) {\r\n              break;\r\n            }\r\n            // If additional items is a schema\r\n            // TODO: Incompatibility between version 3 and 4 of the spec\r\n            else if(schema.additionalItems) {\r\n              errors = errors.concat(this._validateSchema(schema.additionalItems,value[i],path+'.'+i));\r\n            }\r\n            // If no additional items are allowed\r\n            else if(schema.additionalItems === false) {\r\n              errors.push({\r\n                path: path,\r\n                property: 'additionalItems',\r\n                message: this.translate('error_additionalItems')\r\n              });\r\n              break;\r\n            }\r\n            // Default for `additionalItems` is an empty schema\r\n            else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        // `items` is a schema\r\n        else {\r\n          // Each item in the array must validate against the schema\r\n          for(i=0; i<value.length; i++) {\r\n            errors = errors.concat(this._validateSchema(schema.items,value[i],path+'.'+i));\r\n          }\r\n        }\r\n      }\r\n\r\n      // `maxItems`\r\n      if(schema.maxItems) {\r\n        if(value.length > schema.maxItems) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'maxItems',\r\n            message: this.translate('error_maxItems', [schema.maxItems])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `minItems`\r\n      if(schema.minItems) {\r\n        if(value.length < schema.minItems) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'minItems',\r\n            message: this.translate('error_minItems', [schema.minItems])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `uniqueItems`\r\n      if(schema.uniqueItems) {\r\n        var seen = {};\r\n        for(i=0; i<value.length; i++) {\r\n          valid = JSON.stringify(value[i]);\r\n          if(seen[valid]) {\r\n            errors.push({\r\n              path: path,\r\n              property: 'uniqueItems',\r\n              message: this.translate('error_uniqueItems')\r\n            });\r\n            break;\r\n          }\r\n          seen[valid] = true;\r\n        }\r\n      }\r\n    }\r\n    // Object specific validation\r\n    else if(typeof value === \"object\" && value !== null) {\r\n      // `maxProperties`\r\n      if(schema.maxProperties) {\r\n        valid = 0;\r\n        for(i in value) {\r\n          if(!value.hasOwnProperty(i)) continue;\r\n          valid++;\r\n        }\r\n        if(valid > schema.maxProperties) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'maxProperties',\r\n            message: this.translate('error_maxProperties', [schema.maxProperties])\r\n          });\r\n        }\r\n      }\r\n\r\n      // `minProperties`\r\n      if(schema.minProperties) {\r\n        valid = 0;\r\n        for(i in value) {\r\n          if(!value.hasOwnProperty(i)) continue;\r\n          valid++;\r\n        }\r\n        if(valid < schema.minProperties) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'minProperties',\r\n            message: this.translate('error_minProperties', [schema.minProperties])\r\n          });\r\n        }\r\n      }\r\n\r\n      // Version 4 `required`\r\n      if(typeof schema.required !== \"undefined\" && Array.isArray(schema.required)) {\r\n        for(i=0; i<schema.required.length; i++) {\r\n          if(typeof value[schema.required[i]] === \"undefined\") {\r\n            errors.push({\r\n              path: path,\r\n              property: 'required',\r\n              message: this.translate('error_required', [schema.required[i]])\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      // `properties`\r\n      var validated_properties = {};\r\n      for(i in schema.properties) {\r\n        if(!schema.properties.hasOwnProperty(i)) continue;\r\n        validated_properties[i] = true;\r\n        errors = errors.concat(this._validateSchema(schema.properties[i],value[i],path+'.'+i));\r\n      }\r\n\r\n      // `patternProperties`\r\n      if(schema.patternProperties) {\r\n        for(i in schema.patternProperties) {\r\n          if(!schema.patternProperties.hasOwnProperty(i)) continue;\r\n          var regex = new RegExp(i);\r\n\r\n          // Check which properties match\r\n          for(j in value) {\r\n            if(!value.hasOwnProperty(j)) continue;\r\n            if(regex.test(j)) {\r\n              validated_properties[j] = true;\r\n              errors = errors.concat(this._validateSchema(schema.patternProperties[i],value[j],path+'.'+j));\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // The no_additional_properties option currently doesn't work with extended schemas that use oneOf or anyOf\r\n      if(typeof schema.additionalProperties === \"undefined\" && this.jsoneditor.options.no_additional_properties && !schema.oneOf && !schema.anyOf) {\r\n        schema.additionalProperties = false;\r\n      }\r\n\r\n      // `additionalProperties`\r\n      if(typeof schema.additionalProperties !== \"undefined\") {\r\n        for(i in value) {\r\n          if(!value.hasOwnProperty(i)) continue;\r\n          if(!validated_properties[i]) {\r\n            // No extra properties allowed\r\n            if(!schema.additionalProperties) {\r\n              errors.push({\r\n                path: path,\r\n                property: 'additionalProperties',\r\n                message: this.translate('error_additional_properties', [i])\r\n              });\r\n              break;\r\n            }\r\n            // Allowed\r\n            else if(schema.additionalProperties === true) {\r\n              break;\r\n            }\r\n            // Must match schema\r\n            // TODO: incompatibility between version 3 and 4 of the spec\r\n            else {\r\n              errors = errors.concat(this._validateSchema(schema.additionalProperties,value[i],path+'.'+i));\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // `dependencies`\r\n      if(schema.dependencies) {\r\n        for(i in schema.dependencies) {\r\n          if(!schema.dependencies.hasOwnProperty(i)) continue;\r\n\r\n          // Doesn't need to meet the dependency\r\n          if(typeof value[i] === \"undefined\") continue;\r\n\r\n          // Property dependency\r\n          if(Array.isArray(schema.dependencies[i])) {\r\n            for(j=0; j<schema.dependencies[i].length; j++) {\r\n              if(typeof value[schema.dependencies[i][j]] === \"undefined\") {\r\n                errors.push({\r\n                  path: path,\r\n                  property: 'dependencies',\r\n                  message: this.translate('error_dependency', [schema.dependencies[i][j]])\r\n                });\r\n              }\r\n            }\r\n          }\r\n          // Schema dependency\r\n          else {\r\n            errors = errors.concat(this._validateSchema(schema.dependencies[i],value,path));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (schema.links) {\r\n      for (var m = 0; m < schema.links.length; m++) {\r\n        if (schema.links[m].rel.toLowerCase() === \"describedby\") {\r\n          var href = schema.links[m].href;\r\n          var data = this.jsoneditor.root.getValue();\r\n          //var template = new UriTemplate(href); //preprocessURI(href));\r\n          //var ref = template.fillFromObject(data);\r\n          var template = this.jsoneditor.compileTemplate(href, this.jsoneditor.template);\r\n          var ref = template(data);\r\n\r\n          schema.links.splice(m, 1);\r\n\r\n          schema = $extend({}, schema, this.jsoneditor.refs[ref]);\r\n\r\n          errors = errors.concat(this._validateSchema(schema, value, path));\r\n        }\r\n      }\r\n    }\r\n\r\n    // date, time and datetime-local validation\r\n    if(['date', 'time', 'datetime-local'].indexOf(schema.format) != -1) {\r\n\r\n      var validatorRx = {\r\n        'date': /^(\\d{4}\\D\\d{2}\\D\\d{2})?$/,\r\n        'time': /^(\\d{2}:\\d{2}(?::\\d{2})?)?$/,\r\n        'datetime-local': /^(\\d{4}\\D\\d{2}\\D\\d{2}[ T]\\d{2}:\\d{2}(?::\\d{2})?)?$/\r\n      };\r\n      var format = {\r\n        'date': '\"YYYY-MM-DD\"',\r\n        'time': '\"HH:MM\"',\r\n        'datetime-local': '\"YYYY-MM-DD HH:MM\"'\r\n      };\r\n\r\n      var ed = this.jsoneditor.getEditor(path);\r\n      var dateFormat = (ed && ed.flatpickr) ? ed.flatpickr.config.dateFormat : format[schema.format];\r\n\r\n      if (schema.type == 'integer') {\r\n        // The value is a timestamp\r\n        if (value * 1 < 1) {\r\n          // If value is less than 1, then it's an invalid epoch date before 00:00:00 UTC Thursday, 1 January 1970\r\n          errors.push({\r\n            path: path,\r\n            property: 'format',\r\n            message: this.translate('error_invalid_epoch')\r\n          });\r\n        }\r\n        else if (value != Math.abs(parseInt(value))) {\r\n          // not much to check for, so we assume value is ok if it's a positive number\r\n          errors.push({\r\n            path: path,\r\n            property: 'format',\r\n            message: this.translate('error_' + schema.format.replace(/-/g, \"_\"), [dateFormat])\r\n          });\r\n        }\r\n      }\r\n      else if (!ed || !ed.flatpickr) {\r\n        // Standard string input, without flatpickr\r\n        if(!validatorRx[schema.format].test(value)) {\r\n          errors.push({\r\n            path: path,\r\n            property: 'format',\r\n            message: this.translate('error_' + schema.format.replace(/-/g, \"_\"), [dateFormat])\r\n          });\r\n        }\r\n      }\r\n      else if (ed) {\r\n        // Flatpickr validation\r\n        if (value !== '') {\r\n\r\n          var compareValue;\r\n          if(ed.flatpickr.config.mode != 'single') {\r\n            var seperator = ed.flatpickr.config.mode == 'range' ? ed.flatpickr.l10n.rangeSeparator : ', ';\r\n            var selectedDates = ed.flatpickr.selectedDates.map(function(val) {\r\n                return ed.flatpickr.formatDate(val, ed.flatpickr.config.dateFormat);\r\n            });\r\n            compareValue = selectedDates.join(seperator);\r\n          }\r\n\r\n          try {\r\n            if (compareValue) {\r\n              // Not the best validation method, but range and multiple mode are special\r\n              // Optimal solution would be if it is possible to change the return format from string/integer to array\r\n              if (compareValue != value) throw ed.flatpickr.config.mode + ' mismatch';\r\n            }\r\n            else if (ed.flatpickr.formatDate(ed.flatpickr.parseDate(value, ed.flatpickr.config.dateFormat), ed.flatpickr.config.dateFormat) != value) throw 'mismatch';\r\n          }\r\n          catch(err) {\r\n            var errorDateFormat = ed.flatpickr.config.errorDateFormat !== undefined ? ed.flatpickr.config.errorDateFormat : ed.flatpickr.config.dateFormat;\r\n            errors.push({\r\n              path: path,\r\n              property: 'format',\r\n              message: this.translate('error_' + ed.format.replace(/-/g, \"_\"), [errorDateFormat])\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Custom type validation (global)\r\n    $each(JSONEditor.defaults.custom_validators,function(i,validator) {\r\n      errors = errors.concat(validator.call(self,schema,value,path));\r\n    });\r\n    // Custom type validation (instance specific)\r\n    if(this.options.custom_validators) {\r\n      $each(this.options.custom_validators,function(i,validator) {\r\n        errors = errors.concat(validator.call(self,schema,value,path));\r\n      });\r\n    }\r\n\r\n    return errors;\r\n  },\r\n  _checkType: function(type, value) {\r\n    // Simple types\r\n    if(typeof type === \"string\") {\r\n      if(type===\"string\") return typeof value === \"string\";\r\n      else if(type===\"number\") return typeof value === \"number\";\r\n      else if(type===\"integer\") return typeof value === \"number\" && value === Math.floor(value);\r\n      else if(type===\"boolean\") return typeof value === \"boolean\";\r\n      else if(type===\"array\") return Array.isArray(value);\r\n      else if(type === \"object\") return value !== null && !(Array.isArray(value)) && typeof value === \"object\";\r\n      else if(type === \"null\") return value === null;\r\n      else return true;\r\n    }\r\n    // Schema\r\n    else {\r\n      return !this._validateSchema(type,value).length;\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * All editors should extend from this class\r\n */\r\nJSONEditor.AbstractEditor = Class.extend({\r\n  onChildEditorChange: function(editor) {\r\n    this.onChange(true);\r\n  },\r\n  notify: function() {\r\n    if(this.path) this.jsoneditor.notifyWatchers(this.path);\r\n  },\r\n  change: function() {\r\n    if(this.parent) this.parent.onChildEditorChange(this);\r\n    else if(this.jsoneditor) this.jsoneditor.onChange();\r\n  },\r\n  onChange: function(bubble) {\r\n    this.notify();\r\n    if(this.watch_listener) this.watch_listener();\r\n    if(bubble) this.change();\r\n  },\r\n  register: function() {\r\n    this.jsoneditor.registerEditor(this);\r\n    this.onChange();\r\n  },\r\n  unregister: function() {\r\n    if(!this.jsoneditor) return;\r\n    this.jsoneditor.unregisterEditor(this);\r\n  },\r\n  getNumColumns: function() {\r\n    return 12;\r\n  },\r\n  isActive: function() {\r\n    return this.active;\r\n  },\r\n  activate: function() {\r\n    this.active = true;\r\n    this.optInCheckbox.checked = true;\r\n    this.enable();\r\n    this.change();\r\n  },\r\n  deactivate: function() {\r\n    // only non required properties can be deactivated.\r\n    if (!this.isRequired()) {\r\n      this.active = false;\r\n      this.optInCheckbox.checked = false;\r\n      this.disable();\r\n      this.change();\r\n    }\r\n  },\r\n  init: function(options) {\r\n    this.jsoneditor = options.jsoneditor;\r\n\r\n    this.theme = this.jsoneditor.theme;\r\n    this.template_engine = this.jsoneditor.template;\r\n    this.iconlib = this.jsoneditor.iconlib;\r\n\r\n    this.translate = this.jsoneditor.translate || JSONEditor.defaults.translate;\r\n\r\n    this.original_schema = options.schema;\r\n    this.schema = this.jsoneditor.expandSchema(this.original_schema);\r\n\r\n    this.active = true;\r\n\r\n    this.options = $extend({}, (this.options || {}), (this.schema.options || {}), (options.schema.options || {}), options);\r\n\r\n    if(!options.path && !this.schema.id) this.schema.id = 'root';\r\n    this.path = options.path || 'root';\r\n    this.formname = options.formname || this.path.replace(/\\.([^.]+)/g,'[$1]');\r\n    if(this.jsoneditor.options.form_name_root) this.formname = this.formname.replace(/^root\\[/,this.jsoneditor.options.form_name_root+'[');\r\n    this.key = this.path.split('.').pop();\r\n    this.parent = options.parent;\r\n\r\n    this.link_watchers = [];\r\n\r\n    if(options.container) this.setContainer(options.container);\r\n    this.registerDependencies();\r\n  },\r\n  registerDependencies: function() {\r\n    this.dependenciesFulfilled = true;\r\n    var deps = this.options.dependencies;\r\n    if (!deps) {\r\n      return;\r\n    }\r\n\r\n    var self = this;\r\n    Object.keys(deps).forEach(function(dependency) {\r\n      var path = self.path.split('.');\r\n      path[path.length - 1] = dependency;\r\n      path = path.join('.');\r\n      var choices = deps[dependency];\r\n      self.jsoneditor.watch(path, function() {\r\n        self.checkDependency(path, choices);\r\n      });\r\n    });\r\n  },\r\n  checkDependency: function(path, choices) {\r\n    var wrapper = this.container || this.control;\r\n    if (this.path === path || !wrapper || this.jsoneditor === null) {   \r\n      return;\r\n    }\r\n\r\n    var self = this;\r\n    var editor = this.jsoneditor.getEditor(path);\r\n    var value = editor ? editor.getValue() : undefined;\r\n    var previousStatus = this.dependenciesFulfilled;\r\n    this.dependenciesFulfilled = false;\r\n\r\n    if (!editor || !editor.dependenciesFulfilled) {\r\n      this.dependenciesFulfilled = false;\r\n    } else if (Array.isArray(choices)) {\r\n      choices.some(function(choice) {\r\n        if (value === choice) {\r\n          self.dependenciesFulfilled = true;\r\n          return true;\r\n        }\r\n      });\r\n    } else if (typeof choices === 'object') {\r\n      if (typeof value !== 'object') {\r\n        this.dependenciesFulfilled = choices === value;\r\n      } else {\r\n        Object.keys(choices).some(function(key) {\r\n          if (!choices.hasOwnProperty(key)) {\r\n            return false;\r\n          }\r\n          if (!value.hasOwnProperty(key) || choices[key] !== value[key]) {\r\n            self.dependenciesFulfilled = false;\r\n            return true;\r\n          }\r\n          self.dependenciesFulfilled = true;\r\n        });\r\n      }\r\n    } else if (typeof choices === 'string' || typeof choices === 'number') {\r\n      this.dependenciesFulfilled = value === choices;\r\n    } else if (typeof choices === 'boolean') {\r\n      if (choices) {\r\n        this.dependenciesFulfilled = value && value.length > 0;\r\n      } else {\r\n        this.dependenciesFulfilled = !value || value.length === 0;\r\n      }\r\n    }\r\n\r\n    if (this.dependenciesFulfilled !== previousStatus) {\r\n      this.notify();\r\n    }\r\n\r\n    if (this.dependenciesFulfilled) {\r\n      wrapper.style.display = 'block';\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n    }\r\n  },\r\n  setContainer: function(container) {\r\n    this.container = container;\r\n    if(this.schema.id) this.container.setAttribute('data-schemaid',this.schema.id);\r\n    if(this.schema.type && typeof this.schema.type === \"string\") this.container.setAttribute('data-schematype',this.schema.type);\r\n    this.container.setAttribute('data-schemapath',this.path);\r\n  },\r\n  setOptInCheckbox: function(header) {\r\n    // the active/deactive checbox control.\r\n    var self = this;\r\n    this.optInCheckbox = document.createElement('input');\r\n    this.optInCheckbox.setAttribute('type', 'checkbox');\r\n    this.optInCheckbox.setAttribute('style', 'margin: 0 10px 0 0;');\r\n    this.optInCheckbox.classList.add('json-editor-opt-in');\r\n\r\n    this.optInCheckbox.addEventListener('click', function () {\r\n      if (self.isActive()) {\r\n        self.deactivate();\r\n      } else {\r\n        self.activate();\r\n      }\r\n    });\r\n\r\n    // append active/deactive checkbox if show_opt_in is true\r\n    if (this.jsoneditor.options.show_opt_in || this.options.show_opt_in) {\r\n      // and control to type object editors if they are not required\r\n      if (this.parent && this.parent.schema.type === 'object' && !this.isRequired() && this.header) {\r\n        this.header.appendChild(this.optInCheckbox);\r\n        this.header.insertBefore(this.optInCheckbox, this.header.firstChild);\r\n      }\r\n    }\r\n\r\n  },\r\n  preBuild: function() {\r\n\r\n  },\r\n  build: function() {\r\n\r\n  },\r\n  postBuild: function() {\r\n    this.setupWatchListeners();\r\n    this.addLinks();\r\n    this.setValue(this.getDefault(), true);\r\n    this.updateHeaderText();\r\n    this.register();\r\n    this.onWatchedFieldChange();\r\n  },\r\n  setupWatchListeners: function() {\r\n    var self = this;\r\n\r\n    // Watched fields\r\n    this.watched = {};\r\n    if(this.schema.vars) this.schema.watch = this.schema.vars;\r\n    this.watched_values = {};\r\n    this.watch_listener = function() {\r\n      if(self.refreshWatchedFieldValues()) {\r\n        self.onWatchedFieldChange();\r\n      }\r\n    };\r\n\r\n    if(this.schema.hasOwnProperty('watch')) {\r\n      var path,path_parts,first,root,adjusted_path;\r\n\r\n      for(var name in this.schema.watch) {\r\n        if(!this.schema.watch.hasOwnProperty(name)) continue;\r\n        path = this.schema.watch[name];\r\n\r\n        if(Array.isArray(path)) {\r\n          if(path.length<2) continue;\r\n          path_parts = [path[0]].concat(path[1].split('.'));\r\n        }\r\n        else {\r\n          path_parts = path.split('.');\r\n          if(!self.theme.closest(self.container,'[data-schemaid=\"'+path_parts[0]+'\"]')) path_parts.unshift('#');\r\n        }\r\n        first = path_parts.shift();\r\n\r\n        if(first === '#') first = self.jsoneditor.schema.id || 'root';\r\n\r\n        // Find the root node for this template variable\r\n        root = self.theme.closest(self.container,'[data-schemaid=\"'+first+'\"]');\r\n        if(!root) throw \"Could not find ancestor node with id \"+first;\r\n\r\n        // Keep track of the root node and path for use when rendering the template\r\n        adjusted_path = root.getAttribute('data-schemapath') + '.' + path_parts.join('.');\r\n\r\n        self.jsoneditor.watch(adjusted_path,self.watch_listener);\r\n\r\n        self.watched[name] = adjusted_path;\r\n      }\r\n    }\r\n\r\n    // Dynamic header\r\n    if(this.schema.headerTemplate) {\r\n      this.header_template = this.jsoneditor.compileTemplate(this.schema.headerTemplate, this.template_engine);\r\n    }\r\n  },\r\n\r\n  addLinks: function() {\r\n    // Add links\r\n    if(!this.no_link_holder) {\r\n      this.link_holder = this.theme.getLinksHolder();\r\n      this.container.appendChild(this.link_holder);\r\n      if(this.schema.links) {\r\n        for(var i=0; i<this.schema.links.length; i++) {\r\n          this.addLink(this.getLink(this.schema.links[i]));\r\n        }\r\n      }\r\n    }\r\n  },\r\n  onMove: function() {},\r\n  getButton: function(text, icon, title) {\r\n    var btnClass = 'json-editor-btn-'+icon;\r\n    if(!this.iconlib) icon = null;\r\n    else icon = this.iconlib.getIcon(icon);\r\n\r\n    if(!icon && title) {\r\n      text = title;\r\n      title = null;\r\n    }\r\n\r\n    var btn = this.theme.getButton(text, icon, title);\r\n    btn.classList.add(btnClass);\r\n    return btn;\r\n  },\r\n  setButtonText: function(button, text, icon, title) {\r\n    if(!this.iconlib) icon = null;\r\n    else icon = this.iconlib.getIcon(icon);\r\n\r\n    if(!icon && title) {\r\n      text = title;\r\n      title = null;\r\n    }\r\n\r\n    return this.theme.setButtonText(button, text, icon, title);\r\n  },\r\n  addLink: function(link) {\r\n    if(this.link_holder) this.link_holder.appendChild(link);\r\n  },\r\n  getLink: function(data) {\r\n    var holder, link;\r\n\r\n    // Get mime type of the link\r\n    var mime = data.mediaType || 'application/javascript';\r\n    var type = mime.split('/')[0];\r\n\r\n    // Template to generate the link href\r\n    var href = this.jsoneditor.compileTemplate(data.href,this.template_engine);\r\n    var relTemplate = this.jsoneditor.compileTemplate(data.rel ? data.rel : data.href,this.template_engine);\r\n\r\n    // Template to generate the link's download attribute\r\n    var download = null;\r\n    if(data.download) download = data.download;\r\n\r\n    if(download && download !== true) {\r\n      download = this.jsoneditor.compileTemplate(download, this.template_engine);\r\n    }\r\n\r\n    // Image links\r\n    if(type === 'image') {\r\n      holder = this.theme.getBlockLinkHolder();\r\n      link = document.createElement('a');\r\n      link.setAttribute('target','_blank');\r\n      var image = document.createElement('img');\r\n\r\n      this.theme.createImageLink(holder,link,image);\r\n\r\n      // When a watched field changes, update the url\r\n      this.link_watchers.push(function(vars) {\r\n        var url = href(vars);\r\n        var rel = relTemplate(vars);\r\n        link.setAttribute('href',url);\r\n        link.setAttribute('title',rel || url);\r\n        image.setAttribute('src',url);\r\n      });\r\n    }\r\n    // Audio/Video links\r\n    else if(['audio','video'].indexOf(type) >=0) {\r\n      holder = this.theme.getBlockLinkHolder();\r\n\r\n      link = this.theme.getBlockLink();\r\n      link.setAttribute('target','_blank');\r\n\r\n      var media = document.createElement(type);\r\n      media.setAttribute('controls','controls');\r\n\r\n      this.theme.createMediaLink(holder,link,media);\r\n\r\n      // When a watched field changes, update the url\r\n      this.link_watchers.push(function(vars) {\r\n        var url = href(vars);\r\n        var rel = relTemplate(vars);\r\n        link.setAttribute('href',url);\r\n        link.textContent = rel || url;\r\n        media.setAttribute('src',url);\r\n      });\r\n    }\r\n    // Text links\r\n    else {\r\n      link = holder = this.theme.getBlockLink();\r\n      holder.setAttribute('target','_blank');\r\n      holder.textContent = data.rel;\r\n\r\n      // When a watched field changes, update the url\r\n      this.link_watchers.push(function(vars) {\r\n        var url = href(vars);\r\n        var rel = relTemplate(vars);\r\n        holder.setAttribute('href',url);\r\n        holder.textContent = rel || url;\r\n      });\r\n    }\r\n\r\n    if(download && link) {\r\n      if(download === true) {\r\n        link.setAttribute('download','');\r\n      }\r\n      else {\r\n        this.link_watchers.push(function(vars) {\r\n          link.setAttribute('download',download(vars));\r\n        });\r\n      }\r\n    }\r\n\r\n    if(data.class) link.classList.add(data.class);\r\n\r\n    return holder;\r\n  },\r\n  refreshWatchedFieldValues: function() {\r\n    if(!this.watched_values) return;\r\n    var watched = {};\r\n    var changed = false;\r\n    var self = this;\r\n\r\n    if(this.watched) {\r\n      var val,editor;\r\n      for(var name in this.watched) {\r\n        if(!this.watched.hasOwnProperty(name)) continue;\r\n        editor = self.jsoneditor.getEditor(this.watched[name]);\r\n        val = editor? editor.getValue() : null;\r\n        if(self.watched_values[name] !== val) changed = true;\r\n        watched[name] = val;\r\n      }\r\n    }\r\n\r\n    watched.self = this.getValue();\r\n    if(this.watched_values.self !== watched.self) changed = true;\r\n\r\n    this.watched_values = watched;\r\n\r\n    return changed;\r\n  },\r\n  getWatchedFieldValues: function() {\r\n    return this.watched_values;\r\n  },\r\n  updateHeaderText: function() {\r\n    if(this.header) {\r\n      var header_text = this.getHeaderText();\r\n      // If the header has children, only update the text node's value\r\n      if(this.header.children.length) {\r\n        for(var i=0; i<this.header.childNodes.length; i++) {\r\n          if(this.header.childNodes[i].nodeType===3) {\r\n            this.header.childNodes[i].nodeValue = this.cleanText(header_text);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      // Otherwise, just update the entire node\r\n      else {\r\n        if (window.DOMPurify) this.header.innerHTML = window.DOMPurify.sanitize(header_text);\r\n        else this.header.textContent = this.cleanText(header_text);\r\n      }\r\n    }\r\n  },\r\n  getHeaderText: function(title_only) {\r\n    if(this.header_text) return this.header_text;\r\n    else if(title_only) return this.schema.title;\r\n    else return this.getTitle();\r\n  },\r\n  cleanText: function(txt) {\r\n    // Clean out HTML tags from txt\r\n    var tmp = document.createElement('div');\r\n    tmp.innerHTML = txt;\r\n    return (tmp.textContent || tmp.innerText);\r\n  },\r\n  onWatchedFieldChange: function() {\r\n    var vars;\r\n    if(this.header_template) {\r\n      vars = $extend(this.getWatchedFieldValues(),{\r\n        key: this.key,\r\n        i: this.key,\r\n        i0: (this.key*1),\r\n        i1: (this.key*1+1),\r\n        title: this.getTitle()\r\n      });\r\n      var header_text = this.header_template(vars);\r\n\r\n      if(header_text !== this.header_text) {\r\n        this.header_text = header_text;\r\n        this.updateHeaderText();\r\n        this.notify();\r\n        //this.fireChangeHeaderEvent();\r\n      }\r\n    }\r\n    if(this.link_watchers.length) {\r\n      vars = this.getWatchedFieldValues();\r\n      for(var i=0; i<this.link_watchers.length; i++) {\r\n        this.link_watchers[i](vars);\r\n      }\r\n    }\r\n  },\r\n  setValue: function(value) {\r\n    this.value = value;\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    return this.value;\r\n  },\r\n  refreshValue: function() {\r\n\r\n  },\r\n  getChildEditors: function() {\r\n    return false;\r\n  },\r\n  destroy: function() {\r\n    var self = this;\r\n    this.unregister(this);\r\n    $each(this.watched,function(name,adjusted_path) {\r\n      self.jsoneditor.unwatch(adjusted_path,self.watch_listener);\r\n    });\r\n    this.watched = null;\r\n    this.watched_values = null;\r\n    this.watch_listener = null;\r\n    this.header_text = null;\r\n    this.header_template = null;\r\n    this.value = null;\r\n    if(this.container && this.container.parentNode) this.container.parentNode.removeChild(this.container);\r\n    this.container = null;\r\n    this.jsoneditor = null;\r\n    this.schema = null;\r\n    this.path = null;\r\n    this.key = null;\r\n    this.parent = null;\r\n  },\r\n  getDefault: function() {\r\n    if (typeof this.schema[\"default\"] !== 'undefined') {\r\n      return this.schema[\"default\"];\r\n    }\r\n\r\n    if (typeof this.schema[\"enum\"] !== 'undefined') {\r\n      return this.schema[\"enum\"][0];\r\n    }\r\n\r\n    var type = this.schema.type || this.schema.oneOf;\r\n    if(type && Array.isArray(type)) type = type[0];\r\n    if(type && typeof type === \"object\") type = type.type;\r\n    if(type && Array.isArray(type)) type = type[0];\r\n\r\n    if(typeof type === \"string\") {\r\n      if(type === \"number\") return 0.0;\r\n      if(type === \"boolean\") return false;\r\n      if(type === \"integer\") return 0;\r\n      if(type === \"string\") return \"\";\r\n      if(type === \"object\") return {};\r\n      if(type === \"array\") return [];\r\n    }\r\n\r\n    return null;\r\n  },\r\n  getTitle: function() {\r\n    return this.schema.title || this.key;\r\n  },\r\n  enable: function() {\r\n    this.disabled = false;\r\n  },\r\n  disable: function() {\r\n    this.disabled = true;\r\n  },\r\n  isEnabled: function() {\r\n    return !this.disabled;\r\n  },\r\n  isRequired: function() {\r\n    if(typeof this.schema.required === \"boolean\") return this.schema.required;\r\n    else if(this.parent && this.parent.schema && Array.isArray(this.parent.schema.required)) return this.parent.schema.required.indexOf(this.key) > -1;\r\n    else if(this.jsoneditor.options.required_by_default) return true;\r\n    else return false;\r\n  },\r\n  getDisplayText: function(arr) {\r\n    var disp = [];\r\n    var used = {};\r\n\r\n    // Determine how many times each attribute name is used.\r\n    // This helps us pick the most distinct display text for the schemas.\r\n    $each(arr,function(i,el) {\r\n      if(el.title) {\r\n        used[el.title] = used[el.title] || 0;\r\n        used[el.title]++;\r\n      }\r\n      if(el.description) {\r\n        used[el.description] = used[el.description] || 0;\r\n        used[el.description]++;\r\n      }\r\n      if(el.format) {\r\n        used[el.format] = used[el.format] || 0;\r\n        used[el.format]++;\r\n      }\r\n      if(el.type) {\r\n        used[el.type] = used[el.type] || 0;\r\n        used[el.type]++;\r\n      }\r\n    });\r\n\r\n    // Determine display text for each element of the array\r\n    $each(arr,function(i,el)  {\r\n      var name;\r\n\r\n      // If it's a simple string\r\n      if(typeof el === \"string\") name = el;\r\n      // Object\r\n      else if(el.title && used[el.title]<=1) name = el.title;\r\n      else if(el.format && used[el.format]<=1) name = el.format;\r\n      else if(el.type && used[el.type]<=1) name = el.type;\r\n      else if(el.description && used[el.description]<=1) name = el.descripton;\r\n      else if(el.title) name = el.title;\r\n      else if(el.format) name = el.format;\r\n      else if(el.type) name = el.type;\r\n      else if(el.description) name = el.description;\r\n      else if(JSON.stringify(el).length < 500) name = JSON.stringify(el);\r\n      else name = \"type\";\r\n\r\n      disp.push(name);\r\n    });\r\n\r\n    // Replace identical display text with \"text 1\", \"text 2\", etc.\r\n    var inc = {};\r\n    $each(disp,function(i,name) {\r\n      inc[name] = inc[name] || 0;\r\n      inc[name]++;\r\n\r\n      if(used[name] > 1) disp[i] = name + \" \" + inc[name];\r\n    });\r\n\r\n    return disp;\r\n  },\r\n\r\n  // Replace space(s) with \"-\" to create valid id value\r\n  getValidId: function(id) {\r\n    id = id === undefined ? \"\" : id.toString();\r\n    return id.replace(/\\s+/g, \"-\");\r\n  },\r\n  setInputAttributes: function(inputAttribute) {\r\n    if (this.schema.options && this.schema.options.inputAttributes) {\r\n      var inputAttributes = this.schema.options.inputAttributes;\r\n      var protectedAttributes = ['name', 'type'].concat(inputAttribute);\r\n      for (var key in inputAttributes) {\r\n        if (inputAttributes.hasOwnProperty(key) && protectedAttributes.indexOf(key.toLowerCase()) == -1) {\r\n          this.input.setAttribute(key, inputAttributes[key]);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  getOption: function(key) {\r\n    try {\r\n      throw \"getOption is deprecated\";\r\n    }\r\n    catch(e) {\r\n      window.console.error(e);\r\n    }\r\n\r\n    return this.options[key];\r\n  },\r\n  showValidationErrors: function(errors) {\r\n\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors[\"null\"] = JSONEditor.AbstractEditor.extend({\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    return null;\r\n  },\r\n  setValue: function() {\r\n    this.onChange();\r\n  },\r\n  getNumColumns: function() {\r\n    return 2;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.string = JSONEditor.AbstractEditor.extend({\r\n  register: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.setAttribute('name',this.formname);\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  setValue: function(value,initial,from_template) {\r\n    var self = this;\r\n    \r\n    if(this.template && !from_template) {\r\n      return;\r\n    }\r\n    \r\n    if(value === null || typeof value === 'undefined') value = \"\";\r\n    else if(typeof value === \"object\") value = JSON.stringify(value);\r\n    else if(typeof value !== \"string\") value = \"\"+value;\r\n    \r\n    if(value === this.serialized) return;\r\n\r\n    // Sanitize value before setting it\r\n    var sanitized = this.sanitize(value);\r\n\r\n    if(this.input.value === sanitized) {\r\n      return;\r\n    }\r\n\r\n    this.input.value = sanitized;\r\n    \r\n    // If using SCEditor, update the WYSIWYG\r\n    if(this.sceditor_instance) {\r\n      this.sceditor_instance.val(sanitized);\r\n    }\r\n    else if(this.SimpleMDE) {\r\n      this.SimpleMDE.value(sanitized);\r\n    }\r\n    else if(this.ace_editor) {\r\n      this.ace_editor.setValue(sanitized);\r\n      this.ace_editor.session.getSelection().clearSelection();\r\n      this.ace_editor.resize();\r\n    }\r\n    \r\n    var changed = from_template || this.getValue() !== value;\r\n    \r\n    this.refreshValue();\r\n    \r\n    if(initial) this.is_dirty = false;\r\n    else if(this.jsoneditor.options.show_errors === \"change\") this.is_dirty = true;\r\n\r\n    if(this.adjust_height) this.adjust_height(this.input);\r\n\r\n    // Bubble this setValue to parents if the value changed\r\n    this.onChange(changed);\r\n  },\r\n  getNumColumns: function() {\r\n    var min = Math.ceil(Math.max(this.getTitle().length,this.schema.maxLength||0,this.schema.minLength||0)/5);\r\n    var num;\r\n    \r\n    if(this.input_type === 'textarea') num = 6;\r\n    else if(['text','email'].indexOf(this.input_type) >= 0) num = 4;\r\n    else num = 2;\r\n    \r\n    return Math.min(12,Math.max(min,num));\r\n  },\r\n  build: function() {\r\n    var self = this, i;\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n\r\n    this.format = this.schema.format;\r\n    if(!this.format && this.schema.media && this.schema.media.type) {\r\n      this.format = this.schema.media.type.replace(/(^(application|text)\\/(x-)?(script\\.)?)|(-source$)/g,'');\r\n    }\r\n    if(!this.format && this.options.default_format) {\r\n      this.format = this.options.default_format;\r\n    }\r\n    if(this.options.format) {\r\n      this.format = this.options.format;\r\n    }\r\n\r\n    // Specific format\r\n    if(this.format) {\r\n      // Text Area\r\n      if(this.format === 'textarea') {\r\n        this.input_type = 'textarea';\r\n        this.input = this.theme.getTextareaInput();\r\n      }\r\n      // Range Input\r\n      else if(this.format === 'range') {\r\n        this.input_type = 'range';\r\n        var min = this.schema.minimum || 0;\r\n        var max = this.schema.maximum || Math.max(100,min+1);\r\n        var step = 1;\r\n        if(this.schema.multipleOf) {\r\n          if(min%this.schema.multipleOf) min = Math.ceil(min/this.schema.multipleOf)*this.schema.multipleOf;\r\n          if(max%this.schema.multipleOf) max = Math.floor(max/this.schema.multipleOf)*this.schema.multipleOf;\r\n          step = this.schema.multipleOf;\r\n        }\r\n\r\n        this.input = this.theme.getRangeInput(min,max,step);\r\n      }\r\n      // Source Code\r\n      else if([\r\n          'actionscript',\r\n          'batchfile',\r\n          'bbcode',\r\n          'c',\r\n          'c++',\r\n          'cpp',\r\n          'coffee',\r\n          'csharp',\r\n          'css',\r\n          'dart',\r\n          'django',\r\n          'ejs',\r\n          'erlang',\r\n          'golang',\r\n          'groovy',\r\n          'handlebars',\r\n          'haskell',\r\n          'haxe',\r\n          'html',\r\n          'ini',\r\n          'jade',\r\n          'java',\r\n          'javascript',\r\n          'json',\r\n          'less',\r\n          'lisp',\r\n          'lua',\r\n          'makefile',\r\n          'markdown',\r\n          'matlab',\r\n          'mysql',\r\n          'objectivec',\r\n          'pascal',\r\n          'perl',\r\n          'pgsql',\r\n          'php',\r\n          'python',\r\n          'r',\r\n          'ruby',\r\n          'sass',\r\n          'scala',\r\n          'scss',\r\n          'smarty',\r\n          'sql',\r\n          'sqlserver',\r\n          'stylus',\r\n          'svg',\r\n          'twig',\r\n          'vbscript',\r\n          'xml',\r\n          'yaml'\r\n        ].indexOf(this.format) >= 0\r\n      ) {\r\n        this.input_type = this.format;\r\n        this.source_code = true;\r\n        \r\n        this.input = this.theme.getTextareaInput();\r\n      }\r\n      // HTML5 Input type\r\n      else {\r\n        this.input_type = this.format;\r\n        this.input = this.theme.getFormInputField(this.input_type);\r\n      }\r\n    }\r\n    // Normal text input\r\n    else {\r\n      this.input_type = 'text';\r\n      this.input = this.theme.getFormInputField(this.input_type);\r\n    }\r\n    \r\n    // minLength, maxLength, and pattern\r\n    if(typeof this.schema.maxLength !== \"undefined\") this.input.setAttribute('maxlength',this.schema.maxLength);\r\n    if(typeof this.schema.pattern !== \"undefined\") this.input.setAttribute('pattern',this.schema.pattern);\r\n    else if(typeof this.schema.minLength !== \"undefined\") this.input.setAttribute('pattern','.{'+this.schema.minLength+',}');\r\n\r\n    if(this.options.compact) {\r\n      this.container.classList.add('compact');\r\n    }\r\n    else {\r\n      if(this.options.input_width) this.input.style.width = this.options.input_width;\r\n    }\r\n\r\n    if(this.schema.readOnly || this.schema.readonly || this.schema.template) {\r\n      this.always_disabled = true;\r\n      this.input.setAttribute('readonly', 'true');\r\n    }\r\n\r\n    // Set custom attributes on input element. Parameter is array of protected keys. Empty array if none.\r\n    this.setInputAttributes(['maxlength', 'pattern', 'readonly', 'min', 'max', 'step']);\r\n\r\n    this.input\r\n      .addEventListener('change',function(e) {        \r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        \r\n        // Don't allow changing if this field is a template\r\n        if(self.schema.template) {\r\n          this.value = self.value;\r\n          return;\r\n        }\r\n\r\n        var val = this.value;\r\n        \r\n        // sanitize value\r\n        var sanitized = self.sanitize(val);\r\n        if(val !== sanitized) {\r\n          this.value = sanitized;\r\n        }\r\n        \r\n        self.is_dirty = true;\r\n\r\n        self.refreshValue();\r\n        self.onChange(true);\r\n      });\r\n      \r\n    if(this.options.input_height) this.input.style.height = this.options.input_height;\r\n    if(this.options.expand_height) {\r\n      this.adjust_height = function(el) {\r\n        if(!el) return;\r\n        var i, ch=el.offsetHeight;\r\n        // Input too short\r\n        if(el.offsetHeight < el.scrollHeight) {\r\n          i=0;\r\n          while(el.offsetHeight < el.scrollHeight+3) {\r\n            if(i>100) break;\r\n            i++;\r\n            ch++;\r\n            el.style.height = ch+'px';\r\n          }\r\n        }\r\n        else {\r\n          i=0;\r\n          while(el.offsetHeight >= el.scrollHeight+3) {\r\n            if(i>100) break;\r\n            i++;\r\n            ch--;\r\n            el.style.height = ch+'px';\r\n          }\r\n          el.style.height = (ch+1)+'px';\r\n        }\r\n      };\r\n      \r\n      this.input.addEventListener('keyup',function(e) {\r\n        self.adjust_height(this);\r\n      });\r\n      this.input.addEventListener('change',function(e) {\r\n        self.adjust_height(this);\r\n      });\r\n      this.adjust_height();\r\n    }\r\n\r\n    if(this.format) this.input.setAttribute('data-schemaformat',this.format);\r\n\r\n    this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton);\r\n\r\n    // output element to display the range value when it changes or have default.\r\n    if(this.format === 'range') {\r\n      var output = document.createElement('output');\r\n      output.setAttribute('class', 'range-output');\r\n      this.control.appendChild(output);\r\n      output.value = this.schema.default || Math.max(this.schema.minimum || 0, 0);\r\n      this.input.addEventListener('change', function () {\r\n        output.value = self.input.value;\r\n      });\r\n      this.input.addEventListener('input', function () {\r\n        output.value = self.input.value;\r\n      });\r\n    }\r\n\r\n    this.container.appendChild(this.control);\r\n\r\n    // Any special formatting that needs to happen after the input is added to the dom\r\n    window.requestAnimationFrame(function() {\r\n      // Skip in case the input is only a temporary editor,\r\n      // otherwise, in the case of an ace_editor creation,\r\n      // it will generate an error trying to append it to the missing parentNode\r\n      if(self.input.parentNode) self.afterInputReady();\r\n      if(self.adjust_height) self.adjust_height(self.input);\r\n    });\r\n\r\n    // Compile and store the template\r\n    if(this.schema.template) {\r\n      this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine);\r\n      this.refreshValue();\r\n    }\r\n    else {\r\n      this.refreshValue();\r\n    }\r\n  },\r\n  postBuild: function() {\r\n    this._super();\r\n    // Enable cleave.js support if library is loaded and config is available\r\n    if (window.Cleave && this.schema.options && typeof this.schema.options.cleave == 'object') {\r\n      this.cleave = new window.Cleave(this.input, this.schema.options.cleave);\r\n    }\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      this.input.disabled = false;\r\n      // TODO: WYSIWYG and Markdown editors\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    this.input.disabled = true;\r\n    // TODO: WYSIWYG and Markdown editors\r\n    this._super();\r\n  },\r\n  afterInputReady: function() {\r\n    var self = this, options;\r\n    \r\n    // Code editor\r\n    if(this.source_code) {      \r\n      // WYSIWYG html and bbcode editor\r\n      if(this.options.wysiwyg && \r\n        ['html','bbcode'].indexOf(this.input_type) >= 0 && \r\n        window.jQuery && window.jQuery.fn && window.jQuery.fn.sceditor\r\n      ) {\r\n        options = $extend({},{\r\n          plugins: self.input_type==='html'? 'xhtml' : 'bbcode',\r\n          emoticonsEnabled: false,\r\n          width: '100%',\r\n          height: 300\r\n        },JSONEditor.plugins.sceditor,self.options.sceditor_options||{});\r\n        \r\n        window.jQuery(self.input).sceditor(options);\r\n        \r\n        self.sceditor_instance = window.jQuery(self.input).sceditor('instance');\r\n        \r\n        self.sceditor_instance.blur(function() {\r\n          // Get editor's value\r\n          var val = window.jQuery(\"<div>\"+self.sceditor_instance.val()+\"</div>\");\r\n          // Remove sceditor spans/divs\r\n          window.jQuery('#sceditor-start-marker,#sceditor-end-marker,.sceditor-nlf',val).remove();\r\n          // Set the value and update\r\n          self.input.value = val.html();\r\n          self.value = self.input.value;\r\n          self.is_dirty = true;\r\n          self.onChange(true);\r\n        });\r\n      }\r\n      // SimpleMDE for markdown (if it's loaded)\r\n      else if (this.input_type === 'markdown' && window.SimpleMDE) {\r\n        options = $extend({},JSONEditor.plugins.SimpleMDE,{\r\n          element: this.input\r\n        });\r\n\r\n        this.SimpleMDE = new window.SimpleMDE((options));\r\n\r\n        this.SimpleMDE.codemirror.on(\"change\",function() {\r\n          self.value = self.SimpleMDE.value();\r\n          self.is_dirty = true;\r\n          self.onChange(true);\r\n        });\r\n      }\r\n      // ACE editor for everything else\r\n      else if(window.ace) {\r\n        var mode = this.input_type;\r\n        // aliases for c/cpp\r\n        if(mode === 'cpp' || mode === 'c++' || mode === 'c') {\r\n          mode = 'c_cpp';\r\n        }\r\n        \r\n        this.ace_container = document.createElement('div');\r\n        this.ace_container.style.width = '100%';\r\n        this.ace_container.style.position = 'relative';\r\n        this.ace_container.style.height = '400px';\r\n        this.input.parentNode.insertBefore(this.ace_container,this.input);\r\n        this.input.style.display = 'none';\r\n        this.ace_editor = window.ace.edit(this.ace_container);\r\n        \r\n        var aceOptions = this.schema.options && this.schema.options.ace;\r\n        if (aceOptions) {\r\n          this.ace_editor.setOptions(aceOptions);\r\n        }\r\n\r\n        this.ace_editor.setValue(this.getValue());\r\n        this.ace_editor.session.getSelection().clearSelection();\r\n        this.ace_editor.resize();\r\n\r\n        // The theme\r\n        if(JSONEditor.plugins.ace.theme) this.ace_editor.setTheme('ace/theme/'+JSONEditor.plugins.ace.theme);\r\n        // The mode\r\n        this.ace_editor.getSession().setMode('ace/mode/' + this.schema.format);\r\n\r\n        // Listen for changes\r\n        this.ace_editor.on('change',function() {\r\n          var val = self.ace_editor.getValue();\r\n          self.input.value = val;\r\n          self.refreshValue();\r\n          self.is_dirty = true;\r\n          self.onChange(true);\r\n        });\r\n      }\r\n    }\r\n    \r\n    self.theme.afterInputReady(self.input);\r\n  },\r\n  refreshValue: function() {\r\n    this.value = this.input.value;\r\n    if(typeof this.value !== \"string\") this.value = '';\r\n    this.serialized = this.value;\r\n  },\r\n  destroy: function() {\r\n    // If using SCEditor, destroy the editor instance\r\n    if(this.sceditor_instance) {\r\n      this.sceditor_instance.destroy();\r\n    }\r\n    else if(this.SimpleMDE) {\r\n      this.SimpleMDE.toTextArea();\r\n      this.SimpleMDE = null;\r\n    }\r\n    else if(this.ace_editor) {\r\n      this.ace_editor.destroy();\r\n    }\r\n    if (this.cleave) {\r\n      this.cleave.destroy();\r\n    }\r\n\r\n    this.template = null;\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n\r\n    this._super();\r\n  },\r\n  /**\r\n   * This is overridden in derivative editors\r\n   */\r\n  sanitize: function(value) {\r\n    return value;\r\n  },\r\n  /**\r\n   * Re-calculates the value if needed\r\n   */\r\n  onWatchedFieldChange: function() {    \r\n    var self = this, vars, j;\r\n    \r\n    // If this editor needs to be rendered by a macro template\r\n    if(this.template) {\r\n      vars = this.getWatchedFieldValues();\r\n      this.setValue(this.template(vars),false,true);\r\n    }\r\n    \r\n    this._super();\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    var self = this;\r\n    \r\n    if(this.jsoneditor.options.show_errors === \"always\") {}\r\n    else if(!this.is_dirty && this.previous_error_setting===this.jsoneditor.options.show_errors) return;\r\n    \r\n    this.previous_error_setting = this.jsoneditor.options.show_errors;\r\n\r\n    var messages = [];\r\n    $each(errors,function(i,error) {\r\n      if(error.path === self.path) {\r\n        messages.push(error.message);\r\n      }\r\n    });\r\n\r\n    if(messages.length) {\r\n      this.theme.addInputError(this.input, messages.join('. ')+'.');\r\n    }\r\n    else {\r\n      this.theme.removeInputError(this.input);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Created by Mehmet Baker on 12.04.2017\r\n */\r\nJSONEditor.defaults.editors.hidden = JSONEditor.AbstractEditor.extend({\r\n  register: function () {\r\n    this._super();\r\n    if (!this.input) return;\r\n    this.input.setAttribute('name', this.formname);\r\n  },\r\n  unregister: function () {\r\n    this._super();\r\n    if (!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  setValue: function (value, initial, from_template) {\r\n    var self = this;\r\n\r\n    if(this.template && !from_template) {\r\n      return;\r\n    }\r\n\r\n    if(value === null || typeof value === 'undefined') value = \"\";\r\n    else if(typeof value === \"object\") value = JSON.stringify(value);\r\n    else if(typeof value !== \"string\") value = \"\"+value;\r\n\r\n    if(value === this.serialized) return;\r\n\r\n    // Sanitize value before setting it\r\n    var sanitized = this.sanitize(value);\r\n\r\n    if(this.input.value === sanitized) {\r\n      return;\r\n    }\r\n\r\n    this.input.value = sanitized;\r\n\r\n    var changed = from_template || this.getValue() !== value;\r\n\r\n    this.refreshValue();\r\n\r\n    if(initial) this.is_dirty = false;\r\n    else if(this.jsoneditor.options.show_errors === \"change\") this.is_dirty = true;\r\n\r\n    if(this.adjust_height) this.adjust_height(this.input);\r\n\r\n    // Bubble this setValue to parents if the value changed\r\n    this.onChange(changed);\r\n  },\r\n  getNumColumns: function () {\r\n    return 2;\r\n  },\r\n  enable: function () {\r\n    this._super();\r\n  },\r\n  disable: function () {\r\n    this._super();\r\n  },\r\n  refreshValue: function () {\r\n    this.value = this.input.value;\r\n    if (typeof this.value !== \"string\") this.value = '';\r\n    this.serialized = this.value;\r\n  },\r\n  destroy: function () {\r\n    this.template = null;\r\n    if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n\r\n    this._super();\r\n  },\r\n  /**\r\n   * This is overridden in derivative editors\r\n   */\r\n  sanitize: function (value) {\r\n    return value;\r\n  },\r\n  /**\r\n   * Re-calculates the value if needed\r\n   */\r\n  onWatchedFieldChange: function () {\r\n    var self = this, vars, j;\r\n\r\n    // If this editor needs to be rendered by a macro template\r\n    if (this.template) {\r\n      vars = this.getWatchedFieldValues();\r\n      this.setValue(this.template(vars), false, true);\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  build: function () {\r\n    var self = this;\r\n\r\n    this.format = this.schema.format;\r\n    if (!this.format && this.options.default_format) {\r\n      this.format = this.options.default_format;\r\n    }\r\n    if (this.options.format) {\r\n      this.format = this.options.format;\r\n    }\r\n\r\n    this.input_type = 'hidden';\r\n    this.input = this.theme.getFormInputField(this.input_type);\r\n\r\n    if (this.format) this.input.setAttribute('data-schemaformat', this.format);\r\n\r\n    this.container.appendChild(this.input);\r\n\r\n    // Compile and store the template\r\n    if (this.schema.template) {\r\n      this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine);\r\n      this.refreshValue();\r\n    }\r\n    else {\r\n      this.refreshValue();\r\n    }\r\n  }\r\n});\r\nJSONEditor.defaults.editors.number = JSONEditor.defaults.editors.string.extend({\r\n  build: function() {\r\n    this._super();\r\n\r\n    if (typeof this.schema.minimum !== \"undefined\") {\r\n      var minimum = this.schema.minimum;\r\n\r\n      if (typeof this.schema.exclusiveMinimum !== \"undefined\") {\r\n        minimum += 1;\r\n      }\r\n\r\n      this.input.setAttribute(\"min\", minimum);\r\n    }\r\n\r\n    if (typeof this.schema.maximum !== \"undefined\") {\r\n      var maximum = this.schema.maximum;\r\n\r\n      if (typeof this.schema.exclusiveMaximum !== \"undefined\") {\r\n        maximum -= 1;\r\n      }\r\n\r\n      this.input.setAttribute(\"max\", maximum);\r\n    }\r\n\r\n    if (typeof this.schema.step !== \"undefined\") {\r\n      var step = this.schema.step || 1;\r\n      this.input.setAttribute(\"step\", step);\r\n    }\r\n\r\n    // Set custom attributes on input element. Parameter is array of protected keys. Empty array if none.\r\n    this.setInputAttributes(['maxlength', 'pattern', 'readonly', 'min', 'max', 'step']);\r\n\r\n  },\r\n  sanitize: function(value) {\r\n    return (value+\"\").replace(/[^0-9\\.\\-eE]/g,'');\r\n  },\r\n  getNumColumns: function() {\r\n    return 2;\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    if(this.value*1 !== this.value*1){\r\n      //NaN is not equal to itself\r\n      this.value = this.getDefault();\r\n    }\r\n    return this.value===''?undefined:this.value*1;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.integer = JSONEditor.defaults.editors.number.extend({\r\n  sanitize: function(value) {\r\n    value = value + \"\";\r\n    return value.replace(/[^0-9\\-]/g,'');\r\n  },\r\n  getNumColumns: function() {\r\n    return 2;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.rating = JSONEditor.defaults.editors.integer.extend({\r\n  build: function() {\r\n    var self = this, i;\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n\r\n    // Dynamically add the required CSS the first time this editor is used\r\n    var styleId = 'json-editor-style-rating';\r\n    var styles = document.getElementById(styleId);\r\n    if (!styles) {\r\n      var style = document.createElement('style');\r\n      style.id = styleId;\r\n      style.type = 'text/css';\r\n      style.innerHTML =\r\n        '      .rating-container {' +\r\n        '        display: inline-block;' +\r\n        '        clear: both;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating {' +\r\n        '        float:left;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      /* :not(:checked) is a filter, so that browsers that donât support :checked donât' +\r\n        '         follow these rules. Every browser that supports :checked also supports :not(), so' +\r\n        '         it doesnât make the test unnecessarily selective */' +\r\n        '      .rating:not(:checked) > input {' +\r\n        '        position:absolute;' +\r\n        '        top:-9999px;' +\r\n        '        clip:rect(0,0,0,0);' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating:not(:checked) > label {' +\r\n        '        float:right;' +\r\n        '        width:1em;' +\r\n        '        padding:0 .1em;' +\r\n        '        overflow:hidden;' +\r\n        '        white-space:nowrap;' +\r\n        '        cursor:pointer;' +\r\n        '        color:#ddd;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating:not(:checked) > label:before {' +\r\n        '        content: \\'â \\';' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating > input:checked ~ label {' +\r\n        '        color: #FFB200;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating:not([readOnly]):not(:checked) > label:hover,' +\r\n        '      .rating:not([readOnly]):not(:checked) > label:hover ~ label {' +\r\n        '        color: #FFDA00;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating:not([readOnly]) > input:checked + label:hover,' +\r\n        '      .rating:not([readOnly]) > input:checked + label:hover ~ label,' +\r\n        '      .rating:not([readOnly]) > input:checked ~ label:hover,' +\r\n        '      .rating:not([readOnly]) > input:checked ~ label:hover ~ label,' +\r\n        '      .rating:not([readOnly]) > label:hover ~ input:checked ~ label {' +\r\n        '        color: #FF8C0D;' +\r\n        '      }' +\r\n        '      ' +\r\n        '      .rating:not([readOnly])  > label:active {' +\r\n        '        position:relative;' +\r\n        '        top:2px;' +\r\n        '        left:2px;' +\r\n        '      }';\r\n      document.getElementsByTagName('head')[0].appendChild(style);\r\n    }\r\n\r\n    this.input = this.theme.getFormInputField('hidden');\r\n    this.container.appendChild(this.input);\r\n\r\n    // Required to keep height\r\n    var ratingContainer = document.createElement('div');\r\n    ratingContainer.classList.add('rating-container');\r\n\r\n    // Contains options for rating\r\n    var group = document.createElement('div');\r\n    group.setAttribute('name', this.formname);\r\n    group.classList.add('rating');\r\n    ratingContainer.appendChild(group);\r\n\r\n    if(this.options.compact) this.container.setAttribute('class',this.container.getAttribute('class')+' compact');\r\n\r\n    var max = this.schema.maximum ? this.schema.maximum : 5;\r\n    if (this.schema.exclusiveMaximum) max--;\r\n\r\n    this.inputs = [];\r\n    for(i=max; i>0; i--) {\r\n      var id = this.formname + i;\r\n      var radioInput = this.theme.getFormInputField('radio');\r\n      radioInput.setAttribute('id', id);\r\n      radioInput.setAttribute('value', i);\r\n      radioInput.setAttribute('name', this.formname);\r\n      group.appendChild(radioInput);\r\n      this.inputs.push(radioInput);\r\n\r\n      var label = document.createElement('label');\r\n      label.setAttribute('for', id);\r\n      label.appendChild(document.createTextNode(i + (i == 1 ? ' star' : ' stars')));\r\n      group.appendChild(label);\r\n    }\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      $each(this.inputs,function(i,input) {\r\n        group.setAttribute(\"readOnly\", \"readOnly\");\r\n        input.disabled = true;\r\n      });\r\n    }\r\n\r\n    ratingContainer\r\n      .addEventListener('change',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        self.input.value = e.srcElement.value;\r\n\r\n        self.is_dirty = true;\r\n\r\n        self.refreshValue();\r\n        self.watch_listener();\r\n        self.jsoneditor.notifyWatchers(self.path);\r\n        if(self.parent) self.parent.onChildEditorChange(self);\r\n        else self.jsoneditor.onChange();\r\n      });\r\n\r\n    this.control = this.theme.getFormControl(this.label, ratingContainer, this.description);\r\n    this.container.appendChild(this.control);\r\n\r\n    this.refreshValue();\r\n  },\r\n  setValue: function(val) {\r\n    var sanitized = this.sanitize(val);\r\n    if(this.value === sanitized) {\r\n      return;\r\n    }\r\n    var self = this;\r\n    $each(this.inputs,function(i,input) {\r\n      if (input.value === sanitized) {\r\n        input.checked = true;\r\n        self.value = sanitized;\r\n        self.input.value = self.value;\r\n        self.watch_listener();\r\n        self.jsoneditor.notifyWatchers(self.path);\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.object = JSONEditor.AbstractEditor.extend({\r\n  getDefault: function() {\r\n    return $extend({},this.schema[\"default\"] || {});\r\n  },\r\n  getChildEditors: function() {\r\n    return this.editors;\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(this.editors) {\r\n      for(var i in this.editors) {\r\n        if(!this.editors.hasOwnProperty(i)) continue;\r\n        this.editors[i].register();\r\n      }\r\n    }\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(this.editors) {\r\n      for(var i in this.editors) {\r\n        if(!this.editors.hasOwnProperty(i)) continue;\r\n        this.editors[i].unregister();\r\n      }\r\n    }\r\n  },\r\n  getNumColumns: function() {\r\n    return Math.max(Math.min(12,this.maxwidth),3);\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.editjson_button) this.editjson_button.disabled = false;\r\n      if(this.addproperty_button) this.addproperty_button.disabled = false;\r\n\r\n      this._super();\r\n      if(this.editors) {\r\n        for(var i in this.editors) {\r\n          if(!this.editors.hasOwnProperty(i)) continue;\r\n          this.editors[i].enable();\r\n          this.editors[i].optInCheckbox.disabled = false;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.editjson_button) this.editjson_button.disabled = true;\r\n    if(this.addproperty_button) this.addproperty_button.disabled = true;\r\n    this.hideEditJSON();\r\n\r\n    this._super();\r\n    if(this.editors) {\r\n      for(var i in this.editors) {\r\n        if(!this.editors.hasOwnProperty(i)) continue;\r\n        this.editors[i].disable(always_disabled);\r\n        this.editors[i].optInCheckbox.disabled = true;\r\n      }\r\n    }\r\n  },\r\n  layoutEditors: function() {\r\n    var self = this, i, j;\r\n\r\n    if(!this.row_container) return;\r\n\r\n    // Sort editors by propertyOrder\r\n    this.property_order = Object.keys(this.editors);\r\n    this.property_order = this.property_order.sort(function(a,b) {\r\n      var ordera = self.editors[a].schema.propertyOrder;\r\n      var orderb = self.editors[b].schema.propertyOrder;\r\n      if(typeof ordera !== \"number\") ordera = 1000;\r\n      if(typeof orderb !== \"number\") orderb = 1000;\r\n\r\n      return ordera - orderb;\r\n    });\r\n\r\n    var container;\r\n    var isCategoriesFormat = (this.format === 'categories');\r\n    var rows = [];\r\n    var key = null;\r\n    var editor = null;\r\n    var row;\r\n\r\n    if(this.format === 'grid-strict') {\r\n      var rowIndex = 0;\r\n      row = [];\r\n\r\n      $each(this.property_order, function(j,key) {\r\n        var editor = self.editors[key];\r\n        if (editor.property_removed) {\r\n          return;\r\n        }\r\n        var width = editor.options.hidden ? 0 : (editor.options.grid_columns || editor.getNumColumns());\r\n        var offset = editor.options.hidden ? 0 : (editor.options.grid_offset || 0);\r\n        var gridBreak = editor.options.hidden ? false : (editor.options.grid_break || false);\r\n        var height = editor.options.hidden ? 0 : editor.container.offsetHeight;\r\n\r\n        var column = {\r\n          key: key,\r\n          width: width,\r\n          offset: offset,\r\n          height: height\r\n        };\r\n\r\n        row.push(column);\r\n\r\n        rows[rowIndex] = row;\r\n\r\n        if (gridBreak) {\r\n          rowIndex++;\r\n          row = [];\r\n        }\r\n      });\r\n\r\n      // layout hasn't changed\r\n      if (this.layout === JSON.stringify(rows)) return false;\r\n      this.layout = JSON.stringify(rows);\r\n\r\n      // Layout the form\r\n      container = document.createElement('div');\r\n      for (i = 0; i < rows.length; i++) {\r\n        row = this.theme.getGridRow();\r\n        container.appendChild(row);\r\n        for (j = 0; j < rows[i].length; j++) {\r\n          key = rows[i][j].key;\r\n          editor = this.editors[key];\r\n          if (editor.options.hidden) {\r\n            editor.container.style.display = 'none';\r\n          } else {\r\n            this.theme.setGridColumnSize(editor.container, rows[i][j].width, rows[i][j].offset);\r\n          }\r\n          row.appendChild(editor.container);\r\n        }\r\n      }\r\n    } else if(this.format === 'grid') {\r\n      $each(this.property_order, function(j,key) {\r\n        var editor = self.editors[key];\r\n        if(editor.property_removed) return;\r\n        var found = false;\r\n        var width = editor.options.hidden? 0 : (editor.options.grid_columns || editor.getNumColumns());\r\n        var height = editor.options.hidden? 0 : editor.container.offsetHeight;\r\n        // See if the editor will fit in any of the existing rows first\r\n        for(var i=0; i<rows.length; i++) {\r\n          // If the editor will fit in the row horizontally\r\n          if(rows[i].width + width <= 12) {\r\n            // If the editor is close to the other elements in height\r\n            // i.e. Don't put a really tall editor in an otherwise short row or vice versa\r\n            if(!height || (rows[i].minh*0.5 < height && rows[i].maxh*2 > height)) {\r\n              found = i;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If there isn't a spot in any of the existing rows, start a new row\r\n        if(found === false) {\r\n          rows.push({\r\n            width: 0,\r\n            minh: 999999,\r\n            maxh: 0,\r\n            editors: []\r\n          });\r\n          found = rows.length-1;\r\n        }\r\n\r\n        rows[found].editors.push({\r\n          key: key,\r\n          //editor: editor,\r\n          width: width,\r\n          height: height\r\n        });\r\n        rows[found].width += width;\r\n        rows[found].minh = Math.min(rows[found].minh,height);\r\n        rows[found].maxh = Math.max(rows[found].maxh,height);\r\n      });\r\n\r\n      // Make almost full rows width 12\r\n      // Do this by increasing all editors' sizes proprotionately\r\n      // Any left over space goes to the biggest editor\r\n      // Don't touch rows with a width of 6 or less\r\n      for(i=0; i<rows.length; i++) {\r\n        if(rows[i].width < 12) {\r\n          var biggest = false;\r\n          var new_width = 0;\r\n          for(j=0; j<rows[i].editors.length; j++) {\r\n            if(biggest === false) biggest = j;\r\n            else if(rows[i].editors[j].width > rows[i].editors[biggest].width) biggest = j;\r\n            rows[i].editors[j].width *= 12/rows[i].width;\r\n            rows[i].editors[j].width = Math.floor(rows[i].editors[j].width);\r\n            new_width += rows[i].editors[j].width;\r\n          }\r\n          if(new_width < 12) rows[i].editors[biggest].width += 12-new_width;\r\n          rows[i].width = 12;\r\n        }\r\n      }\r\n\r\n      // layout hasn't changed\r\n      if(this.layout === JSON.stringify(rows)) return false;\r\n      this.layout = JSON.stringify(rows);\r\n\r\n      // Layout the form\r\n      container = document.createElement('div');\r\n      for(i=0; i<rows.length; i++) {\r\n        row = this.theme.getGridRow();\r\n        container.appendChild(row);\r\n        for(j=0; j<rows[i].editors.length; j++) {\r\n          key = rows[i].editors[j].key;\r\n          editor = this.editors[key];\r\n\r\n          if(editor.options.hidden) editor.container.style.display = 'none';\r\n          else this.theme.setGridColumnSize(editor.container,rows[i].editors[j].width);\r\n          row.appendChild(editor.container);\r\n        }\r\n      }\r\n    }\r\n    // Normal layout\r\n    else {\r\n      container = document.createElement('div');\r\n\r\n      if(isCategoriesFormat) {\r\n        //A container for properties not object nor arrays\r\n        var containerSimple = document.createElement('div');\r\n        //This will be the place to (re)build tabs and panes\r\n        //tabs_holder has 2 childs, [0]: ul.nav.nav-tabs and [1]: div.tab-content\r\n        var newTabs_holder = this.theme.getTopTabHolder(this.schema.title);\r\n        //child [1] of previous, stores panes\r\n        var newTabPanesContainer = this.theme.getTopTabContentHolder(newTabs_holder);\r\n\r\n        $each(this.property_order, function(i,key){\r\n          var editor = self.editors[key];\r\n          if(editor.property_removed) return;\r\n          var aPane = self.theme.getTabContent();\r\n          var isObjOrArray = editor.schema && (editor.schema.type === \"object\" || editor.schema.type === \"array\");\r\n          //mark the pane\r\n          aPane.isObjOrArray = isObjOrArray;\r\n          var gridRow = self.theme.getGridRow();\r\n\r\n          //this happens with added properties, they don't have a tab\r\n          if(!editor.tab){\r\n            //Pass the pane which holds the editor\r\n            if(typeof self.basicPane === 'undefined'){\r\n              //There is no basicPane yet, so aPane will be it\r\n              self.addRow(editor,newTabs_holder, aPane);\r\n            }\r\n            else {\r\n              self.addRow(editor,newTabs_holder, self.basicPane);\r\n            }\r\n          }\r\n\r\n          aPane.id = self.getValidId(editor.tab_text.textContent);\r\n\r\n          //For simple properties, add them on the same panel (Basic)\r\n          if(!isObjOrArray){\r\n            containerSimple.appendChild(gridRow);\r\n            //There are already some panes\r\n            if(newTabPanesContainer.childElementCount > 0){\r\n              //If first pane is object or array, insert before a simple pane\r\n              if(newTabPanesContainer.firstChild.isObjOrArray){\r\n                //Append pane for simple properties\r\n                aPane.appendChild(containerSimple);\r\n                newTabPanesContainer.insertBefore(aPane,newTabPanesContainer.firstChild);\r\n                //Add \"Basic\" tab\r\n                self.theme.insertBasicTopTab(editor.tab,newTabs_holder);\r\n                //newTabs_holder.firstChild.insertBefore(editor.tab,newTabs_holder.firstChild.firstChild);\r\n                //Update the basicPane\r\n                editor.basicPane = aPane;\r\n              }\r\n              else {\r\n                //We already have a first \"Basic\" pane, just add the new property to it, so\r\n                //do nothing;\r\n              }\r\n            }\r\n            //There is no pane, so add the first (simple) pane\r\n            else {\r\n              //Append pane for simple properties\r\n              aPane.appendChild(containerSimple);\r\n              newTabPanesContainer.appendChild(aPane);\r\n              //Add \"Basic\" tab\r\n              //newTabs_holder.firstChild.appendChild(editor.tab);\r\n              self.theme.addTopTab(newTabs_holder,editor.tab);\r\n              //Update the basicPane\r\n              editor.basicPane = aPane;\r\n            }\r\n          }\r\n          //Objects and arrays earn it's own panes\r\n          else {\r\n            aPane.appendChild(gridRow);\r\n            newTabPanesContainer.appendChild(aPane);\r\n            //newTabs_holder.firstChild.appendChild(editor.tab);\r\n            self.theme.addTopTab(newTabs_holder,editor.tab);\r\n          }\r\n\r\n          if(editor.options.hidden) editor.container.style.display = 'none';\r\n          else self.theme.setGridColumnSize(editor.container,12);\r\n          //Now, add the property editor to the row\r\n          gridRow.appendChild(editor.container);\r\n          //Update the rowPane (same as self.rows[x].rowPane)\r\n          editor.rowPane = aPane;\r\n\r\n        });\r\n\r\n        //Erase old panes\r\n        while (this.tabPanesContainer.firstChild) {\r\n          this.tabPanesContainer.removeChild(this.tabPanesContainer.firstChild);\r\n        }\r\n\r\n        //Erase old tabs and set the new ones\r\n        var parentTabs_holder = this.tabs_holder.parentNode;\r\n        parentTabs_holder.removeChild(parentTabs_holder.firstChild);\r\n        parentTabs_holder.appendChild(newTabs_holder);\r\n\r\n        this.tabPanesContainer = newTabPanesContainer;\r\n        this.tabs_holder = newTabs_holder;\r\n\r\n        //Activate the first tab\r\n        var firstTab = this.theme.getFirstTab(this.tabs_holder);\r\n        if(firstTab){\r\n          $trigger(firstTab,'click');\r\n        }\r\n        return;\r\n      }\r\n      //Normal layout\r\n      else {\r\n        $each(this.property_order, function(i,key) {\r\n          var editor = self.editors[key];\r\n          if(editor.property_removed) return;\r\n          row = self.theme.getGridRow();\r\n          container.appendChild(row);\r\n\r\n          if(editor.options.hidden) editor.container.style.display = 'none';\r\n          else self.theme.setGridColumnSize(editor.container,12);\r\n          row.appendChild(editor.container);\r\n        });\r\n      }\r\n    }\r\n    //for grid and normal layout\r\n    while (this.row_container.firstChild) {\r\n      this.row_container.removeChild(this.row_container.firstChild);\r\n    }\r\n    this.row_container.appendChild(container);\r\n  },\r\n  getPropertySchema: function(key) {\r\n    // Schema declared directly in properties\r\n    var schema = this.schema.properties[key] || {};\r\n    schema = $extend({},schema);\r\n    var matched = this.schema.properties[key]? true : false;\r\n\r\n    // Any matching patternProperties should be merged in\r\n    if(this.schema.patternProperties) {\r\n      for(var i in this.schema.patternProperties) {\r\n        if(!this.schema.patternProperties.hasOwnProperty(i)) continue;\r\n        var regex = new RegExp(i);\r\n        if(regex.test(key)) {\r\n          schema.allOf = schema.allOf || [];\r\n          schema.allOf.push(this.schema.patternProperties[i]);\r\n          matched = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Hasn't matched other rules, use additionalProperties schema\r\n    if(!matched && this.schema.additionalProperties && typeof this.schema.additionalProperties === \"object\") {\r\n      schema = $extend({},this.schema.additionalProperties);\r\n    }\r\n\r\n    return schema;\r\n  },\r\n  preBuild: function() {\r\n    this._super();\r\n\r\n    this.editors = {};\r\n    this.cached_editors = {};\r\n    var self = this;\r\n\r\n    this.format = this.options.layout || this.options.object_layout || this.schema.format || this.jsoneditor.options.object_layout || 'normal';\r\n\r\n    this.schema.properties = this.schema.properties || {};\r\n\r\n    this.minwidth = 0;\r\n    this.maxwidth = 0;\r\n\r\n    // If the object should be rendered as a table row\r\n    if(this.options.table_row) {\r\n      $each(this.schema.properties, function(key,schema) {\r\n        var editor = self.jsoneditor.getEditorClass(schema);\r\n        self.editors[key] = self.jsoneditor.createEditor(editor,{\r\n          jsoneditor: self.jsoneditor,\r\n          schema: schema,\r\n          path: self.path+'.'+key,\r\n          parent: self,\r\n          compact: true,\r\n          required: true\r\n        });\r\n        self.editors[key].preBuild();\r\n\r\n        var width = self.editors[key].options.hidden? 0 : (self.editors[key].options.grid_columns || self.editors[key].getNumColumns());\r\n\r\n        self.minwidth += width;\r\n        self.maxwidth += width;\r\n      });\r\n      this.no_link_holder = true;\r\n    }\r\n    // If the object should be rendered as a table\r\n    else if(this.options.table) {\r\n      // TODO: table display format\r\n      throw \"Not supported yet\";\r\n    }\r\n    // If the object should be rendered as a div\r\n    else {\r\n      if(!this.schema.defaultProperties) {\r\n        if(this.jsoneditor.options.display_required_only || this.options.display_required_only) {\r\n          this.schema.defaultProperties = [];\r\n          $each(this.schema.properties, function(k,s) {\r\n            if(self.isRequired({key: k, schema: s})) {\r\n              self.schema.defaultProperties.push(k);\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          self.schema.defaultProperties = Object.keys(self.schema.properties);\r\n        }\r\n      }\r\n\r\n      // Increase the grid width to account for padding\r\n      self.maxwidth += 1;\r\n\r\n      $each(this.schema.defaultProperties, function(i,key) {\r\n        self.addObjectProperty(key, true);\r\n\r\n        if(self.editors[key]) {\r\n          self.minwidth = Math.max(self.minwidth,(self.editors[key].options.grid_columns || self.editors[key].getNumColumns()));\r\n          self.maxwidth += (self.editors[key].options.grid_columns || self.editors[key].getNumColumns());\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort editors by propertyOrder\r\n    this.property_order = Object.keys(this.editors);\r\n    this.property_order = this.property_order.sort(function(a,b) {\r\n      var ordera = self.editors[a].schema.propertyOrder;\r\n      var orderb = self.editors[b].schema.propertyOrder;\r\n      if(typeof ordera !== \"number\") ordera = 1000;\r\n      if(typeof orderb !== \"number\") orderb = 1000;\r\n\r\n      return ordera - orderb;\r\n    });\r\n  },\r\n  //\"Borrow\" from arrays code\r\n  addTab: function(idx){\r\n      var self = this;\r\n      var isObjOrArray = self.rows[idx].schema && (self.rows[idx].schema.type === \"object\" || self.rows[idx].schema.type === \"array\");\r\n      if(self.tabs_holder) {\r\n        self.rows[idx].tab_text = document.createElement('span');\r\n\r\n        if(!isObjOrArray){\r\n          self.rows[idx].tab_text.textContent = (typeof self.schema.basicCategoryTitle === 'undefined') ? \"Basic\" : self.schema.basicCategoryTitle;\r\n        } else {\r\n          self.rows[idx].tab_text.textContent = self.rows[idx].getHeaderText();\r\n        }\r\n        self.rows[idx].tab = self.theme.getTopTab(self.rows[idx].tab_text,this.getValidId(self.rows[idx].tab_text.textContent));\r\n        self.rows[idx].tab.addEventListener('click', function(e) {\r\n          self.active_tab = self.rows[idx].tab;\r\n          self.refreshTabs();\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        });\r\n\r\n      }\r\n\r\n    },\r\n  addRow: function(editor, tabHolder, aPane) {\r\n    var self = this;\r\n    var rowsLen = this.rows.length;\r\n    var isObjOrArray = editor.schema.type === \"object\" || editor.schema.type === \"array\";\r\n\r\n    //Add a row\r\n    self.rows[rowsLen] = editor;\r\n    //rowPane stores the editor corresponding pane to set the display style when refreshing Tabs\r\n    self.rows[rowsLen].rowPane = aPane;\r\n\r\n    if(!isObjOrArray){\r\n\r\n      //This is the first simple property to be added,\r\n      //add a (\"Basic\") tab for it and save it's row number\r\n      if(typeof self.basicTab === \"undefined\"){\r\n        self.addTab(rowsLen);\r\n        //Store the index row of the first simple property added\r\n        self.basicTab = rowsLen;\r\n        self.basicPane = aPane;\r\n        self.theme.addTopTab(tabHolder, self.rows[rowsLen].tab);\r\n      }\r\n\r\n      else {\r\n        //Any other simple property gets the same tab (and the same pane) as the first one,\r\n        //so, when 'click' event is fired from a row, it gets the correct (\"Basic\") tab\r\n        self.rows[rowsLen].tab = self.rows[self.basicTab].tab;\r\n        self.rows[rowsLen].tab_text = self.rows[self.basicTab].tab_text;\r\n        self.rows[rowsLen].rowPane = self.rows[self.basicTab].rowPane;\r\n      }\r\n    }\r\n    else {\r\n      self.addTab(rowsLen);\r\n      self.theme.addTopTab(tabHolder, self.rows[rowsLen].tab);\r\n    }\r\n  },\r\n  //Mark the active tab and make visible the corresponding pane, hide others\r\n  refreshTabs: function(refresh_headers) {\r\n    var self = this;\r\n    var basicTabPresent = typeof self.basicTab !== 'undefined';\r\n    var basicTabRefreshed = false;\r\n\r\n    $each(this.rows, function(i,row) {\r\n      //If it's an orphan row (some property which has been deleted), return\r\n      if(!row.tab || !row.rowPane || !row.rowPane.parentNode) return;\r\n\r\n      if(basicTabPresent && row.tab == self.rows[self.basicTab].tab && basicTabRefreshed) return;\r\n\r\n      if(refresh_headers) {\r\n        row.tab_text.textContent = row.getHeaderText();\r\n      }\r\n      else {\r\n        //All rows of simple properties point to the same tab, so refresh just once\r\n        if(basicTabPresent && row.tab == self.rows[self.basicTab].tab) basicTabRefreshed = true;\r\n\r\n        if(row.tab === self.active_tab) {\r\n          self.theme.markTabActive(row);\r\n        }\r\n        else {\r\n          self.theme.markTabInactive(row);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n\r\n    var isCategoriesFormat = (this.format === 'categories');\r\n    this.rows=[];\r\n    this.active_tab = null;\r\n\r\n    // If the object should be rendered as a table row\r\n    if(this.options.table_row) {\r\n      this.editor_holder = this.container;\r\n      $each(this.editors, function(key,editor) {\r\n        var holder = self.theme.getTableCell();\r\n        self.editor_holder.appendChild(holder);\r\n\r\n        editor.setContainer(holder);\r\n        editor.build();\r\n        editor.postBuild();\r\n        editor.setOptInCheckbox(editor.header);\r\n\r\n        if(self.editors[key].options.hidden) {\r\n          holder.style.display = 'none';\r\n        }\r\n        if(self.editors[key].options.input_width) {\r\n          holder.style.width = self.editors[key].options.input_width;\r\n        }\r\n      });\r\n    }\r\n    // If the object should be rendered as a table\r\n    else if(this.options.table) {\r\n      // TODO: table display format\r\n      throw \"Not supported yet\";\r\n    }\r\n    // If the object should be rendered as a div\r\n    else {\r\n      if(!this.options.compact) {\r\n        this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n        this.title = this.theme.getHeader(this.header);\r\n      }\r\n      else {\r\n        this.title = this.theme.getHeader(\"\");\r\n      }\r\n      this.container.appendChild(this.title);\r\n      this.container.style.position = 'relative';\r\n\r\n      // Edit JSON modal\r\n      this.editjson_holder = this.theme.getModal();\r\n      this.editjson_textarea = this.theme.getTextareaInput();\r\n      this.editjson_textarea.style.height = '170px';\r\n      this.editjson_textarea.style.width = '300px';\r\n      this.editjson_textarea.style.display = 'block';\r\n      this.editjson_save = this.getButton('Save','save','Save');\r\n      this.editjson_save.classList.add('json-editor-btntype-save');\r\n      this.editjson_save.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.saveJSON();\r\n      });\r\n      this.editjson_copy = this.getButton('Copy','copy','Copy');\r\n      this.editjson_copy.classList.add('json-editor-btntype-copy');\r\n      this.editjson_copy.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.copyJSON();\r\n      });\r\n      this.editjson_cancel = this.getButton('Cancel','cancel','Cancel');\r\n      this.editjson_cancel.classList.add('json-editor-btntype-cancel');\r\n      this.editjson_cancel.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.hideEditJSON();\r\n      });\r\n      this.editjson_holder.appendChild(this.editjson_textarea);\r\n      this.editjson_holder.appendChild(this.editjson_save);\r\n      this.editjson_holder.appendChild(this.editjson_copy);\r\n      this.editjson_holder.appendChild(this.editjson_cancel);\r\n\r\n      // Manage Properties modal\r\n      this.addproperty_holder = this.theme.getModal();\r\n      this.addproperty_list = document.createElement('div');\r\n      this.addproperty_list.style.width = '295px';\r\n      this.addproperty_list.style.maxHeight = '160px';\r\n      this.addproperty_list.style.padding = '5px 0';\r\n      this.addproperty_list.style.overflowY = 'auto';\r\n      this.addproperty_list.style.overflowX = 'hidden';\r\n      this.addproperty_list.style.paddingLeft = '5px';\r\n      this.addproperty_list.setAttribute('class', 'property-selector');\r\n      this.addproperty_add = this.getButton('add','add','add');\r\n      this.addproperty_add.classList.add('json-editor-btntype-add');\r\n      this.addproperty_input = this.theme.getFormInputField('text');\r\n      this.addproperty_input.setAttribute('placeholder','Property name...');\r\n      this.addproperty_input.style.width = '220px';\r\n      this.addproperty_input.style.marginBottom = '0';\r\n      this.addproperty_input.style.display = 'inline-block';\r\n      this.addproperty_add.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if(self.addproperty_input.value) {\r\n          if(self.editors[self.addproperty_input.value]) {\r\n            window.alert('there is already a property with that name');\r\n            return;\r\n          }\r\n\r\n          self.addObjectProperty(self.addproperty_input.value);\r\n          if(self.editors[self.addproperty_input.value]) {\r\n            self.editors[self.addproperty_input.value].disable();\r\n          }\r\n          self.onChange(true);\r\n        }\r\n      });\r\n      this.addproperty_holder.appendChild(this.addproperty_list);\r\n      this.addproperty_holder.appendChild(this.addproperty_input);\r\n      this.addproperty_holder.appendChild(this.addproperty_add);\r\n      var spacer = document.createElement('div');\r\n      spacer.style.clear = 'both';\r\n      this.addproperty_holder.appendChild(spacer);\r\n\r\n      // Close properties modal if clicked outside modal\r\n      document.addEventListener('click', function(e) {\r\n          if (!this.addproperty_holder.contains(e.target) && this.adding_property) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.toggleAddProperty();\r\n          }\r\n      }.bind(this));\r\n\r\n      // Description\r\n      if(this.schema.description) {\r\n        this.description = this.theme.getDescription(this.schema.description);\r\n        this.container.appendChild(this.description);\r\n      }\r\n\r\n      // Validation error placeholder area\r\n      this.error_holder = document.createElement('div');\r\n      this.container.appendChild(this.error_holder);\r\n\r\n      // Container for child editor area\r\n      this.editor_holder = this.theme.getIndentedPanel();\r\n      this.container.appendChild(this.editor_holder);\r\n\r\n      // Container for rows of child editors\r\n      this.row_container = this.theme.getGridContainer();\r\n\r\n      if(isCategoriesFormat) {\r\n        this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.schema.title));\r\n        this.tabPanesContainer = this.theme.getTopTabContentHolder(this.tabs_holder);\r\n        this.editor_holder.appendChild(this.tabs_holder);\r\n      }\r\n      else {\r\n        this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.schema.title));\r\n        this.tabPanesContainer = this.theme.getTabContentHolder(this.tabs_holder);\r\n        this.editor_holder.appendChild(this.row_container);\r\n      }\r\n\r\n      $each(this.editors, function(key,editor) {\r\n        var aPane = self.theme.getTabContent();\r\n        var holder = self.theme.getGridColumn();\r\n        var isObjOrArray = (editor.schema && (editor.schema.type === 'object' || editor.schema.type === 'array')) ? true : false;\r\n        aPane.isObjOrArray = isObjOrArray;\r\n\r\n        if(isCategoriesFormat){\r\n          if(isObjOrArray) {\r\n            var single_row_container = self.theme.getGridContainer();\r\n            single_row_container.appendChild(holder);\r\n            aPane.appendChild(single_row_container);\r\n            self.tabPanesContainer.appendChild(aPane);\r\n            self.row_container = single_row_container;\r\n          }\r\n          else {\r\n            if(typeof self.row_container_basic === 'undefined'){\r\n              self.row_container_basic = self.theme.getGridContainer();\r\n              aPane.appendChild(self.row_container_basic);\r\n              if(self.tabPanesContainer.childElementCount == 0){\r\n                self.tabPanesContainer.appendChild(aPane);\r\n              }\r\n              else {\r\n                self.tabPanesContainer.insertBefore(aPane,self.tabPanesContainer.childNodes[1]);\r\n              }\r\n            }\r\n            self.row_container_basic.appendChild(holder);\r\n          }\r\n\r\n          self.addRow(editor,self.tabs_holder,aPane);\r\n\r\n          aPane.id = self.getValidId(editor.schema.title); //editor.schema.path//tab_text.textContent\r\n\r\n        }\r\n        else {\r\n          self.row_container.appendChild(holder);\r\n        }\r\n\r\n        editor.setContainer(holder);\r\n        editor.build();\r\n        editor.postBuild();\r\n        editor.setOptInCheckbox(editor.header);\r\n      });\r\n\r\n      if(this.rows[0]){\r\n        $trigger(this.rows[0].tab,'click');\r\n      }\r\n\r\n      // Control buttons\r\n      this.title_controls = this.theme.getHeaderButtonHolder();\r\n      this.editjson_controls = this.theme.getHeaderButtonHolder();\r\n      this.addproperty_controls = this.theme.getHeaderButtonHolder();\r\n      this.title.appendChild(this.title_controls);\r\n      this.title.appendChild(this.editjson_controls);\r\n      this.title.appendChild(this.addproperty_controls);\r\n\r\n      // Show/Hide button\r\n      this.collapsed = false;\r\n      this.toggle_button = this.getButton('', 'collapse', this.translate('button_collapse'));\r\n      this.toggle_button.classList.add('json-editor-btntype-toggle');\r\n      this.title_controls.appendChild(this.toggle_button);\r\n      this.toggle_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if(self.collapsed) {\r\n          self.editor_holder.style.display = '';\r\n          self.collapsed = false;\r\n          self.setButtonText(self.toggle_button,'','collapse',self.translate('button_collapse'));\r\n        }\r\n        else {\r\n          self.editor_holder.style.display = 'none';\r\n          self.collapsed = true;\r\n          self.setButtonText(self.toggle_button,'','expand',self.translate('button_expand'));\r\n        }\r\n      });\r\n\r\n      // If it should start collapsed\r\n      if(this.options.collapsed) {\r\n        $trigger(this.toggle_button,'click');\r\n      }\r\n\r\n      // Collapse button disabled\r\n      if(this.schema.options && typeof this.schema.options.disable_collapse !== \"undefined\") {\r\n        if(this.schema.options.disable_collapse) this.toggle_button.style.display = 'none';\r\n      }\r\n      else if(this.jsoneditor.options.disable_collapse) {\r\n        this.toggle_button.style.display = 'none';\r\n      }\r\n\r\n      // Edit JSON Button\r\n      this.editjson_button = this.getButton('JSON','edit','Edit JSON');\r\n      this.editjson_button.classList.add('json-editor-btntype-editjson');\r\n      this.editjson_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.toggleEditJSON();\r\n      });\r\n      this.editjson_controls.appendChild(this.editjson_button);\r\n      this.editjson_controls.appendChild(this.editjson_holder);\r\n\r\n      // Edit JSON Buttton disabled\r\n      if(this.schema.options && typeof this.schema.options.disable_edit_json !== \"undefined\") {\r\n        if(this.schema.options.disable_edit_json) this.editjson_button.style.display = 'none';\r\n      }\r\n      else if(this.jsoneditor.options.disable_edit_json) {\r\n        this.editjson_button.style.display = 'none';\r\n      }\r\n\r\n      // Object Properties Button\r\n      this.addproperty_button = this.getButton('Properties','edit', self.translate('button_object_properties'));\r\n      this.addproperty_button.classList.add('json-editor-btntype-properties');\r\n      this.addproperty_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.toggleAddProperty();\r\n      });\r\n      this.addproperty_controls.appendChild(this.addproperty_button);\r\n      this.addproperty_controls.appendChild(this.addproperty_holder);\r\n      if(this.jsoneditor.options.mode == \"design\"){\r\n        //Design Mode\r\n        var isObjectPropertiesButton = function(node) {\r\n          // Check whether the node is a properties button for an object,\r\n          // and not for the schema of an object named properties\r\n          // Does the path end in '.properties'?\r\n          if(node.matches('div[data-schemapath$=\".properties\"] > h3 > div > button.json-editor-btntype-properties')) { \r\n            var containingDiv = node.parentElement.parentElement.parentElement;\r\n            var span = containingDiv.querySelector('h3 > span');\r\n            // Is it an object properties or a property named properties?\r\n            if(span && span.innerText === 'properties') { \r\n                return true;\r\n            }\r\n          }\r\n          return false;\r\n        };\r\n        if(isObjectPropertiesButton(this.addproperty_button)) {\r\n          this.addproperty_button.querySelector('span').innerText = 'Add/Remove';\r\n        }\r\n        else if(this.addproperty_button.matches('button.json-editor-btntype-properties')) {\r\n          // For other properties buttons, remove the 'Properties' label,\r\n          // and use a cog as icon\r\n          var icon = this.addproperty_button.querySelector('i');\r\n          icon.classList.remove('fa-pen');\r\n          icon.classList.add('fa-cog');\r\n          var span = this.addproperty_button.querySelector('span');\r\n          span.innerText = '';\r\n        }\r\n\r\n      }\r\n      this.refreshAddProperties();\r\n      // Compact flag\r\n      if(this.options.compact) {\r\n        this.container.classList.add('compact');\r\n      }\r\n      var hidden = (this.options.compact && this.options.disable_properties && this.options.disable_edit_json && this.options.disable_collapse);\r\n      if(hidden) {\r\n        this.title.style.display = 'none';\r\n      }\r\n\r\n      // non required properties start deactivated\r\n      this.deactivateNonRequiredProperties();\r\n\r\n    }\r\n\r\n    // Fix table cell ordering\r\n    if(this.options.table_row) {\r\n      this.editor_holder = this.container;\r\n      $each(this.property_order,function(i,key) {\r\n        self.editor_holder.appendChild(self.editors[key].container);\r\n      });\r\n    }\r\n    // Layout object editors in grid if needed\r\n    else {\r\n      // Initial layout\r\n      this.layoutEditors();\r\n      // Do it again now that we know the approximate heights of elements\r\n      this.layoutEditors();\r\n    }\r\n  },\r\n  deactivateNonRequiredProperties: function () {\r\n    var self = this;\r\n    // the show_opt_in editor option is for backward compatibility\r\n    if (this.jsoneditor.options.show_opt_in || this.options.show_opt_in) {\r\n      $each(this.editors, function(key, editor) {\r\n        if (!self.isRequired(editor)) {\r\n          self.editors[key].deactivate();\r\n        }\r\n      });\r\n    }\r\n  },\r\n  showEditJSON: function() {\r\n    if(!this.editjson_holder) return;\r\n    this.hideAddProperty();\r\n\r\n    // Position the form directly beneath the button\r\n    // TODO: edge detection\r\n    this.editjson_holder.style.left = this.editjson_button.offsetLeft+\"px\";\r\n    this.editjson_holder.style.top = this.editjson_button.offsetTop + this.editjson_button.offsetHeight+\"px\";\r\n\r\n    // Start the textarea with the current value\r\n    this.editjson_textarea.value = JSON.stringify(this.getValue(),null,2);\r\n\r\n    // Disable the rest of the form while editing JSON\r\n    this.disable();\r\n\r\n    this.editjson_holder.style.display = '';\r\n    this.editjson_button.disabled = false;\r\n    this.editing_json = true;\r\n  },\r\n  hideEditJSON: function() {\r\n    if(!this.editjson_holder) return;\r\n    if(!this.editing_json) return;\r\n\r\n    this.editjson_holder.style.display = 'none';\r\n    this.enable();\r\n    this.editing_json = false;\r\n  },\r\n  copyJSON: function() {\r\n    if(!this.editjson_holder) return;\r\n    var ta = document.createElement('textarea');\r\n    ta.value = this.editjson_textarea.value;\r\n    ta.setAttribute('readonly', '');\r\n    ta.style.position = 'absolute';\r\n    ta.style.left = '-9999px';\r\n    document.body.appendChild(ta);\r\n    ta.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(ta);\r\n  },\r\n  saveJSON: function() {\r\n    if(!this.editjson_holder) return;\r\n\r\n    try {\r\n      var json = JSON.parse(this.editjson_textarea.value);\r\n      this.setValue(json);\r\n      this.hideEditJSON();\r\n      this.onChange(true);\r\n    }\r\n    catch(e) {\r\n      window.alert('invalid JSON');\r\n      throw e;\r\n    }\r\n  },\r\n  toggleEditJSON: function() {\r\n    if(this.editing_json) this.hideEditJSON();\r\n    else this.showEditJSON();\r\n  },\r\n  insertPropertyControlUsingPropertyOrder: function (property, control, container) {\r\n    var propertyOrder;\r\n    if (this.schema.properties[property])\r\n      propertyOrder = this.schema.properties[property].propertyOrder;\r\n    if (typeof propertyOrder !== \"number\") propertyOrder = 1000;\r\n    control.propertyOrder = propertyOrder;\r\n\r\n    for (var i = 0; i < container.childNodes.length; i++) {\r\n      var child = container.childNodes[i];\r\n      if (control.propertyOrder < child.propertyOrder) {\r\n        this.addproperty_list.insertBefore(control, child);\r\n        control = null;\r\n        break;\r\n      }\r\n    }\r\n    if (control) {\r\n      this.addproperty_list.appendChild(control);\r\n    }\r\n  },\r\n  addPropertyCheckbox: function(key) {\r\n    var self = this;\r\n    var checkbox, label, labelText, control;\r\n\r\n    checkbox = self.theme.getCheckbox();\r\n    checkbox.style.width = 'auto';\r\n\r\n    if (this.schema.properties[key] && this.schema.properties[key].title)\r\n      labelText = this.schema.properties[key].title;\r\n    else\r\n      labelText = key;\r\n\r\n    label = self.theme.getCheckboxLabel(labelText);\r\n\r\n    control = self.theme.getFormControl(label,checkbox);\r\n    control.style.paddingBottom = control.style.marginBottom = control.style.paddingTop = control.style.marginTop = 0;\r\n    control.style.height = 'auto';\r\n    //control.style.overflowY = 'hidden';\r\n\r\n    this.insertPropertyControlUsingPropertyOrder(key, control, this.addproperty_list);\r\n\r\n    checkbox.checked = key in this.editors;\r\n    checkbox.addEventListener('change',function() {\r\n      if(checkbox.checked) {\r\n        self.addObjectProperty(key);\r\n      }\r\n      else {\r\n        self.removeObjectProperty(key);\r\n      }\r\n      self.onChange(true);\r\n    });\r\n    self.addproperty_checkboxes[key] = checkbox;\r\n\r\n    return checkbox;\r\n  },\r\n  showAddProperty: function() {\r\n    if(!this.addproperty_holder) return;\r\n    this.hideEditJSON();\r\n\r\n    // Position the form directly beneath the button\r\n    // TODO: edge detection\r\n    this.addproperty_holder.style.left = this.addproperty_button.offsetLeft+\"px\";\r\n    this.addproperty_holder.style.top = this.addproperty_button.offsetTop + this.addproperty_button.offsetHeight+\"px\";\r\n\r\n    // Disable the rest of the form while editing JSON\r\n    this.disable();\r\n\r\n    this.adding_property = true;\r\n    this.addproperty_button.disabled = false;\r\n    this.addproperty_holder.style.display = '';\r\n    this.refreshAddProperties();\r\n  },\r\n  hideAddProperty: function() {\r\n    if(!this.addproperty_holder) return;\r\n    if(!this.adding_property) return;\r\n\r\n    this.addproperty_holder.style.display = 'none';\r\n    this.enable();\r\n\r\n    this.adding_property = false;\r\n  },\r\n  toggleAddProperty: function() {\r\n    if(this.adding_property) this.hideAddProperty();\r\n    else this.showAddProperty();\r\n  },\r\n  removeObjectProperty: function(property) {\r\n    if(this.editors[property]) {\r\n        this.editors[property].unregister();\r\n        delete this.editors[property];\r\n\r\n      this.refreshValue();\r\n      this.layoutEditors();\r\n    }\r\n  },\r\n  addObjectProperty: function(name, prebuild_only) {\r\n    var self = this;\r\n\r\n    // Property is already added\r\n    if(this.editors[name]) return;\r\n\r\n    // Property was added before and is cached\r\n    if(this.cached_editors[name]) {\r\n      this.editors[name] = this.cached_editors[name];\r\n      if(prebuild_only) return;\r\n      this.editors[name].register();\r\n    }\r\n    // New property\r\n    else {\r\n      if(!this.canHaveAdditionalProperties() && (!this.schema.properties || !this.schema.properties[name])) {\r\n        return;\r\n      }\r\n\r\n      var schema = self.getPropertySchema(name);\r\n      if(typeof schema.propertyOrder !== 'number'){\r\n        // if the propertyOrder undefined, then set a smart default value.\r\n        schema.propertyOrder = Object.keys(self.editors).length + 1000;\r\n      }\r\n\r\n\r\n      // Add the property\r\n      var editor = self.jsoneditor.getEditorClass(schema);\r\n\r\n      self.editors[name] = self.jsoneditor.createEditor(editor,{\r\n        jsoneditor: self.jsoneditor,\r\n        schema: schema,\r\n        path: self.path+'.'+name,\r\n        parent: self\r\n      });\r\n      self.editors[name].preBuild();\r\n\r\n      if(!prebuild_only) {\r\n        var holder = self.theme.getChildEditorHolder();\r\n        self.editor_holder.appendChild(holder);\r\n        self.editors[name].setContainer(holder);\r\n        self.editors[name].build();\r\n        self.editors[name].postBuild();\r\n        self.editors[name].setOptInCheckbox(editor.header);\r\n        self.editors[name].activate();\r\n      }\r\n\r\n      self.cached_editors[name] = self.editors[name];\r\n    }\r\n\r\n    // If we're only prebuilding the editors, don't refresh values\r\n    if(!prebuild_only) {\r\n      self.refreshValue();\r\n      self.layoutEditors();\r\n    }\r\n  },\r\n  onChildEditorChange: function(editor) {\r\n    this.refreshValue();\r\n    this._super(editor);\r\n  },\r\n  canHaveAdditionalProperties: function() {\r\n    if (typeof this.schema.additionalProperties === \"boolean\") {\r\n      return this.schema.additionalProperties;\r\n    }\r\n    return !this.jsoneditor.options.no_additional_properties;\r\n  },\r\n  destroy: function() {\r\n    $each(this.cached_editors, function(i,el) {\r\n      el.destroy();\r\n    });\r\n    if(this.editor_holder) this.editor_holder.innerHTML = '';\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.error_holder && this.error_holder.parentNode) this.error_holder.parentNode.removeChild(this.error_holder);\r\n\r\n    this.editors = null;\r\n    this.cached_editors = null;\r\n    if(this.editor_holder && this.editor_holder.parentNode) this.editor_holder.parentNode.removeChild(this.editor_holder);\r\n    this.editor_holder = null;\r\n\r\n    this._super();\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    var result = this._super();\r\n    if(this.jsoneditor.options.remove_empty_properties || this.options.remove_empty_properties) {\r\n      for (var i in result) {\r\n        if (result.hasOwnProperty(i)) {\r\n          if (typeof result[i] === 'undefined' || result[i] === '' || result[i] === Object(result[i]) && Object.keys(result[i]).length == 0 && result[i].constructor == Object) {\r\n            delete result[i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  },\r\n  refreshValue: function() {\r\n    this.value = {};\r\n    var self = this;\r\n\r\n    for(var i in this.editors) {\r\n      if(!this.editors.hasOwnProperty(i)) continue;\r\n      if (this.editors[i].isActive()) {\r\n        this.value[i] = this.editors[i].getValue();\r\n      }\r\n    }\r\n\r\n    if(this.adding_property) this.refreshAddProperties();\r\n  },\r\n  refreshAddProperties: function() {\r\n    if(this.options.disable_properties || (this.options.disable_properties !== false && this.jsoneditor.options.disable_properties)) {\r\n      this.addproperty_controls.style.display = 'none';\r\n      return;\r\n    }\r\n\r\n    var can_add = false, can_remove = false, num_props = 0, i, show_modal = false;\r\n\r\n    // Get number of editors\r\n    for(i in this.editors) {\r\n      if(!this.editors.hasOwnProperty(i)) continue;\r\n      num_props++;\r\n    }\r\n\r\n    // Determine if we can add back removed properties\r\n    can_add = this.canHaveAdditionalProperties() && !(typeof this.schema.maxProperties !== \"undefined\" && num_props >= this.schema.maxProperties);\r\n\r\n    if(this.addproperty_checkboxes) {\r\n      this.addproperty_list.innerHTML = '';\r\n    }\r\n    this.addproperty_checkboxes = {};\r\n\r\n    // Check for which editors can't be removed or added back\r\n    for(i in this.cached_editors) {\r\n      if(!this.cached_editors.hasOwnProperty(i)) continue;\r\n\r\n      this.addPropertyCheckbox(i);\r\n\r\n      if(this.isRequired(this.cached_editors[i]) && i in this.editors) {\r\n        this.addproperty_checkboxes[i].disabled = true;\r\n      }\r\n\r\n      if(typeof this.schema.minProperties !== \"undefined\" && num_props <= this.schema.minProperties) {\r\n        this.addproperty_checkboxes[i].disabled = this.addproperty_checkboxes[i].checked;\r\n        if(!this.addproperty_checkboxes[i].checked) show_modal = true;\r\n      }\r\n      else if(!(i in this.editors)) {\r\n        if(!can_add  && !this.schema.properties.hasOwnProperty(i)) {\r\n          this.addproperty_checkboxes[i].disabled = true;\r\n        }\r\n        else {\r\n          this.addproperty_checkboxes[i].disabled = false;\r\n          show_modal = true;\r\n        }\r\n      }\r\n      else {\r\n        show_modal = true;\r\n        can_remove = true;\r\n      }\r\n    }\r\n\r\n    if(this.canHaveAdditionalProperties()) {\r\n      show_modal = true;\r\n    }\r\n\r\n    // Additional addproperty checkboxes not tied to a current editor\r\n    for(i in this.schema.properties) {\r\n      if(!this.schema.properties.hasOwnProperty(i)) continue;\r\n      if(this.cached_editors[i]) continue;\r\n      show_modal = true;\r\n      this.addPropertyCheckbox(i);\r\n    }\r\n\r\n    // If no editors can be added or removed, hide the modal button\r\n    if(!show_modal) {\r\n      this.hideAddProperty();\r\n      this.addproperty_controls.style.display = 'none';\r\n    }\r\n    // If additional properties are disabled\r\n    else if(!this.canHaveAdditionalProperties()) {\r\n      this.addproperty_add.style.display = 'none';\r\n      this.addproperty_input.style.display = 'none';\r\n    }\r\n    // If no new properties can be added\r\n    else if(!can_add) {\r\n      this.addproperty_add.disabled = true;\r\n    }\r\n    // If new properties can be added\r\n    else {\r\n      this.addproperty_add.disabled = false;\r\n    }\r\n  },\r\n  isRequired: function(editor) {\r\n    if (!editor) {\r\n      return;\r\n    }\r\n    if(typeof editor.schema.required === \"boolean\") return editor.schema.required;\r\n    else if(Array.isArray(this.schema.required)) return this.schema.required.indexOf(editor.key) > -1;\r\n    else if(this.jsoneditor.options.required_by_default) return true;\r\n    else return false;\r\n  },\r\n  setValue: function(value, initial) {\r\n    var self = this;\r\n    value = value || {};\r\n\r\n    if(typeof value !== \"object\" || Array.isArray(value)) value = {};\r\n\r\n    // First, set the values for all of the defined properties\r\n    $each(this.cached_editors, function(i,editor) {\r\n      // Value explicitly set\r\n      if(typeof value[i] !== \"undefined\") {\r\n        self.addObjectProperty(i);\r\n        editor.setValue(value[i],initial);\r\n      }\r\n      // Otherwise, remove value unless this is the initial set or it's required\r\n      else if(!initial && !self.isRequired(editor)) {\r\n        self.removeObjectProperty(i);\r\n      }\r\n      // Otherwise, set the value to the default\r\n      else {\r\n        editor.setValue(editor.getDefault(),initial);\r\n      }\r\n    });\r\n\r\n    $each(value, function(i,val) {\r\n      if(!self.cached_editors[i]) {\r\n        self.addObjectProperty(i);\r\n        if(self.editors[i]) self.editors[i].setValue(val,initial);\r\n      }\r\n    });\r\n\r\n    this.refreshValue();\r\n    this.layoutEditors();\r\n    this.onChange();\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    var self = this;\r\n\r\n    // Get all the errors that pertain to this editor\r\n    var my_errors = [];\r\n    var other_errors = [];\r\n    $each(errors, function(i,error) {\r\n      if(error.path === self.path) {\r\n        my_errors.push(error);\r\n      }\r\n      else {\r\n        other_errors.push(error);\r\n      }\r\n    });\r\n\r\n    // Show errors for this editor\r\n    if(this.error_holder) {\r\n      if(my_errors.length) {\r\n        var message = [];\r\n        this.error_holder.innerHTML = '';\r\n        this.error_holder.style.display = '';\r\n        $each(my_errors, function(i,error) {\r\n          self.error_holder.appendChild(self.theme.getErrorMessage(error.message));\r\n        });\r\n      }\r\n      // Hide error area\r\n      else {\r\n        this.error_holder.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    // Show error for the table row if this is inside a table\r\n    if(this.options.table_row) {\r\n      if(my_errors.length) {\r\n        this.theme.addTableRowError(this.container);\r\n      }\r\n      else {\r\n        this.theme.removeTableRowError(this.container);\r\n      }\r\n    }\r\n\r\n    // Show errors for child editors\r\n    $each(this.editors, function(i,editor) {\r\n      editor.showValidationErrors(other_errors);\r\n    });\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.array = JSONEditor.AbstractEditor.extend({\r\n  askConfirmation: function() {\r\n    if (this.jsoneditor.options.prompt_before_delete === true) {\r\n      if (confirm(\"Are you sure you want to remove this node?\") === false) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n  getDefault: function() {\r\n    return this.schema[\"default\"] || [];\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(this.rows) {\r\n      for(var i=0; i<this.rows.length; i++) {\r\n        this.rows[i].register();\r\n      }\r\n    }\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(this.rows) {\r\n      for(var i=0; i<this.rows.length; i++) {\r\n        this.rows[i].unregister();\r\n      }\r\n    }\r\n  },\r\n  getNumColumns: function() {\r\n    var info = this.getItemInfo(0);\r\n    // Tabs require extra horizontal space\r\n    if(this.tabs_holder && this.schema.format !== 'tabs-top') {\r\n      return Math.max(Math.min(12,info.width+2),4);\r\n    }\r\n    else {\r\n      return info.width;\r\n    }\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.add_row_button) this.add_row_button.disabled = false;\r\n      if(this.remove_all_rows_button) this.remove_all_rows_button.disabled = false;\r\n      if(this.delete_last_row_button) this.delete_last_row_button.disabled = false;\r\n\r\n      if(this.rows) {\r\n        for(var i=0; i<this.rows.length; i++) {\r\n          this.rows[i].enable();\r\n\r\n          if(this.rows[i].moveup_button) this.rows[i].moveup_button.disabled = false;\r\n          if(this.rows[i].movedown_button) this.rows[i].movedown_button.disabled = false;\r\n          if(this.rows[i].delete_button) this.rows[i].delete_button.disabled = false;\r\n        }\r\n      }\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.add_row_button) this.add_row_button.disabled = true;\r\n    if(this.remove_all_rows_button) this.remove_all_rows_button.disabled = true;\r\n    if(this.delete_last_row_button) this.delete_last_row_button.disabled = true;\r\n\r\n    if(this.rows) {\r\n      for(var i=0; i<this.rows.length; i++) {\r\n        this.rows[i].disable(always_disabled);\r\n\r\n        if(this.rows[i].moveup_button) this.rows[i].moveup_button.disabled = true;\r\n        if(this.rows[i].movedown_button) this.rows[i].movedown_button.disabled = true;\r\n        if(this.rows[i].delete_button) this.rows[i].delete_button.disabled = true;\r\n      }\r\n    }\r\n    this._super();\r\n  },\r\n  preBuild: function() {\r\n    this._super();\r\n\r\n    this.rows = [];\r\n    this.row_cache = [];\r\n\r\n    this.hide_delete_buttons = this.options.disable_array_delete || this.jsoneditor.options.disable_array_delete;\r\n    this.hide_delete_all_rows_buttons = this.hide_delete_buttons || this.options.disable_array_delete_all_rows || this.jsoneditor.options.disable_array_delete_all_rows;\r\n    this.hide_delete_last_row_buttons = this.hide_delete_buttons || this.options.disable_array_delete_last_row || this.jsoneditor.options.disable_array_delete_last_row;\r\n    this.hide_move_buttons = this.options.disable_array_reorder || this.jsoneditor.options.disable_array_reorder;\r\n    this.hide_add_button = this.options.disable_array_add || this.jsoneditor.options.disable_array_add;\r\n    this.show_copy_button = this.options.enable_array_copy || this.jsoneditor.options.enable_array_copy;\r\n    this.array_controls_top = this.options.array_controls_top || this.jsoneditor.options.array_controls_top;\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n\r\n    if(!this.options.compact) {\r\n      this.header = document.createElement('label');\r\n      this.header.textContent = this.getTitle();\r\n      this.title = this.theme.getHeader(this.header);\r\n      this.container.appendChild(this.title);\r\n      this.title_controls = this.theme.getHeaderButtonHolder();\r\n      this.title.appendChild(this.title_controls);\r\n      if(this.schema.description) {\r\n        this.description = this.theme.getDescription(this.schema.description);\r\n        this.container.appendChild(this.description);\r\n      }\r\n      this.error_holder = document.createElement('div');\r\n      this.container.appendChild(this.error_holder);\r\n\r\n      if(this.schema.format === 'tabs-top') {\r\n        this.controls = this.theme.getHeaderButtonHolder();\r\n        this.title.appendChild(this.controls);\r\n        this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.getItemTitle()));\r\n        this.container.appendChild(this.tabs_holder);\r\n        this.row_holder = this.theme.getTopTabContentHolder(this.tabs_holder);\r\n\r\n        this.active_tab = null;\r\n      }\r\n      else if(this.schema.format === 'tabs') {\r\n        this.controls = this.theme.getHeaderButtonHolder();\r\n        this.title.appendChild(this.controls);\r\n        this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.getItemTitle()));\r\n        this.container.appendChild(this.tabs_holder);\r\n        this.row_holder = this.theme.getTabContentHolder(this.tabs_holder);\r\n\r\n        this.active_tab = null;\r\n      }\r\n      else {\r\n        this.panel = this.theme.getIndentedPanel();\r\n        this.container.appendChild(this.panel);\r\n        this.row_holder = document.createElement('div');\r\n        this.panel.appendChild(this.row_holder);\r\n        this.controls = this.theme.getButtonHolder();\r\n        if (this.array_controls_top) {\r\n          this.title.appendChild(this.controls);\r\n        }\r\n        else {\r\n          this.panel.appendChild(this.controls);\r\n        }\r\n      }\r\n    }\r\n    else {\r\n        this.panel = this.theme.getIndentedPanel();\r\n        this.container.appendChild(this.panel);\r\n        this.title_controls = this.theme.getHeaderButtonHolder();\r\n        this.panel.appendChild(this.title_controls);\r\n        this.controls = this.theme.getButtonHolder();\r\n        this.panel.appendChild(this.controls);\r\n        this.row_holder = document.createElement('div');\r\n        this.panel.appendChild(this.row_holder);\r\n    }\r\n\r\n    // Add controls\r\n    this.addControls();\r\n  },\r\n  onChildEditorChange: function(editor) {\r\n    this.refreshValue();\r\n    this.refreshTabs(true);\r\n    this._super(editor);\r\n  },\r\n  getItemTitle: function() {\r\n    if(!this.item_title) {\r\n      if(this.schema.items && !Array.isArray(this.schema.items)) {\r\n        var tmp = this.jsoneditor.expandRefs(this.schema.items);\r\n        this.item_title = tmp.title || 'item';\r\n      }\r\n      else {\r\n        this.item_title = 'item';\r\n      }\r\n    }\r\n    return this.cleanText(this.item_title);\r\n  },\r\n  getItemSchema: function(i) {\r\n    if(Array.isArray(this.schema.items)) {\r\n      if(i >= this.schema.items.length) {\r\n        if(this.schema.additionalItems===true) {\r\n          return {};\r\n        }\r\n        else if(this.schema.additionalItems) {\r\n          return $extend({},this.schema.additionalItems);\r\n        }\r\n      }\r\n      else {\r\n        return $extend({},this.schema.items[i]);\r\n      }\r\n    }\r\n    else if(this.schema.items) {\r\n      return $extend({},this.schema.items);\r\n    }\r\n    else {\r\n      return {};\r\n    }\r\n  },\r\n  getItemInfo: function(i) {\r\n    var schema = this.getItemSchema(i);\r\n\r\n    // Check if it's cached\r\n    this.item_info = this.item_info || {};\r\n    var stringified = JSON.stringify(schema);\r\n    if(typeof this.item_info[stringified] !== \"undefined\") return this.item_info[stringified];\r\n\r\n    // Get the schema for this item\r\n    schema = this.jsoneditor.expandRefs(schema);\r\n\r\n    this.item_info[stringified] = {\r\n      title: schema.title || \"item\",\r\n      'default': schema[\"default\"],\r\n      width: 12,\r\n      child_editors: schema.properties || schema.items\r\n    };\r\n\r\n    return this.item_info[stringified];\r\n  },\r\n  getElementEditor: function(i) {\r\n    var item_info = this.getItemInfo(i);\r\n    var schema = this.getItemSchema(i);\r\n    schema = this.jsoneditor.expandRefs(schema);\r\n    schema.title = item_info.title+' '+(i+1);\r\n\r\n    var editor = this.jsoneditor.getEditorClass(schema);\r\n\r\n    var holder;\r\n    if(this.tabs_holder) {\r\n      if(this.schema.format === 'tabs-top') {\r\n        holder = this.theme.getTopTabContent();\r\n      }\r\n      else {\r\n        holder = this.theme.getTabContent();\r\n      }\r\n      holder.id = this.path+'.'+i;\r\n    }\r\n    else if(item_info.child_editors) {\r\n      holder = this.theme.getChildEditorHolder();\r\n    }\r\n    else {\r\n      holder = this.theme.getIndentedPanel();\r\n    }\r\n\r\n    this.row_holder.appendChild(holder);\r\n\r\n    var ret = this.jsoneditor.createEditor(editor,{\r\n      jsoneditor: this.jsoneditor,\r\n      schema: schema,\r\n      container: holder,\r\n      path: this.path+'.'+i,\r\n      parent: this,\r\n      required: true\r\n    });\r\n    ret.preBuild();\r\n    ret.build();\r\n    ret.postBuild();\r\n\r\n    if(!ret.title_controls) {\r\n      ret.array_controls = this.theme.getButtonHolder();\r\n      holder.appendChild(ret.array_controls);\r\n    }\r\n\r\n    return ret;\r\n  },\r\n  destroy: function() {\r\n    this.empty(true);\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.row_holder && this.row_holder.parentNode) this.row_holder.parentNode.removeChild(this.row_holder);\r\n    if(this.controls && this.controls.parentNode) this.controls.parentNode.removeChild(this.controls);\r\n    if(this.panel && this.panel.parentNode) this.panel.parentNode.removeChild(this.panel);\r\n\r\n    this.rows = this.row_cache = this.title = this.description = this.row_holder = this.panel = this.controls = null;\r\n\r\n    this._super();\r\n  },\r\n  empty: function(hard) {\r\n    if(!this.rows) return;\r\n    var self = this;\r\n    $each(this.rows,function(i,row) {\r\n      if(hard) {\r\n        if(row.tab && row.tab.parentNode) row.tab.parentNode.removeChild(row.tab);\r\n        self.destroyRow(row,true);\r\n        self.row_cache[i] = null;\r\n      }\r\n      self.rows[i] = null;\r\n    });\r\n    self.rows = [];\r\n    if(hard) self.row_cache = [];\r\n  },\r\n  destroyRow: function(row,hard) {\r\n    var holder = row.container;\r\n    if(hard) {\r\n      row.destroy();\r\n      if(holder.parentNode) holder.parentNode.removeChild(holder);\r\n      if(row.tab && row.tab.parentNode) row.tab.parentNode.removeChild(row.tab);\r\n    }\r\n    else {\r\n      if(row.tab) row.tab.style.display = 'none';\r\n      holder.style.display = 'none';\r\n      row.unregister();\r\n    }\r\n  },\r\n  getMax: function() {\r\n    if((Array.isArray(this.schema.items)) && this.schema.additionalItems === false) {\r\n      return Math.min(this.schema.items.length,this.schema.maxItems || Infinity);\r\n    }\r\n    else {\r\n      return this.schema.maxItems || Infinity;\r\n    }\r\n  },\r\n  refreshTabs: function(refresh_headers) {\r\n    var self = this;\r\n    $each(this.rows, function(i,row) {\r\n      if(!row.tab) return;\r\n\r\n      if(refresh_headers) {\r\n        row.tab_text.textContent = row.getHeaderText();\r\n      }\r\n      else {\r\n        if(row.tab === self.active_tab) {\r\n          self.theme.markTabActive(row);\r\n        }\r\n        else {\r\n          self.theme.markTabInactive(row);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  setValue: function(value, initial) {\r\n    // Update the array's value, adding/removing rows when necessary\r\n    value = value || [];\r\n\r\n    if(!(Array.isArray(value))) value = [value];\r\n\r\n    var serialized = JSON.stringify(value);\r\n    if(serialized === this.serialized) return;\r\n\r\n    // Make sure value has between minItems and maxItems items in it\r\n    if(this.schema.minItems) {\r\n      while(value.length < this.schema.minItems) {\r\n        value.push(this.getItemInfo(value.length)[\"default\"]);\r\n      }\r\n    }\r\n    if(this.getMax() && value.length > this.getMax()) {\r\n      value = value.slice(0,this.getMax());\r\n    }\r\n\r\n    var self = this;\r\n    $each(value,function(i,val) {\r\n      if(self.rows[i]) {\r\n        // TODO: don't set the row's value if it hasn't changed\r\n        self.rows[i].setValue(val,initial);\r\n      }\r\n      else if(self.row_cache[i]) {\r\n        self.rows[i] = self.row_cache[i];\r\n        self.rows[i].setValue(val,initial);\r\n        self.rows[i].container.style.display = '';\r\n        if(self.rows[i].tab) self.rows[i].tab.style.display = '';\r\n        self.rows[i].register();\r\n      }\r\n      else {\r\n        self.addRow(val,initial);\r\n      }\r\n    });\r\n\r\n    for(var j=value.length; j<self.rows.length; j++) {\r\n      self.destroyRow(self.rows[j]);\r\n      self.rows[j] = null;\r\n    }\r\n    self.rows = self.rows.slice(0,value.length);\r\n\r\n    // Set the active tab\r\n    var new_active_tab = null;\r\n    $each(self.rows, function(i,row) {\r\n      if(row.tab === self.active_tab) {\r\n        new_active_tab = row.tab;\r\n        return false;\r\n      }\r\n    });\r\n    if(!new_active_tab && self.rows.length) new_active_tab = self.rows[0].tab;\r\n\r\n    self.active_tab = new_active_tab;\r\n\r\n    self.refreshValue(initial);\r\n    self.refreshTabs(true);\r\n    self.refreshTabs();\r\n\r\n    self.onChange();\r\n\r\n    // TODO: sortable\r\n  },\r\n  refreshValue: function(force) {\r\n    var self = this;\r\n    var oldi = this.value? this.value.length : 0;\r\n    this.value = [];\r\n\r\n    $each(this.rows,function(i,editor) {\r\n      // Get the value for this editor\r\n      self.value[i] = editor.getValue();\r\n    });\r\n\r\n    if(oldi !== this.value.length || force) {\r\n      // If we currently have minItems items in the array\r\n      var minItems = this.schema.minItems && this.schema.minItems >= this.rows.length;\r\n\r\n      $each(this.rows,function(i,editor) {\r\n        // Hide the move down button for the last row\r\n        if(editor.movedown_button) {\r\n          if(i === self.rows.length - 1) {\r\n            editor.movedown_button.style.display = 'none';\r\n          }\r\n          else {\r\n            editor.movedown_button.style.display = '';\r\n          }\r\n        }\r\n\r\n        // Hide the delete button if we have minItems items\r\n        if(editor.delete_button) {\r\n          if(minItems) {\r\n            editor.delete_button.style.display = 'none';\r\n          }\r\n          else {\r\n            editor.delete_button.style.display = '';\r\n          }\r\n        }\r\n\r\n        // Get the value for this editor\r\n        self.value[i] = editor.getValue();\r\n      });\r\n\r\n      var controls_needed = false;\r\n\r\n      if(!this.value.length) {\r\n        this.delete_last_row_button.style.display = 'none';\r\n        this.remove_all_rows_button.style.display = 'none';\r\n      }\r\n      else if(this.value.length === 1) {\r\n        this.remove_all_rows_button.style.display = 'none';\r\n\r\n        // If there are minItems items in the array, or configured to hide the delete_last_row button, hide the delete button beneath the rows\r\n        if(minItems || this.hide_delete_last_row_buttons) {\r\n          this.delete_last_row_button.style.display = 'none';\r\n        }\r\n        else {\r\n          this.delete_last_row_button.style.display = '';\r\n          controls_needed = true;\r\n        }\r\n      }\r\n      else {\r\n        if(minItems || this.hide_delete_last_row_buttons) {\r\n          this.delete_last_row_button.style.display = 'none';\r\n        }\r\n        else {\r\n          this.delete_last_row_button.style.display = '';\r\n          controls_needed = true;\r\n        }\r\n\r\n        if(minItems || this.hide_delete_all_rows_buttons) {\r\n          this.remove_all_rows_button.style.display = 'none';\r\n        }\r\n        else {\r\n          this.remove_all_rows_button.style.display = '';\r\n          controls_needed = true;\r\n        }\r\n      }\r\n\r\n      // If there are maxItems in the array, hide the add button beneath the rows\r\n      if((this.getMax() && this.getMax() <= this.rows.length) || this.hide_add_button){\r\n        this.add_row_button.style.display = 'none';\r\n      }\r\n      else {\r\n        this.add_row_button.style.display = '';\r\n        controls_needed = true;\r\n      }\r\n\r\n      if(!this.collapsed && controls_needed) {\r\n        this.controls.style.display = 'inline-block';\r\n      }\r\n      else {\r\n        this.controls.style.display = 'none';\r\n      }\r\n    }\r\n  },\r\n  addRow: function(value, initial) {\r\n    var self = this;\r\n    var i = this.rows.length;\r\n\r\n    self.rows[i] = this.getElementEditor(i);\r\n    self.row_cache[i] = self.rows[i];\r\n\r\n    if(self.tabs_holder) {\r\n      self.rows[i].tab_text = document.createElement('span');\r\n      self.rows[i].tab_text.textContent = self.rows[i].getHeaderText();\r\n      if(self.schema.format === 'tabs-top'){\r\n        self.rows[i].tab = self.theme.getTopTab(self.rows[i].tab_text,this.getValidId(self.rows[i].path));\r\n        self.theme.addTopTab(self.tabs_holder, self.rows[i].tab);\r\n      }\r\n      else {\r\n        self.rows[i].tab = self.theme.getTab(self.rows[i].tab_text,this.getValidId(self.rows[i].path));\r\n        self.theme.addTab(self.tabs_holder, self.rows[i].tab);\r\n      }\r\n      self.rows[i].tab.addEventListener('click', function(e) {\r\n        self.active_tab = self.rows[i].tab;\r\n        self.refreshTabs();\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      });\r\n\r\n    }\r\n\r\n    var controls_holder = self.rows[i].title_controls || self.rows[i].array_controls;\r\n\r\n    // Buttons to delete row, move row up, and move row down\r\n    if(!self.hide_delete_buttons) {\r\n      self.rows[i].delete_button = this.getButton(self.getItemTitle(),'delete',this.translate('button_delete_row_title',[self.getItemTitle()]));\r\n      self.rows[i].delete_button.classList.add('delete', 'json-editor-btntype-delete');\r\n      self.rows[i].delete_button.setAttribute('data-i',i);\r\n      self.rows[i].delete_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (!self.askConfirmation()) {\r\n          return false;\r\n        }\r\n\r\n        var i = this.getAttribute('data-i')*1;\r\n        var value = self.getValue();\r\n        var newval = [];\r\n        var new_active_tab = null;\r\n\r\n        $each(value,function(j,row) {\r\n          if(j !== i) {\r\n            newval.push(row);\r\n          }\r\n        });\r\n\r\n        self.empty(true);\r\n        self.setValue(newval);\r\n\r\n        if (self.rows[i]) {\r\n          new_active_tab = self.rows[i].tab;\r\n        } else if (self.rows[i-1]) {\r\n          new_active_tab = self.rows[i-1].tab;\r\n        }\r\n\r\n        if(new_active_tab) {\r\n          self.active_tab = new_active_tab;\r\n          self.refreshTabs();\r\n        }\r\n\r\n        self.onChange(true);\r\n        self.jsoneditor.trigger('deleteRow');\r\n      });\r\n\r\n      if(controls_holder) {\r\n        controls_holder.appendChild(self.rows[i].delete_button);\r\n      }\r\n    }\r\n\r\n\t//Button to copy an array element and add it as last element\r\n\tif(self.show_copy_button){\r\n        self.rows[i].copy_button = this.getButton(self.getItemTitle(),'copy','Copy '+self.getItemTitle());\r\n        self.rows[i].copy_button.classList.add('copy', 'json-editor-btntype-copy');\r\n        self.rows[i].copy_button.setAttribute('data-i',i);\r\n        self.rows[i].copy_button.addEventListener('click',function(e) {\r\n            var value = self.getValue();\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var i = this.getAttribute('data-i')*1;\r\n\r\n            $each(value,function(j,row) {\r\n              if(j===i) {\r\n                value.push(row);\r\n              }\r\n            });\r\n\r\n            self.setValue(value);\r\n            self.refreshValue(true);\r\n            self.onChange(true);\r\n\r\n        });\r\n\r\n        controls_holder.appendChild(self.rows[i].copy_button);\r\n    }\r\n\r\n\r\n    if(i && !self.hide_move_buttons) {\r\n      self.rows[i].moveup_button = this.getButton('','moveup',this.translate('button_move_up_title'));\r\n      self.rows[i].moveup_button.classList.add('moveup', 'json-editor-btntype-move');\r\n      self.rows[i].moveup_button.setAttribute('data-i',i);\r\n      self.rows[i].moveup_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        var i = this.getAttribute('data-i')*1;\r\n\r\n        if(i<=0) return;\r\n        var rows = self.getValue();\r\n        var tmp = rows[i-1];\r\n        rows[i-1] = rows[i];\r\n        rows[i] = tmp;\r\n\r\n        self.setValue(rows);\r\n        self.active_tab = self.rows[i-1].tab;\r\n        self.refreshTabs();\r\n\r\n        self.onChange(true);\r\n\r\n        self.jsoneditor.trigger('moveRow');\r\n      });\r\n\r\n      if(controls_holder) {\r\n        controls_holder.appendChild(self.rows[i].moveup_button);\r\n      }\r\n    }\r\n\r\n    if(!self.hide_move_buttons) {\r\n      self.rows[i].movedown_button = this.getButton('','movedown',this.translate('button_move_down_title'));\r\n      self.rows[i].movedown_button.classList.add('movedown', 'json-editor-btntype-move');\r\n      self.rows[i].movedown_button.setAttribute('data-i',i);\r\n      self.rows[i].movedown_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        var i = this.getAttribute('data-i')*1;\r\n\r\n        var rows = self.getValue();\r\n        if(i>=rows.length-1) return;\r\n        var tmp = rows[i+1];\r\n        rows[i+1] = rows[i];\r\n        rows[i] = tmp;\r\n\r\n        self.setValue(rows);\r\n        self.active_tab = self.rows[i+1].tab;\r\n        self.refreshTabs();\r\n        self.onChange(true);\r\n\r\n        self.jsoneditor.trigger('moveRow');\r\n      });\r\n\r\n      if(controls_holder) {\r\n        controls_holder.appendChild(self.rows[i].movedown_button);\r\n      }\r\n    }\r\n\r\n    if(value) self.rows[i].setValue(value, initial);\r\n    self.refreshTabs();\r\n  },\r\n  addControls: function() {\r\n    var self = this;\r\n\r\n    this.collapsed = false;\r\n    this.toggle_button = this.getButton('','collapse',this.translate('button_collapse'));\r\n    this.toggle_button.classList.add('json-editor-btntype-toggle');\r\n    this.title_controls.appendChild(this.toggle_button);\r\n    var row_holder_display = self.row_holder.style.display;\r\n    var controls_display = self.controls.style.display;\r\n    this.toggle_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if(self.collapsed) {\r\n        self.collapsed = false;\r\n        if(self.panel) self.panel.style.display = '';\r\n        self.row_holder.style.display = row_holder_display;\r\n        if(self.tabs_holder) self.tabs_holder.style.display = '';\r\n        self.controls.style.display = controls_display;\r\n        self.setButtonText(this,'','collapse',self.translate('button_collapse'));\r\n      }\r\n      else {\r\n        self.collapsed = true;\r\n        self.row_holder.style.display = 'none';\r\n        if(self.tabs_holder) self.tabs_holder.style.display = 'none';\r\n        self.controls.style.display = 'none';\r\n        if(self.panel) self.panel.style.display = 'none';\r\n        self.setButtonText(this,'','expand',self.translate('button_expand'));\r\n      }\r\n    });\r\n\r\n    // If it should start collapsed\r\n    if(this.options.collapsed) {\r\n      $trigger(this.toggle_button,'click');\r\n    }\r\n\r\n    // Collapse button disabled\r\n    if(this.schema.options && typeof this.schema.options.disable_collapse !== \"undefined\") {\r\n      if(this.schema.options.disable_collapse) this.toggle_button.style.display = 'none';\r\n    }\r\n    else if(this.jsoneditor.options.disable_collapse) {\r\n      this.toggle_button.style.display = 'none';\r\n    }\r\n\r\n    // Add \"new row\" and \"delete last\" buttons below editor\r\n    this.add_row_button = this.getButton(this.getItemTitle(),'add',this.translate('button_add_row_title',[this.getItemTitle()]));\r\n    this.add_row_button.classList.add('json-editor-btntype-add');\r\n    this.add_row_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      var i = self.rows.length;\r\n      if(self.row_cache[i]) {\r\n        self.rows[i] = self.row_cache[i];\r\n        self.rows[i].setValue(self.rows[i].getDefault(), true);\r\n        self.rows[i].container.style.display = '';\r\n        if(self.rows[i].tab) self.rows[i].tab.style.display = '';\r\n        self.rows[i].register();\r\n      }\r\n      else {\r\n        self.addRow();\r\n      }\r\n      self.active_tab = self.rows[i].tab;\r\n      self.refreshTabs();\r\n      self.refreshValue();\r\n      self.onChange(true);\r\n      self.jsoneditor.trigger('addRow');\r\n    });\r\n    self.controls.appendChild(this.add_row_button);\r\n\r\n    this.delete_last_row_button = this.getButton(this.translate('button_delete_last',[this.getItemTitle()]),'delete',this.translate('button_delete_last_title',[this.getItemTitle()]));\r\n    this.delete_last_row_button.classList.add('json-editor-btntype-deletelast');\r\n    this.delete_last_row_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (!self.askConfirmation()) {\r\n        return false;\r\n      }\r\n\r\n      var rows = self.getValue();\r\n      var new_active_tab = null;\r\n\r\n      rows.pop();\r\n      self.empty(true);\r\n      self.setValue(rows);\r\n\r\n      if (self.rows[self.rows.length-1]) {\r\n        new_active_tab = self.rows[self.rows.length-1].tab;\r\n      }\r\n\r\n      if(new_active_tab) {\r\n        self.active_tab = new_active_tab;\r\n        self.refreshTabs();\r\n      }\r\n\r\n      self.onChange(true);\r\n      self.jsoneditor.trigger('deleteRow');\r\n    });\r\n    self.controls.appendChild(this.delete_last_row_button);\r\n\r\n    this.remove_all_rows_button = this.getButton(this.translate('button_delete_all'),'delete',this.translate('button_delete_all_title'));\r\n    this.remove_all_rows_button.classList.add('json-editor-btntype-deleteall');\r\n    this.remove_all_rows_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (!self.askConfirmation()) {\r\n        return false;\r\n      }\r\n\r\n      self.empty(true);\r\n      self.setValue([]);\r\n      self.onChange(true);\r\n      self.jsoneditor.trigger('deleteAllRows');\r\n    });\r\n    self.controls.appendChild(this.remove_all_rows_button);\r\n\r\n    if(self.tabs) {\r\n      this.add_row_button.style.width = '100%';\r\n      this.add_row_button.style.textAlign = 'left';\r\n      this.add_row_button.style.marginBottom = '3px';\r\n\r\n      this.delete_last_row_button.style.width = '100%';\r\n      this.delete_last_row_button.style.textAlign = 'left';\r\n      this.delete_last_row_button.style.marginBottom = '3px';\r\n\r\n      this.remove_all_rows_button.style.width = '100%';\r\n      this.remove_all_rows_button.style.textAlign = 'left';\r\n      this.remove_all_rows_button.style.marginBottom = '3px';\r\n    }\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    var self = this;\r\n\r\n    // Get all the errors that pertain to this editor\r\n    var my_errors = [];\r\n    var other_errors = [];\r\n    $each(errors, function(i,error) {\r\n      if(error.path === self.path) {\r\n        my_errors.push(error);\r\n      }\r\n      else {\r\n        other_errors.push(error);\r\n      }\r\n    });\r\n\r\n    // Show errors for this editor\r\n    if(this.error_holder) {\r\n      if(my_errors.length) {\r\n        var message = [];\r\n        this.error_holder.innerHTML = '';\r\n        this.error_holder.style.display = '';\r\n        $each(my_errors, function(i,error) {\r\n          self.error_holder.appendChild(self.theme.getErrorMessage(error.message));\r\n        });\r\n      }\r\n      // Hide error area\r\n      else {\r\n        this.error_holder.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    // Show errors for child editors\r\n    $each(this.rows, function(i,row) {\r\n      row.showValidationErrors(other_errors);\r\n    });\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.table = JSONEditor.defaults.editors.array.extend({\r\n  register: function() {\r\n    this._super();\r\n    if(this.rows) {\r\n      for(var i=0; i<this.rows.length; i++) {\r\n        this.rows[i].register();\r\n      }\r\n    }\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(this.rows) {\r\n      for(var i=0; i<this.rows.length; i++) {\r\n        this.rows[i].unregister();\r\n      }\r\n    }\r\n  },\r\n  getNumColumns: function() {\r\n    return Math.max(Math.min(12,this.width),3);\r\n  },\r\n  preBuild: function() {\r\n    var item_schema = this.jsoneditor.expandRefs(this.schema.items || {});\r\n\r\n    this.item_title = item_schema.title || 'row';\r\n    this.item_default = item_schema[\"default\"] || null;\r\n    this.item_has_child_editors = item_schema.properties || item_schema.items;\r\n    this.width = 12;\r\n    this._super();\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    this.table = this.theme.getTable();\r\n    this.container.appendChild(this.table);\r\n    this.thead = this.theme.getTableHead();\r\n    this.table.appendChild(this.thead);\r\n    this.header_row = this.theme.getTableRow();\r\n    this.thead.appendChild(this.header_row);\r\n    this.row_holder = this.theme.getTableBody();\r\n    this.table.appendChild(this.row_holder);\r\n\r\n    // Determine the default value of array element\r\n    var tmp = this.getElementEditor(0,true);\r\n    this.item_default = tmp.getDefault();\r\n    this.width = tmp.getNumColumns() + 2;\r\n\r\n    if(!this.options.compact) {\r\n      this.title = this.theme.getHeader(this.getTitle());\r\n      this.container.appendChild(this.title);\r\n      this.title_controls = this.theme.getHeaderButtonHolder();\r\n      this.title.appendChild(this.title_controls);\r\n      if(this.schema.description) {\r\n        this.description = this.theme.getDescription(this.schema.description);\r\n        this.container.appendChild(this.description);\r\n      }\r\n      this.panel = this.theme.getIndentedPanel();\r\n      this.container.appendChild(this.panel);\r\n      this.error_holder = document.createElement('div');\r\n      this.panel.appendChild(this.error_holder);\r\n    }\r\n    else {\r\n      this.panel = document.createElement('div');\r\n      this.container.appendChild(this.panel);\r\n    }\r\n\r\n    this.panel.appendChild(this.table);\r\n    this.controls = this.theme.getButtonHolder();\r\n    this.panel.appendChild(this.controls);\r\n\r\n    if(this.item_has_child_editors) {\r\n      var ce = tmp.getChildEditors();\r\n      var order = tmp.property_order || Object.keys(ce);\r\n      for(var i=0; i<order.length; i++) {\r\n        var th = self.theme.getTableHeaderCell(ce[order[i]].getTitle());\r\n        if(ce[order[i]].options.hidden) th.style.display = 'none';\r\n        self.header_row.appendChild(th);\r\n      }\r\n    }\r\n    else {\r\n      self.header_row.appendChild(self.theme.getTableHeaderCell(this.item_title));\r\n    }\r\n\r\n    tmp.destroy();\r\n    this.row_holder.innerHTML = '';\r\n\r\n    // Row Controls column\r\n    this.controls_header_cell = self.theme.getTableHeaderCell(\" \");\r\n    self.header_row.appendChild(this.controls_header_cell);\r\n\r\n    // Add controls\r\n    this.addControls();\r\n  },\r\n  onChildEditorChange: function(editor) {\r\n    this.refreshValue();\r\n    this._super();\r\n  },\r\n  getItemDefault: function() {\r\n    return $extend({},{\"default\":this.item_default})[\"default\"];\r\n  },\r\n  getItemTitle: function() {\r\n    return this.item_title;\r\n  },\r\n  getElementEditor: function(i,ignore) {\r\n    var schema_copy = $extend({},this.schema.items);\r\n    var editor = this.jsoneditor.getEditorClass(schema_copy, this.jsoneditor);\r\n    var row = this.row_holder.appendChild(this.theme.getTableRow());\r\n    var holder = row;\r\n    if(!this.item_has_child_editors) {\r\n      holder = this.theme.getTableCell();\r\n      row.appendChild(holder);\r\n    }\r\n\r\n    var ret = this.jsoneditor.createEditor(editor,{\r\n      jsoneditor: this.jsoneditor,\r\n      schema: schema_copy,\r\n      container: holder,\r\n      path: this.path+'.'+i,\r\n      parent: this,\r\n      compact: true,\r\n      table_row: true\r\n    });\r\n\r\n    ret.preBuild();\r\n    if(!ignore) {\r\n      ret.build();\r\n      ret.postBuild();\r\n\r\n      ret.controls_cell = row.appendChild(this.theme.getTableCell());\r\n      ret.row = row;\r\n      ret.table_controls = this.theme.getButtonHolder();\r\n      ret.controls_cell.appendChild(ret.table_controls);\r\n      ret.table_controls.style.margin = 0;\r\n      ret.table_controls.style.padding = 0;\r\n    }\r\n\r\n    return ret;\r\n  },\r\n  destroy: function() {\r\n    this.innerHTML = '';\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.row_holder && this.row_holder.parentNode) this.row_holder.parentNode.removeChild(this.row_holder);\r\n    if(this.table && this.table.parentNode) this.table.parentNode.removeChild(this.table);\r\n    if(this.panel && this.panel.parentNode) this.panel.parentNode.removeChild(this.panel);\r\n\r\n    this.rows = this.title = this.description = this.row_holder = this.table = this.panel = null;\r\n\r\n    this._super();\r\n  },\r\n  setValue: function(value, initial) {\r\n    // Update the array's value, adding/removing rows when necessary\r\n    value = value || [];\r\n\r\n    // Make sure value has between minItems and maxItems items in it\r\n    if(this.schema.minItems) {\r\n      while(value.length < this.schema.minItems) {\r\n        value.push(this.getItemDefault());\r\n      }\r\n    }\r\n    if(this.schema.maxItems && value.length > this.schema.maxItems) {\r\n      value = value.slice(0,this.schema.maxItems);\r\n    }\r\n\r\n    var serialized = JSON.stringify(value);\r\n    if(serialized === this.serialized) return;\r\n\r\n    var numrows_changed = false;\r\n\r\n    var self = this;\r\n    $each(value,function(i,val) {\r\n      if(self.rows[i]) {\r\n        // TODO: don't set the row's value if it hasn't changed\r\n        self.rows[i].setValue(val);\r\n      }\r\n      else {\r\n        self.addRow(val);\r\n        numrows_changed = true;\r\n      }\r\n    });\r\n\r\n    for(var j=value.length; j<self.rows.length; j++) {\r\n      var holder = self.rows[j].container;\r\n      if(!self.item_has_child_editors) {\r\n        self.rows[j].row.parentNode.removeChild(self.rows[j].row);\r\n      }\r\n      self.rows[j].destroy();\r\n      if(holder.parentNode) holder.parentNode.removeChild(holder);\r\n      self.rows[j] = null;\r\n      numrows_changed = true;\r\n    }\r\n    self.rows = self.rows.slice(0,value.length);\r\n\r\n    self.refreshValue();\r\n    if(numrows_changed || initial) self.refreshRowButtons();\r\n\r\n    self.onChange();\r\n\r\n    // TODO: sortable\r\n  },\r\n  refreshRowButtons: function() {\r\n    var self = this;\r\n\r\n    // If we currently have minItems items in the array\r\n    var minItems = this.schema.minItems && this.schema.minItems >= this.rows.length;\r\n\r\n    var need_row_buttons = false;\r\n    $each(this.rows,function(i,editor) {\r\n      // Hide the move down button for the last row\r\n      if(editor.movedown_button) {\r\n        if(i === self.rows.length - 1) {\r\n          editor.movedown_button.style.display = 'none';\r\n        }\r\n        else {\r\n          need_row_buttons = true;\r\n          editor.movedown_button.style.display = '';\r\n        }\r\n      }\r\n\r\n      // Hide the delete button if we have minItems items\r\n      if(editor.delete_button) {\r\n        if(minItems) {\r\n          editor.delete_button.style.display = 'none';\r\n        }\r\n        else {\r\n          need_row_buttons = true;\r\n          editor.delete_button.style.display = '';\r\n        }\r\n      }\r\n\r\n      if(editor.moveup_button) {\r\n        need_row_buttons = true;\r\n      }\r\n    });\r\n\r\n    // Show/hide controls column in table\r\n    $each(this.rows,function(i,editor) {\r\n      if(need_row_buttons) {\r\n        editor.controls_cell.style.display = '';\r\n      }\r\n      else {\r\n        editor.controls_cell.style.display = 'none';\r\n      }\r\n    });\r\n    if(need_row_buttons) {\r\n      this.controls_header_cell.style.display = '';\r\n    }\r\n    else {\r\n      this.controls_header_cell.style.display = 'none';\r\n    }\r\n\r\n    var controls_needed = false;\r\n\r\n    if(!this.value.length) {\r\n      this.delete_last_row_button.style.display = 'none';\r\n      this.remove_all_rows_button.style.display = 'none';\r\n      this.table.style.display = 'none';\r\n    }\r\n    else if(this.value.length === 1) {\r\n      this.table.style.display = '';\r\n      this.remove_all_rows_button.style.display = 'none';\r\n\r\n      // If there are minItems items in the array, or configured to hide the delete_last_row button, hide the delete button beneath the rows\r\n      if(minItems || this.hide_delete_last_row_buttons) {\r\n        this.delete_last_row_button.style.display = 'none';\r\n      }\r\n      else {\r\n        this.delete_last_row_button.style.display = '';\r\n        controls_needed = true;\r\n      }\r\n    }\r\n    else {\r\n      this.table.style.display = '';\r\n\r\n      if(minItems || this.hide_delete_last_row_buttons) {\r\n        this.delete_last_row_button.style.display = 'none';\r\n      }\r\n      else {\r\n        this.delete_last_row_button.style.display = '';\r\n        controls_needed = true;\r\n      }\r\n\r\n      if(minItems || this.hide_delete_all_rows_buttons) {\r\n        this.remove_all_rows_button.style.display = 'none';\r\n      }\r\n      else {\r\n        this.remove_all_rows_button.style.display = '';\r\n        controls_needed = true;\r\n      }\r\n    }\r\n\r\n    // If there are maxItems in the array, hide the add button beneath the rows\r\n    if((this.schema.maxItems && this.schema.maxItems <= this.rows.length) || this.hide_add_button) {\r\n      this.add_row_button.style.display = 'none';\r\n    }\r\n    else {\r\n      this.add_row_button.style.display = '';\r\n      controls_needed = true;\r\n    }\r\n\r\n    if(!controls_needed) {\r\n      this.controls.style.display = 'none';\r\n    }\r\n    else {\r\n      this.controls.style.display = '';\r\n    }\r\n  },\r\n  refreshValue: function() {\r\n    var self = this;\r\n    this.value = [];\r\n\r\n    $each(this.rows,function(i,editor) {\r\n      // Get the value for this editor\r\n      self.value[i] = editor.getValue();\r\n    });\r\n    this.serialized = JSON.stringify(this.value);\r\n  },\r\n  addRow: function(value) {\r\n    var self = this;\r\n    var i = this.rows.length;\r\n\r\n    self.rows[i] = this.getElementEditor(i);\r\n\r\n    var controls_holder = self.rows[i].table_controls;\r\n\r\n    // Buttons to delete row, move row up, and move row down\r\n    if(!this.hide_delete_buttons) {\r\n      self.rows[i].delete_button = this.getButton('','delete',this.translate('button_delete_row_title_short'));\r\n      self.rows[i].delete_button.classList.add('delete','json-editor-btntype-delete');\r\n      self.rows[i].delete_button.setAttribute('data-i',i);\r\n      self.rows[i].delete_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (!self.askConfirmation()) {\r\n          return false;\r\n        }\r\n\r\n        var i = this.getAttribute('data-i')*1;\r\n\r\n        var value = self.getValue();\r\n\r\n        var newval = [];\r\n        $each(value,function(j,row) {\r\n          if(j===i) return; // If this is the one we're deleting\r\n          newval.push(row);\r\n        });\r\n        self.setValue(newval);\r\n        self.onChange(true);\r\n      });\r\n      controls_holder.appendChild(self.rows[i].delete_button);\r\n    }\r\n\r\n\r\n    if(i && !this.hide_move_buttons) {\r\n      self.rows[i].moveup_button = this.getButton('','moveup',this.translate('button_move_up_title'));\r\n      self.rows[i].moveup_button.classList.add('moveup','json-editor-btntype-move');\r\n      self.rows[i].moveup_button.setAttribute('data-i',i);\r\n      self.rows[i].moveup_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        var i = this.getAttribute('data-i')*1;\r\n\r\n        if(i<=0) return;\r\n        var rows = self.getValue();\r\n        var tmp = rows[i-1];\r\n        rows[i-1] = rows[i];\r\n        rows[i] = tmp;\r\n\r\n        self.setValue(rows);\r\n        self.onChange(true);\r\n      });\r\n      controls_holder.appendChild(self.rows[i].moveup_button);\r\n    }\r\n\r\n    if(!this.hide_move_buttons) {\r\n      self.rows[i].movedown_button = this.getButton('','movedown',this.translate('button_move_down_title'));\r\n      self.rows[i].movedown_button.classList.add('movedown','json-editor-btntype-move');\r\n      self.rows[i].movedown_button.setAttribute('data-i',i);\r\n      self.rows[i].movedown_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        var i = this.getAttribute('data-i')*1;\r\n        var rows = self.getValue();\r\n        if(i>=rows.length-1) return;\r\n        var tmp = rows[i+1];\r\n        rows[i+1] = rows[i];\r\n        rows[i] = tmp;\r\n\r\n        self.setValue(rows);\r\n        self.onChange(true);\r\n      });\r\n      controls_holder.appendChild(self.rows[i].movedown_button);\r\n    }\r\n\r\n    if(value) self.rows[i].setValue(value);\r\n  },\r\n  addControls: function() {\r\n    var self = this;\r\n\r\n    this.collapsed = false;\r\n    this.toggle_button = this.getButton('','collapse',this.translate('button_collapse'));\r\n    this.toggle_button.classList.add('json-editor-btntype-toggle');\r\n    if(this.title_controls) {\r\n      this.title_controls.appendChild(this.toggle_button);\r\n      this.toggle_button.addEventListener('click',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if(self.collapsed) {\r\n          self.collapsed = false;\r\n          self.panel.style.display = '';\r\n          self.setButtonText(this,'','collapse',self.translate('button_collapse'));\r\n        }\r\n        else {\r\n          self.collapsed = true;\r\n          self.panel.style.display = 'none';\r\n          self.setButtonText(this,'','expand',self.translate('button_expand'));\r\n        }\r\n      });\r\n\r\n      // If it should start collapsed\r\n      if(this.options.collapsed) {\r\n        $trigger(this.toggle_button,'click');\r\n      }\r\n\r\n      // Collapse button disabled\r\n      if(this.schema.options && typeof this.schema.options.disable_collapse !== \"undefined\") {\r\n        if(this.schema.options.disable_collapse) this.toggle_button.style.display = 'none';\r\n      }\r\n      else if(this.jsoneditor.options.disable_collapse) {\r\n        this.toggle_button.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    // Add \"new row\" and \"delete last\" buttons below editor\r\n    this.add_row_button = this.getButton(this.getItemTitle(),'add',this.translate('button_add_row_title',[this.getItemTitle()]));\r\n    this.add_row_button.classList.add('json-editor-btntype-add');\r\n    this.add_row_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      self.addRow();\r\n      self.refreshValue();\r\n      self.refreshRowButtons();\r\n      self.onChange(true);\r\n    });\r\n    self.controls.appendChild(this.add_row_button);\r\n\r\n    this.delete_last_row_button = this.getButton(this.translate('button_delete_last',[this.getItemTitle()]),'delete',this.translate('button_delete_last_title',[this.getItemTitle()]));\r\n    this.delete_last_row_button.classList.add('json-editor-btntype-deletelast');\r\n    this.delete_last_row_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (!self.askConfirmation()) {\r\n        return false;\r\n      }\r\n\r\n      var rows = self.getValue();\r\n      rows.pop();\r\n      self.setValue(rows);\r\n      self.onChange(true);\r\n    });\r\n    self.controls.appendChild(this.delete_last_row_button);\r\n\r\n    this.remove_all_rows_button = this.getButton(this.translate('button_delete_all'),'delete',this.translate('button_delete_all_title'));\r\n    this.remove_all_rows_button.classList.add('json-editor-btntype-deleteall');\r\n    this.remove_all_rows_button.addEventListener('click',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (!self.askConfirmation()) {\r\n        return false;\r\n      }\r\n\r\n      self.setValue([]);\r\n      self.onChange(true);\r\n    });\r\n    self.controls.appendChild(this.remove_all_rows_button);\r\n  }\r\n});\r\n\r\n// Multiple Editor (for when `type` is an array, also when `oneOf` is present)\r\nJSONEditor.defaults.editors.multiple = JSONEditor.AbstractEditor.extend({\r\n  register: function() {\r\n    if(this.editors) {\r\n      for(var i=0; i<this.editors.length; i++) {\r\n        if(!this.editors[i]) continue;\r\n        this.editors[i].unregister();\r\n      }\r\n      if(this.editors[this.type]) this.editors[this.type].register();\r\n    }\r\n    this._super();\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(this.editors) {\r\n      for(var i=0; i<this.editors.length; i++) {\r\n        if(!this.editors[i]) continue;\r\n        this.editors[i].unregister();\r\n      }\r\n    }\r\n  },\r\n  getNumColumns: function() {\r\n    if(!this.editors[this.type]) return 4;\r\n    return Math.max(this.editors[this.type].getNumColumns(),4);\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.editors) {\r\n        for(var i=0; i<this.editors.length; i++) {\r\n          if(!this.editors[i]) continue;\r\n          this.editors[i].enable();\r\n        }\r\n      }\r\n      this.switcher.disabled = false;\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.editors) {\r\n      for(var i=0; i<this.editors.length; i++) {\r\n        if(!this.editors[i]) continue;\r\n        this.editors[i].disable(always_disabled);\r\n      }\r\n    }\r\n    this.switcher.disabled = true;\r\n    this._super();\r\n  },\r\n  switchEditor: function(i) {\r\n    var self = this;\r\n\r\n    if(!this.editors[i]) {\r\n      this.buildChildEditor(i);\r\n    }\r\n    \r\n    var current_value = self.getValue();\r\n\r\n    self.type = i;\r\n\r\n    self.register();\r\n\r\n    $each(self.editors,function(type,editor) {\r\n      if(!editor) return;\r\n      if(self.type === type) {\r\n        if(self.keep_values) editor.setValue(current_value,true);\r\n        editor.container.style.display = '';\r\n      }\r\n      else editor.container.style.display = 'none';\r\n    });\r\n    self.refreshValue();\r\n    self.refreshHeaderText();\r\n  },\r\n  buildChildEditor: function(i) {\r\n    var self = this;\r\n    var type = this.types[i];\r\n    var holder = self.theme.getChildEditorHolder();\r\n    self.editor_holder.appendChild(holder);\r\n\r\n    var schema;\r\n\r\n    if(typeof type === \"string\") {\r\n      schema = $extend({},self.schema);\r\n      schema.type = type;\r\n    }\r\n    else {\r\n      schema = $extend({},self.schema,type);\r\n      schema = self.jsoneditor.expandRefs(schema);\r\n\r\n      // If we need to merge `required` arrays\r\n      if(type && type.required && Array.isArray(type.required) && self.schema.required && Array.isArray(self.schema.required)) {\r\n        schema.required = self.schema.required.concat(type.required);\r\n      }\r\n    }\r\n\r\n    var editor = self.jsoneditor.getEditorClass(schema);\r\n\r\n    self.editors[i] = self.jsoneditor.createEditor(editor,{\r\n      jsoneditor: self.jsoneditor,\r\n      schema: schema,\r\n      container: holder,\r\n      path: self.path,\r\n      parent: self,\r\n      required: true\r\n    });\r\n    self.editors[i].preBuild();\r\n    self.editors[i].build();\r\n    self.editors[i].postBuild();\r\n\r\n    if(self.editors[i].header) self.editors[i].header.style.display = 'none';\r\n\r\n    self.editors[i].option = self.switcher_options[i];\r\n\r\n    holder.addEventListener('change_header_text',function() {\r\n      self.refreshHeaderText();\r\n    });\r\n\r\n    if(i !== self.type) holder.style.display = 'none';\r\n  },\r\n  preBuild: function() {\r\n    var self = this;\r\n\r\n    this.types = [];\r\n    this.type = 0;\r\n    this.editors = [];\r\n    this.validators = [];\r\n\r\n    this.keep_values = true;\r\n    if(typeof this.jsoneditor.options.keep_oneof_values !== \"undefined\") this.keep_values = this.jsoneditor.options.keep_oneof_values;\r\n    if(typeof this.options.keep_oneof_values !== \"undefined\") this.keep_values = this.options.keep_oneof_values;\r\n\r\n    if(this.schema.oneOf) {\r\n      this.oneOf = true;\r\n      this.types = this.schema.oneOf;\r\n      delete this.schema.oneOf;\r\n    }\r\n    else if(this.schema.anyOf) {\r\n      this.anyOf = true;\r\n      this.types = this.schema.anyOf;\r\n      delete this.schema.anyOf;\r\n    }\r\n    else {\r\n      if(!this.schema.type || this.schema.type === \"any\") {\r\n        this.types = ['string','number','integer','boolean','object','array','null'];\r\n\r\n        // If any of these primitive types are disallowed\r\n        if(this.schema.disallow) {\r\n          var disallow = this.schema.disallow;\r\n          if(typeof disallow !== 'object' || !(Array.isArray(disallow))) {\r\n            disallow = [disallow];\r\n          }\r\n          var allowed_types = [];\r\n          $each(this.types,function(i,type) {\r\n            if(disallow.indexOf(type) === -1) allowed_types.push(type);\r\n          });\r\n          this.types = allowed_types;\r\n        }\r\n      }\r\n      else if(Array.isArray(this.schema.type)) {\r\n        this.types = this.schema.type;\r\n      }\r\n      else {\r\n        this.types = [this.schema.type];\r\n      }\r\n      delete this.schema.type;\r\n    }\r\n\r\n    this.display_text = this.getDisplayText(this.types);\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    var container = this.container;\r\n\r\n    this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    this.container.appendChild(this.header);\r\n\r\n    this.switcher = this.theme.getSwitcher(this.display_text);\r\n    container.appendChild(this.switcher);\r\n    this.switcher.addEventListener('change',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      self.switchEditor(self.display_text.indexOf(this.value));\r\n      self.onChange(true);\r\n    });\r\n\r\n    this.editor_holder = document.createElement('div');\r\n    container.appendChild(this.editor_holder);\r\n    \r\n      \r\n    var validator_options = {};\r\n    if(self.jsoneditor.options.custom_validators) {\r\n      validator_options.custom_validators = self.jsoneditor.options.custom_validators;\r\n    }\r\n\r\n    this.switcher_options = this.theme.getSwitcherOptions(this.switcher);\r\n    $each(this.types,function(i,type) {\r\n      self.editors[i] = false;\r\n\r\n      var schema;\r\n\r\n      if(typeof type === \"string\") {\r\n        schema = $extend({},self.schema);\r\n        schema.type = type;\r\n      }\r\n      else {\r\n        schema = $extend({},self.schema,type);\r\n\r\n        // If we need to merge `required` arrays\r\n        if(type.required && Array.isArray(type.required) && self.schema.required && Array.isArray(self.schema.required)) {\r\n          schema.required = self.schema.required.concat(type.required);\r\n        }\r\n      }\r\n\r\n      self.validators[i] = new JSONEditor.Validator(self.jsoneditor,schema,validator_options);\r\n    });\r\n\r\n    this.switchEditor(0);\r\n  },\r\n  onChildEditorChange: function(editor) {\r\n    if(this.editors[this.type]) {\r\n      this.refreshValue();\r\n      this.refreshHeaderText();\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  refreshHeaderText: function() {\r\n    var display_text = this.getDisplayText(this.types);\r\n    $each(this.switcher_options, function(i,option) {\r\n      option.textContent = display_text[i];\r\n    });\r\n  },\r\n  refreshValue: function() {\r\n    this.value = this.editors[this.type].getValue();\r\n  },\r\n  setValue: function(val,initial) {\r\n    // Determine type by getting the first one that validates\r\n    var self = this;\r\n    var prev_type = this.type;\r\n    $each(this.validators, function(i,validator) {\r\n      if(!validator.validate(val).length) {\r\n        self.type = i;\r\n        self.switcher.value = self.display_text[i];\r\n        return false;\r\n      }\r\n    });\r\n\r\n    var type_changed = this.type != prev_type;\r\n    if (type_changed) {\r\n\tthis.switchEditor(this.type);\r\n    }\r\n\r\n    this.editors[this.type].setValue(val,initial);\r\n\r\n    this.refreshValue();\r\n    self.onChange(type_changed);\r\n  },\r\n  destroy: function() {\r\n    $each(this.editors, function(type,editor) {\r\n      if(editor) editor.destroy();\r\n    });\r\n    if(this.editor_holder && this.editor_holder.parentNode) this.editor_holder.parentNode.removeChild(this.editor_holder);\r\n    if(this.switcher && this.switcher.parentNode) this.switcher.parentNode.removeChild(this.switcher);\r\n    this._super();\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    var self = this;\r\n\r\n    // oneOf and anyOf error paths need to remove the oneOf[i] part before passing to child editors\r\n    if(this.oneOf || this.anyOf) {\r\n      var check_part = this.oneOf? 'oneOf' : 'anyOf';\r\n      $each(this.editors,function(i,editor) {\r\n        if(!editor) return;\r\n        var check = self.path+'.'+check_part+'['+i+']';\r\n        var new_errors = [];\r\n        $each(errors, function(j,error) {\r\n          if(error.path.substr(0,check.length)===check) {\r\n            var new_error = $extend({},error);\r\n            new_error.path = self.path+new_error.path.substr(check.length);\r\n            new_errors.push(new_error);\r\n          }\r\n        });\r\n\r\n        editor.showValidationErrors(new_errors);\r\n      });\r\n    }\r\n    else {\r\n      $each(this.editors,function(type,editor) {\r\n        if(!editor) return;\r\n        editor.showValidationErrors(errors);\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\n// Enum Editor (used for objects and arrays with enumerated values)\r\nJSONEditor.defaults.editors[\"enum\"] = JSONEditor.AbstractEditor.extend({\r\n  getNumColumns: function() {\r\n    return 4;\r\n  },\r\n  build: function() {\r\n    var container = this.container;\r\n    this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    this.container.appendChild(this.title);\r\n\r\n    this.options.enum_titles = this.options.enum_titles || [];\r\n\r\n    this[\"enum\"] = this.schema[\"enum\"];\r\n    this.selected = 0;\r\n    this.select_options = [];\r\n    this.html_values = [];\r\n\r\n    var self = this;\r\n    for(var i=0; i<this[\"enum\"].length; i++) {\r\n      this.select_options[i] = this.options.enum_titles[i] || \"Value \"+(i+1);\r\n      this.html_values[i] = this.getHTML(this[\"enum\"][i]);\r\n    }\r\n\r\n    // Switcher\r\n    this.switcher = this.theme.getSwitcher(this.select_options);\r\n    this.container.appendChild(this.switcher);\r\n\r\n    // Display area\r\n    this.display_area = this.theme.getIndentedPanel();\r\n    this.container.appendChild(this.display_area);\r\n\r\n    if(this.options.hide_display) this.display_area.style.display = \"none\";\r\n\r\n    this.switcher.addEventListener('change',function() {\r\n      self.selected = self.select_options.indexOf(this.value);\r\n      self.value = self[\"enum\"][self.selected];\r\n      self.refreshValue();\r\n      self.onChange(true);\r\n    });\r\n    this.value = this[\"enum\"][0];\r\n    this.refreshValue();\r\n\r\n    if(this[\"enum\"].length === 1) this.switcher.style.display = 'none';\r\n  },\r\n  refreshValue: function() {\r\n    var self = this;\r\n    self.selected = -1;\r\n    var stringified = JSON.stringify(this.value);\r\n    $each(this[\"enum\"], function(i, el) {\r\n      if(stringified === JSON.stringify(el)) {\r\n        self.selected = i;\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if(self.selected<0) {\r\n      self.setValue(self[\"enum\"][0]);\r\n      return;\r\n    }\r\n\r\n    this.switcher.value = this.select_options[this.selected];\r\n    this.display_area.innerHTML = this.html_values[this.selected];\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      this.switcher.disabled = false;\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    this.switcher.disabled = true;\r\n    this._super();\r\n  },\r\n  getHTML: function(el) {\r\n    var self = this;\r\n\r\n    if(el === null) {\r\n      return '<em>null</em>';\r\n    }\r\n    // Array or Object\r\n    else if(typeof el === \"object\") {\r\n      // TODO: use theme\r\n      var ret = '';\r\n\r\n      $each(el,function(i,child) {\r\n        var html = self.getHTML(child);\r\n\r\n        // Add the keys to object children\r\n        if(!(Array.isArray(el))) {\r\n          // TODO: use theme\r\n          html = '<div><em>'+i+'</em>: '+html+'</div>';\r\n        }\r\n\r\n        // TODO: use theme\r\n        ret += '<li>'+html+'</li>';\r\n      });\r\n\r\n      if(Array.isArray(el)) ret = '<ol>'+ret+'</ol>';\r\n      else ret = \"<ul style='margin-top:0;margin-bottom:0;padding-top:0;padding-bottom:0;'>\"+ret+'</ul>';\r\n\r\n      return ret;\r\n    }\r\n    // Boolean\r\n    else if(typeof el === \"boolean\") {\r\n      return el? 'true' : 'false';\r\n    }\r\n    // String\r\n    else if(typeof el === \"string\") {\r\n      return el.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\r\n    }\r\n    // Number\r\n    else {\r\n      return el;\r\n    }\r\n  },\r\n  setValue: function(val) {\r\n    if(this.value !== val) {\r\n      this.value = val;\r\n      this.refreshValue();\r\n      this.onChange();\r\n    }\r\n  },\r\n  destroy: function() {\r\n    if(this.display_area && this.display_area.parentNode) this.display_area.parentNode.removeChild(this.display_area);\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.switcher && this.switcher.parentNode) this.switcher.parentNode.removeChild(this.switcher);\r\n\r\n    this._super();\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.select = JSONEditor.AbstractEditor.extend({\r\n  setValue: function(value,initial) {\r\n    value = this.typecast(value||'');\r\n\r\n    // Sanitize value before setting it\r\n    var sanitized = value;\r\n    if(this.enum_values.indexOf(sanitized) < 0) {\r\n      sanitized = this.enum_values[0];\r\n    }\r\n\r\n    if(this.value === sanitized) {\r\n      return;\r\n    }\r\n\r\n    if(initial) this.is_dirty = false;\r\n    else if(this.jsoneditor.options.show_errors === \"change\") this.is_dirty = true;\r\n\r\n    this.input.value = this.enum_options[this.enum_values.indexOf(sanitized)];\r\n    if(this.select2) {\r\n      if(this.select2v4)\r\n        this.select2.val(this.input.value).trigger(\"change\");\r\n      else\r\n        this.select2.select2('val',this.input.value);\r\n    }\r\n    this.value = sanitized;\r\n    this.onChange();\r\n    this.change();\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.setAttribute('name',this.formname);\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  getNumColumns: function() {\r\n    if(!this.enum_options) return 3;\r\n    var longest_text = this.getTitle().length;\r\n    for(var i=0; i<this.enum_options.length; i++) {\r\n      longest_text = Math.max(longest_text,this.enum_options[i].length+4);\r\n    }\r\n    return Math.min(12,Math.max(longest_text/7,2));\r\n  },\r\n  typecast: function(value) {\r\n    if(this.schema.type === \"boolean\") {\r\n      return !!value;\r\n    }\r\n    else if(this.schema.type === \"number\") {\r\n      return 1*value;\r\n    }\r\n    else if(this.schema.type === \"integer\") {\r\n      return Math.floor(value*1);\r\n    }\r\n    else {\r\n      return \"\"+value;\r\n    }\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    return this.typecast(this.value);\r\n  },\r\n  preBuild: function() {\r\n    var self = this;\r\n    this.input_type = 'select';\r\n    this.enum_options = [];\r\n    this.enum_values = [];\r\n    this.enum_display = [];\r\n    var i;\r\n\r\n    // Enum options enumerated\r\n    if(this.schema[\"enum\"]) {\r\n      var display = this.schema.options && this.schema.options.enum_titles || [];\r\n\r\n      $each(this.schema[\"enum\"],function(i,option) {\r\n        self.enum_options[i] = \"\"+option;\r\n        self.enum_display[i] = \"\"+(display[i] || option);\r\n        self.enum_values[i] = self.typecast(option);\r\n      });\r\n\r\n      if(!this.isRequired()){\r\n        self.enum_display.unshift(' ');\r\n        self.enum_options.unshift('undefined');\r\n        self.enum_values.unshift(undefined);\r\n      }\r\n\r\n    }\r\n    // Boolean\r\n    else if(this.schema.type === \"boolean\") {\r\n      self.enum_display = this.schema.options && this.schema.options.enum_titles || ['true','false'];\r\n      self.enum_options = ['1',''];\r\n      self.enum_values = [true,false];\r\n\r\n      if(!this.isRequired()){\r\n        self.enum_display.unshift(' ');\r\n        self.enum_options.unshift('undefined');\r\n        self.enum_values.unshift(undefined);\r\n      }\r\n\r\n    }\r\n    // Dynamic Enum\r\n    else if(this.schema.enumSource) {\r\n      this.enumSource = [];\r\n      this.enum_display = [];\r\n      this.enum_options = [];\r\n      this.enum_values = [];\r\n\r\n      // Shortcut declaration for using a single array\r\n      if(!(Array.isArray(this.schema.enumSource))) {\r\n        if(this.schema.enumValue) {\r\n          this.enumSource = [\r\n            {\r\n              source: this.schema.enumSource,\r\n              value: this.schema.enumValue\r\n            }\r\n          ];\r\n        }\r\n        else {\r\n          this.enumSource = [\r\n            {\r\n              source: this.schema.enumSource\r\n            }\r\n          ];\r\n        }\r\n      }\r\n      else {\r\n        for(i=0; i<this.schema.enumSource.length; i++) {\r\n          // Shorthand for watched variable\r\n          if(typeof this.schema.enumSource[i] === \"string\") {\r\n            this.enumSource[i] = {\r\n              source: this.schema.enumSource[i]\r\n            };\r\n          }\r\n          // Make a copy of the schema\r\n          else if(!(Array.isArray(this.schema.enumSource[i]))) {\r\n            this.enumSource[i] = $extend({},this.schema.enumSource[i]);\r\n          }\r\n          else {\r\n            this.enumSource[i] = this.schema.enumSource[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      // Now, enumSource is an array of sources\r\n      // Walk through this array and fix up the values\r\n      for(i=0; i<this.enumSource.length; i++) {\r\n        if(this.enumSource[i].value) {\r\n          this.enumSource[i].value = this.jsoneditor.compileTemplate(this.enumSource[i].value, this.template_engine);\r\n        }\r\n        if(this.enumSource[i].title) {\r\n          this.enumSource[i].title = this.jsoneditor.compileTemplate(this.enumSource[i].title, this.template_engine);\r\n        }\r\n        if(this.enumSource[i].filter) {\r\n          this.enumSource[i].filter = this.jsoneditor.compileTemplate(this.enumSource[i].filter, this.template_engine);\r\n        }\r\n      }\r\n    }\r\n    // Other, not supported\r\n    else {\r\n      throw \"'select' editor requires the enum property to be set.\";\r\n    }\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n    if(this.options.compact) this.container.classList.add('compact');\r\n\r\n    this.input = this.theme.getSelectInput(this.enum_options);\r\n    this.theme.setSelectOptions(this.input,this.enum_options,this.enum_display);\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      this.input.disabled = true;\r\n    }\r\n\r\n    // Set custom attributes on input element. Parameter is array of protected keys. Empty array if none.\r\n    this.setInputAttributes([]);\r\n\r\n    this.input.addEventListener('change',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      self.onInputChange();\r\n    });\r\n\r\n    this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton);\r\n    this.container.appendChild(this.control);\r\n\r\n    this.value = this.enum_values[0];\r\n  },\r\n  onInputChange: function() {\r\n    var val = this.typecast(this.input.value);\r\n\r\n    var new_val;\r\n    // Invalid option, use first option instead\r\n    if(this.enum_values.indexOf(val) === -1) {\r\n      new_val = this.enum_values[0];\r\n    }\r\n    else {\r\n      new_val = this.enum_values[this.enum_values.indexOf(val)];\r\n    }\r\n\r\n    // If valid hasn't changed\r\n    if(new_val === this.value) return;\r\n\r\n    this.is_dirty = true;\r\n\r\n    // Store new value and propogate change event\r\n    this.value = new_val;\r\n    this.onChange(true);\r\n  },\r\n  setupSelect2: function() {\r\n    // If the Select2 library is loaded use it when we have lots of items\r\n    if(window.jQuery && window.jQuery.fn && window.jQuery.fn.select2 && (this.enum_options.length > 2 || (this.enum_options.length && this.enumSource))) {\r\n      var options = $extend({},JSONEditor.plugins.select2);\r\n      if(this.schema.options && this.schema.options.select2_options) options = $extend(options,this.schema.options.select2_options);\r\n      this.select2 = window.jQuery(this.input).select2(options);\r\n      this.select2v4 = this.select2.select2.hasOwnProperty(\"amd\");\r\n\r\n      var self = this;\r\n      this.select2.on('select2-blur',function() {\r\n        if(self.select2v4)\r\n          self.input.value = self.select2.val();\r\n        else\r\n          self.input.value = self.select2.select2('val');\r\n\r\n        self.onInputChange();\r\n      });\r\n\r\n      this.select2.on('change',function() {\r\n        if(self.select2v4)\r\n          self.input.value = self.select2.val();\r\n        else\r\n          self.input.value = self.select2.select2('val');\r\n\r\n        self.onInputChange();\r\n      });\r\n    }\r\n    else {\r\n      this.select2 = null;\r\n    }\r\n  },\r\n  postBuild: function() {\r\n    this._super();\r\n    this.theme.afterInputReady(this.input);\r\n    this.setupSelect2();\r\n  },\r\n  onWatchedFieldChange: function() {\r\n    var self = this, vars, j;\r\n\r\n    // If this editor uses a dynamic select box\r\n    if(this.enumSource) {\r\n      vars = this.getWatchedFieldValues();\r\n      var select_options = [];\r\n      var select_titles = [];\r\n\r\n      for(var i=0; i<this.enumSource.length; i++) {\r\n        // Constant values\r\n        if(Array.isArray(this.enumSource[i])) {\r\n          select_options = select_options.concat(this.enumSource[i]);\r\n          select_titles = select_titles.concat(this.enumSource[i]);\r\n        }\r\n        else {\r\n          var items = [];\r\n          // Static list of items\r\n          if(Array.isArray(this.enumSource[i].source)) {\r\n            items = this.enumSource[i].source;\r\n          // A watched field\r\n          } else {\r\n            items = vars[this.enumSource[i].source];\r\n          }\r\n\r\n          if(items) {\r\n            // Only use a predefined part of the array\r\n            if(this.enumSource[i].slice) {\r\n              items = Array.prototype.slice.apply(items,this.enumSource[i].slice);\r\n            }\r\n            // Filter the items\r\n            if(this.enumSource[i].filter) {\r\n              var new_items = [];\r\n              for(j=0; j<items.length; j++) {\r\n                if(this.enumSource[i].filter({i:j,item:items[j],watched:vars})) new_items.push(items[j]);\r\n              }\r\n              items = new_items;\r\n            }\r\n\r\n            var item_titles = [];\r\n            var item_values = [];\r\n            for(j=0; j<items.length; j++) {\r\n              var item = items[j];\r\n\r\n              // Rendered value\r\n              if(this.enumSource[i].value) {\r\n                item_values[j] = this.typecast(this.enumSource[i].value({\r\n                  i: j,\r\n                  item: item\r\n                }));\r\n              }\r\n              // Use value directly\r\n              else {\r\n                item_values[j] = items[j];\r\n              }\r\n\r\n              // Rendered title\r\n              if(this.enumSource[i].title) {\r\n                item_titles[j] = this.enumSource[i].title({\r\n                  i: j,\r\n                  item: item\r\n                });\r\n              }\r\n              // Use value as the title also\r\n              else {\r\n                item_titles[j] = item_values[j];\r\n              }\r\n            }\r\n\r\n            // TODO: sort\r\n\r\n            select_options = select_options.concat(item_values);\r\n            select_titles = select_titles.concat(item_titles);\r\n          }\r\n        }\r\n      }\r\n\r\n      var prev_value = this.value;\r\n\r\n      this.theme.setSelectOptions(this.input, select_options, select_titles);\r\n      this.enum_options = select_options;\r\n      this.enum_display = select_titles;\r\n      this.enum_values = select_options;\r\n\r\n      if(this.select2) {\r\n        this.select2.select2('destroy');\r\n      }\r\n\r\n      // If the previous value is still in the new select options, stick with it\r\n      if(select_options.indexOf(prev_value) !== -1) {\r\n        this.input.value = prev_value;\r\n        this.value = prev_value;\r\n      }\r\n      // Otherwise, set the value to the first select option\r\n      else {\r\n        this.input.value = select_options[0];\r\n        this.value = this.typecast(select_options[0] || \"\");  \r\n        if(this.parent) this.parent.onChildEditorChange(this);\r\n        else this.jsoneditor.onChange();\r\n        this.jsoneditor.notifyWatchers(this.path);\r\n      }\r\n\r\n      this.setupSelect2();\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      this.input.disabled = false;\r\n      if(this.select2) {\r\n        if(this.select2v4)\r\n          this.select2.prop(\"disabled\",false);\r\n        else\r\n          this.select2.select2(\"enable\",true);\r\n      }\r\n    }\r\n    this._super();\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    this.input.disabled = true;\r\n    if(this.select2) {\r\n      if(this.select2v4)\r\n        this.select2.prop(\"disabled\",true);\r\n      else\r\n        this.select2.select2(\"enable\",false);\r\n    }\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if(this.select2) {\r\n      this.select2.select2('destroy');\r\n      this.select2 = null;\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  showValidationErrors: function (errors) {\r\n    var self = this;\r\n\r\n    if (this.jsoneditor.options.show_errors === \"always\") {}\r\n    else if(!this.is_dirty && this.previous_error_setting===this.jsoneditor.options.show_errors) return;\r\n\r\n    this.previous_error_setting = this.jsoneditor.options.show_errors;\r\n\r\n    var messages = [];\r\n    $each(errors, function (i, error) {\r\n      if (error.path === self.path) {\r\n        messages.push(error.message);\r\n      }\r\n    });\r\n\r\n    if (messages.length) {\r\n      this.theme.addInputError(this.input, messages.join('. ') + '.');\r\n    }\r\n    else {\r\n      this.theme.removeInputError(this.input);\r\n    }\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.selectize = JSONEditor.AbstractEditor.extend({\r\n  setValue: function(value,initial) {\r\n    value = this.typecast(value||'');\r\n\r\n    // Sanitize value before setting it\r\n    var sanitized = value;\r\n    if(this.enum_values.indexOf(sanitized) < 0) {\r\n      sanitized = this.enum_values[0];\r\n    }\r\n\r\n    if(this.value === sanitized) {\r\n      return;\r\n    }\r\n\r\n    this.input.value = this.enum_options[this.enum_values.indexOf(sanitized)];\r\n\r\n    if(this.selectize) {\r\n      this.selectize[0].selectize.addItem(sanitized);\r\n    }\r\n\r\n    this.value = sanitized;\r\n    this.onChange();\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.setAttribute('name',this.formname);\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  getNumColumns: function() {\r\n    if(!this.enum_options) return 3;\r\n    var longest_text = this.getTitle().length;\r\n    for(var i=0; i<this.enum_options.length; i++) {\r\n      longest_text = Math.max(longest_text,this.enum_options[i].length+4);\r\n    }\r\n    return Math.min(12,Math.max(longest_text/7,2));\r\n  },\r\n  typecast: function(value) {\r\n    if(this.schema.type === \"boolean\") {\r\n      return !!value;\r\n    }\r\n    else if(this.schema.type === \"number\") {\r\n      return 1*value;\r\n    }\r\n    else if(this.schema.type === \"integer\") {\r\n      return Math.floor(value*1);\r\n    }\r\n    else {\r\n      return \"\"+value;\r\n    }\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    return this.value;\r\n  },\r\n  preBuild: function() {\r\n    var self = this;\r\n    this.input_type = 'select';\r\n    this.enum_options = [];\r\n    this.enum_values = [];\r\n    this.enum_display = [];\r\n    var i;\r\n\r\n    // Enum options enumerated\r\n    if(this.schema.enum) {\r\n      var display = this.schema.options && this.schema.options.enum_titles || [];\r\n\r\n      $each(this.schema.enum,function(i,option) {\r\n        self.enum_options[i] = \"\"+option;\r\n        self.enum_display[i] = \"\"+(display[i] || option);\r\n        self.enum_values[i] = self.typecast(option);\r\n      });\r\n    }\r\n    // Boolean\r\n    else if(this.schema.type === \"boolean\") {\r\n      self.enum_display = this.schema.options && this.schema.options.enum_titles || ['true','false'];\r\n      self.enum_options = ['1','0'];\r\n      self.enum_values = [true,false];\r\n    }\r\n    // Dynamic Enum\r\n    else if(this.schema.enumSource) {\r\n      this.enumSource = [];\r\n      this.enum_display = [];\r\n      this.enum_options = [];\r\n      this.enum_values = [];\r\n\r\n      // Shortcut declaration for using a single array\r\n      if(!(Array.isArray(this.schema.enumSource))) {\r\n        if(this.schema.enumValue) {\r\n          this.enumSource = [\r\n            {\r\n              source: this.schema.enumSource,\r\n              value: this.schema.enumValue\r\n            }\r\n          ];\r\n        }\r\n        else {\r\n          this.enumSource = [\r\n            {\r\n              source: this.schema.enumSource\r\n            }\r\n          ];\r\n        }\r\n      }\r\n      else {\r\n        for(i=0; i<this.schema.enumSource.length; i++) {\r\n          // Shorthand for watched variable\r\n          if(typeof this.schema.enumSource[i] === \"string\") {\r\n            this.enumSource[i] = {\r\n              source: this.schema.enumSource[i]\r\n            };\r\n          }\r\n          // Make a copy of the schema\r\n          else if(!(Array.isArray(this.schema.enumSource[i]))) {\r\n            this.enumSource[i] = $extend({},this.schema.enumSource[i]);\r\n          }\r\n          else {\r\n            this.enumSource[i] = this.schema.enumSource[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      // Now, enumSource is an array of sources\r\n      // Walk through this array and fix up the values\r\n      for(i=0; i<this.enumSource.length; i++) {\r\n        if(this.enumSource[i].value) {\r\n          this.enumSource[i].value = this.jsoneditor.compileTemplate(this.enumSource[i].value, this.template_engine);\r\n        }\r\n        if(this.enumSource[i].title) {\r\n          this.enumSource[i].title = this.jsoneditor.compileTemplate(this.enumSource[i].title, this.template_engine);\r\n        }\r\n        if(this.enumSource[i].filter) {\r\n          this.enumSource[i].filter = this.jsoneditor.compileTemplate(this.enumSource[i].filter, this.template_engine);\r\n        }\r\n      }\r\n    }\r\n    // Other, not supported\r\n    else {\r\n      throw \"'select' editor requires the enum property to be set.\";\r\n    }\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n\r\n    if(this.options.compact) this.container.classList.add('compact');\r\n\r\n    this.input = this.theme.getSelectInput(this.enum_options);\r\n    this.theme.setSelectOptions(this.input,this.enum_options,this.enum_display);\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      this.input.disabled = true;\r\n    }\r\n\r\n    this.input.addEventListener('change',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      self.onInputChange();\r\n    });\r\n\r\n    this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton);\r\n    this.container.appendChild(this.control);\r\n\r\n    this.value = this.enum_values[0];\r\n  },\r\n  onInputChange: function() {\r\n    //console.log(\"onInputChange\");\r\n    var val = this.input.value;\r\n\r\n    var sanitized = val;\r\n    if(this.enum_options.indexOf(val) === -1) {\r\n      sanitized = this.enum_options[0];\r\n    }\r\n\r\n    //this.value = this.enum_values[this.enum_options.indexOf(val)];\r\n    this.value = val;\r\n    this.onChange(true);\r\n  },\r\n  setupSelectize: function() {\r\n    // If the Selectize library is loaded use it when we have lots of items\r\n    var self = this;\r\n    if(window.jQuery && window.jQuery.fn && window.jQuery.fn.selectize && (this.enum_options.length >= 2 || (this.enum_options.length && this.enumSource))) {\r\n      var options = $extend({},JSONEditor.plugins.selectize);\r\n      if(this.schema.options && this.schema.options.selectize_options) options = $extend(options,this.schema.options.selectize_options);\r\n      this.selectize = window.jQuery(this.input).selectize($extend(options,\r\n      {\r\n        // set the create option to true by default, or to the user specified value if defined\r\n        create: ( options.create === undefined ? true : options.create),\r\n        onChange : function() {\r\n          self.onInputChange();\r\n        }\r\n      }));\r\n    }\r\n    else {\r\n      this.selectize = null;\r\n    }\r\n  },\r\n  postBuild: function() {\r\n    this._super();\r\n    this.theme.afterInputReady(this.input);\r\n    this.setupSelectize();\r\n  },\r\n  onWatchedFieldChange: function() {\r\n    var self = this, vars, j;\r\n\r\n    // If this editor uses a dynamic select box\r\n    if(this.enumSource) {\r\n      vars = this.getWatchedFieldValues();\r\n      var select_options = [];\r\n      var select_titles = [];\r\n\r\n      for(var i=0; i<this.enumSource.length; i++) {\r\n        // Constant values\r\n        if(Array.isArray(this.enumSource[i])) {\r\n          select_options = select_options.concat(this.enumSource[i]);\r\n          select_titles = select_titles.concat(this.enumSource[i]);\r\n        }\r\n        // A watched field\r\n        else if(vars[this.enumSource[i].source]) {\r\n          var items = vars[this.enumSource[i].source];\r\n\r\n          // Only use a predefined part of the array\r\n          if(this.enumSource[i].slice) {\r\n            items = Array.prototype.slice.apply(items,this.enumSource[i].slice);\r\n          }\r\n          // Filter the items\r\n          if(this.enumSource[i].filter) {\r\n            var new_items = [];\r\n            for(j=0; j<items.length; j++) {\r\n              if(this.enumSource[i].filter({i:j,item:items[j]})) new_items.push(items[j]);\r\n            }\r\n            items = new_items;\r\n          }\r\n\r\n          var item_titles = [];\r\n          var item_values = [];\r\n          for(j=0; j<items.length; j++) {\r\n            var item = items[j];\r\n\r\n            // Rendered value\r\n            if(this.enumSource[i].value) {\r\n              item_values[j] = this.enumSource[i].value({\r\n                i: j,\r\n                item: item\r\n              });\r\n            }\r\n            // Use value directly\r\n            else {\r\n              item_values[j] = items[j];\r\n            }\r\n\r\n            // Rendered title\r\n            if(this.enumSource[i].title) {\r\n              item_titles[j] = this.enumSource[i].title({\r\n                i: j,\r\n                item: item\r\n              });\r\n            }\r\n            // Use value as the title also\r\n            else {\r\n              item_titles[j] = item_values[j];\r\n            }\r\n          }\r\n\r\n          // TODO: sort\r\n\r\n          select_options = select_options.concat(item_values);\r\n          select_titles = select_titles.concat(item_titles);\r\n        }\r\n      }\r\n\r\n      var prev_value = this.value;\r\n\r\n      // Check to see if this item is in the list\r\n      // Note: We have to skip empty string for watch lists to work properly\r\n      if ((prev_value !== undefined) && (prev_value !== \"\") && (select_options.indexOf(prev_value) === -1)) {\r\n        // item is not in the list. Add it.\r\n        select_options = select_options.concat(prev_value);\r\n        select_titles = select_titles.concat(prev_value);\r\n      }\r\n\r\n      this.theme.setSelectOptions(this.input, select_options, select_titles);\r\n      this.enum_options = select_options;\r\n      this.enum_display = select_titles;\r\n      this.enum_values = select_options;\r\n\r\n      // If the previous value is still in the new select options, stick with it\r\n      if(select_options.indexOf(prev_value) !== -1) {\r\n        this.input.value = prev_value;\r\n        this.value = prev_value;\r\n      }\r\n\r\n      // Otherwise, set the value to the first select option\r\n      else {\r\n        this.input.value = select_options[0];\r\n        this.value = select_options[0] || \"\";\r\n        if(this.parent) this.parent.onChildEditorChange(this);\r\n        else this.jsoneditor.onChange();\r\n        this.jsoneditor.notifyWatchers(this.path);\r\n      }\r\n\r\n      if(this.selectize) {\r\n        // Update the Selectize options\r\n        this.updateSelectizeOptions(select_options);\r\n      }\r\n      else {\r\n        this.setupSelectize();\r\n      }\r\n\r\n      this._super();\r\n    }\r\n  },\r\n  updateSelectizeOptions: function(select_options) {\r\n    var selectized = this.selectize[0].selectize,\r\n        self = this;\r\n\r\n    selectized.off();\r\n    selectized.clearOptions();\r\n    for(var n in select_options) {\r\n      selectized.addOption({value:select_options[n],text:select_options[n]});\r\n    }\r\n    selectized.addItem(this.value);\r\n    selectized.on('change',function() {\r\n      self.onInputChange();\r\n    });\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      this.input.disabled = false;\r\n      if(this.selectize) {\r\n        this.selectize[0].selectize.unlock();\r\n      }\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    this.input.disabled = true;\r\n    if(this.selectize) {\r\n      this.selectize[0].selectize.lock();\r\n    }\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if(this.selectize) {\r\n      this.selectize[0].selectize.destroy();\r\n      this.selectize = null;\r\n    }\r\n    this._super();\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.multiselect = JSONEditor.AbstractEditor.extend({\r\n  preBuild: function() {\r\n    this._super();\r\n    var i;\r\n\r\n    this.select_options = {};\r\n    this.select_values = {};\r\n\r\n    var items_schema = this.jsoneditor.expandRefs(this.schema.items || {});\r\n\r\n    var e = items_schema[\"enum\"] || [];\r\n    var t = items_schema.options? items_schema.options.enum_titles || [] : [];\r\n    this.option_keys = [];\r\n    this.option_titles = [];\r\n    for(i=0; i<e.length; i++) {\r\n      // If the sanitized value is different from the enum value, don't include it\r\n      if(this.sanitize(e[i]) !== e[i]) continue;\r\n\r\n      this.option_keys.push(e[i]+\"\");\r\n      this.option_titles.push((t[i]||e[i])+\"\");\r\n      this.select_values[e[i]+\"\"] = e[i];\r\n    }\r\n  },\r\n  build: function() {\r\n    var self = this, i;\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n\r\n    if((!this.schema.format && this.option_keys.length < 8) || this.schema.format === \"checkbox\") {\r\n      this.input_type = 'checkboxes';\r\n\r\n      this.inputs = {};\r\n      this.controls = {};\r\n      for(i=0; i<this.option_keys.length; i++) {\r\n        this.inputs[this.option_keys[i]] = this.theme.getCheckbox();\r\n        this.select_options[this.option_keys[i]] = this.inputs[this.option_keys[i]];\r\n        var label = this.theme.getCheckboxLabel(this.option_titles[i]);\r\n        this.controls[this.option_keys[i]] = this.theme.getFormControl(label, this.inputs[this.option_keys[i]]);\r\n      }\r\n\r\n      this.control = this.theme.getMultiCheckboxHolder(this.controls,this.label,this.description);\r\n    }\r\n    else {\r\n      this.input_type = 'select';\r\n      this.input = this.theme.getSelectInput(this.option_keys);\r\n      this.theme.setSelectOptions(this.input,this.option_keys,this.option_titles);\r\n      this.input.multiple = true;\r\n      this.input.size = Math.min(10,this.option_keys.length);\r\n\r\n      for(i=0; i<this.option_keys.length; i++) {\r\n        this.select_options[this.option_keys[i]] = this.input.children[i];\r\n      }\r\n\r\n      if(this.schema.readOnly || this.schema.readonly) {\r\n        this.always_disabled = true;\r\n        this.input.disabled = true;\r\n      }\r\n\r\n      this.control = this.theme.getFormControl(this.label, this.input, this.description);\r\n    }\r\n\r\n    this.container.appendChild(this.control);\r\n    this.control.addEventListener('change',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      var new_value = [];\r\n      for(i = 0; i<self.option_keys.length; i++) {\r\n        if(self.select_options[self.option_keys[i]].selected || self.select_options[self.option_keys[i]].checked) new_value.push(self.select_values[self.option_keys[i]]);\r\n      }\r\n\r\n      self.updateValue(new_value);\r\n      self.onChange(true);\r\n    });\r\n  },\r\n  setValue: function(value, initial) {\r\n    var i;\r\n    value = value || [];\r\n    if(typeof value !== \"object\") value = [value];\r\n    else if(!(Array.isArray(value))) value = [];\r\n\r\n    // Make sure we are dealing with an array of strings so we can check for strict equality\r\n    for(i=0; i<value.length; i++) {\r\n      if(typeof value[i] !== \"string\") value[i] += \"\";\r\n    }\r\n\r\n    // Update selected status of options\r\n    for(i in this.select_options) {\r\n      if(!this.select_options.hasOwnProperty(i)) continue;\r\n\r\n      this.select_options[i][this.input_type === \"select\"? \"selected\" : \"checked\"] = (value.indexOf(i) !== -1);\r\n    }\r\n\r\n    this.updateValue(value);\r\n    this.onChange();\r\n  },\r\n  setupSelect2: function() {\r\n    if(window.jQuery && window.jQuery.fn && window.jQuery.fn.select2) {\r\n        var options = window.jQuery.extend({},JSONEditor.plugins.select2);\r\n        if(this.schema.options && this.schema.options.select2_options) options = $extend(options,this.schema.options.select2_options);\r\n        this.select2 = window.jQuery(this.input).select2(options);\r\n        this.select2v4 = this.select2.select2.hasOwnProperty(\"amd\");\r\n\r\n        var self = this;\r\n        this.select2.on('select2-blur',function() {\r\n          if(self.select2v4)\r\n            self.value = self.select2.val();\r\n          else\r\n            self.value = self.select2.select2('val');\r\n\r\n          self.onChange(true);\r\n        });\r\n\r\n        this.select2.on('change',function() {\r\n          if(self.select2v4)\r\n            self.value = self.select2.val();\r\n          else\r\n            self.value = self.select2.select2('val');\r\n\r\n          self.onChange(true);\r\n        });\r\n    }\r\n    else {\r\n        this.select2 = null;\r\n    }\r\n  },\r\n  onInputChange: function() {\r\n      this.value = this.input.value;\r\n      this.onChange(true);\r\n  },\r\n  postBuild: function() {\r\n      this._super();\r\n      this.setupSelect2();\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.setAttribute('name',this.formname);\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  getNumColumns: function() {\r\n    var longest_text = this.getTitle().length;\r\n    for(var i in this.select_values) {\r\n      if(!this.select_values.hasOwnProperty(i)) continue;\r\n      longest_text = Math.max(longest_text,(this.select_values[i]+\"\").length+4);\r\n    }\r\n\r\n    return Math.min(12,Math.max(longest_text/7,2));\r\n  },\r\n  updateValue: function(value) {\r\n    var changed = false;\r\n    var new_value = [];\r\n    for(var i=0; i<value.length; i++) {\r\n      if(!this.select_options[value[i]+\"\"]) {\r\n        changed = true;\r\n        continue;\r\n      }\r\n      var sanitized = this.sanitize(this.select_values[value[i]]);\r\n      new_value.push(sanitized);\r\n      if(sanitized !== value[i]) changed = true;\r\n    }\r\n    this.value = new_value;\r\n\r\n    if(this.select2) {\r\n      if(this.select2v4)\r\n        this.select2.val(this.value).trigger(\"change\"); \r\n      else\r\n        this.select2.select2('val',this.value);\r\n    }\r\n\r\n    return changed;\r\n  },\r\n  sanitize: function(value) {\r\n    if(this.schema.items.type === \"number\") {\r\n      return 1*value;\r\n    }\r\n    else if(this.schema.items.type === \"integer\") {\r\n      return Math.floor(value*1);\r\n    }\r\n    else {\r\n      return \"\"+value;\r\n    }\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.input) {\r\n        this.input.disabled = false;\r\n      }\r\n      else if(this.inputs) {\r\n        for(var i in this.inputs) {\r\n          if(!this.inputs.hasOwnProperty(i)) continue;\r\n          this.inputs[i].disabled = false;\r\n        }\r\n      }\r\n      if(this.select2) {\r\n        if(this.select2v4)\r\n          this.select2.prop(\"disabled\",false);\r\n        else\r\n          this.select2.select2(\"enable\",true);\r\n      }\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.input) {\r\n      this.input.disabled = true;\r\n    }\r\n    else if(this.inputs) {\r\n      for(var i in this.inputs) {\r\n        if(!this.inputs.hasOwnProperty(i)) continue;\r\n        this.inputs[i].disabled = true;\r\n      }\r\n    }\r\n    if(this.select2) {\r\n      if(this.select2v4)\r\n        this.select2.prop(\"disabled\",true);\r\n      else\r\n        this.select2.select2(\"enable\",false);\r\n    }\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.select2) {\r\n        this.select2.select2('destroy');\r\n        this.select2 = null;\r\n    }\r\n    this._super();\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.base64 = JSONEditor.AbstractEditor.extend({\r\n  getNumColumns: function() {\r\n    return 4;\r\n  },\r\n  setFileReaderListener: function (fr_multiple) {\r\n    var self = this;\r\n    fr_multiple.addEventListener(\"load\", function(event) {\r\n      if (self.count == self.current_item_index) {\r\n        // Overwrite existing file by default, leave other properties unchanged\r\n        self.value[self.count][self.key] = event.target.result;\r\n      } else {\r\n        var temp_object = {};\r\n        // Create empty object\r\n        for (var key in self.parent.schema.properties) {\r\n          temp_object[key] = \"\";\r\n        }\r\n        // Set object media file\r\n        temp_object[self.key] = event.target.result;\r\n        self.value.splice(self.count, 0, temp_object); // insert new file object\r\n      }\r\n\r\n      // Increment using the listener and not the 'for' loop as the listener will be processed asynchronously\r\n      self.count += 1;\r\n      // When all files have been processed, update the value of the editor\r\n      if (self.count == (self.total+self.current_item_index)) {\r\n        self.arrayEditor.setValue(self.value);\r\n      }\r\n    });\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n\r\n    // Input that holds the base64 string\r\n    this.input = this.theme.getFormInputField('hidden');\r\n    this.container.appendChild(this.input);\r\n\r\n    // Don't show uploader if this is readonly\r\n    if(!this.schema.readOnly && !this.schema.readonly) {\r\n      if(!window.FileReader) throw \"FileReader required for base64 editor\";\r\n\r\n      // File uploader\r\n      this.uploader = this.theme.getFormInputField('file');\r\n\r\n      // Set attribute of file input field to 'multiple' if:\r\n      // 'multiple' key has been set to 'true' in the schema\r\n      // and the parent object is of type 'object'\r\n      // and the parent of the parent type has been set to 'array'\r\n      if (self.schema.options && self.schema.options.multiple && self.schema.options.multiple == true && self.parent && self.parent.schema.type == 'object' && self.parent.parent && self.parent.parent.schema.type == 'array') {\r\n        this.uploader.setAttribute('multiple', '');\r\n      }\r\n\r\n      this.uploader.addEventListener('change',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if(this.files && this.files.length) {\r\n\r\n          // Check the amount of files uploaded.\r\n          // If 1, use the regular upload, otherwise use the multiple upload method\r\n          if (this.files.length>1 && self.schema.options && self.schema.options.multiple && self.schema.options.multiple == true && self.parent && self.parent.schema.type == 'object' && self.parent.parent && self.parent.parent.schema.type == 'array') {\r\n\r\n            // Load editor of parent.parent to get the array\r\n            self.arrayEditor = self.jsoneditor.getEditor(self.parent.parent.path);\r\n            // Check the current value of this editor\r\n            self.value = self.arrayEditor.getValue();\r\n            // Set variables for amount of files, index of current array item and\r\n            // count value containing current status of processed files\r\n            self.total = this.files.length;\r\n            self.current_item_index = parseInt(self.parent.key);\r\n            self.count = self.current_item_index;\r\n\r\n            for (var i = 0; i < self.total; i++) {\r\n              var fr_multiple = new FileReader();\r\n              self.setFileReaderListener(fr_multiple);\r\n              fr_multiple.readAsDataURL(this.files[i]);\r\n            }\r\n          } else {\r\n            var fr = new FileReader();\r\n            fr.onload = function(evt) {\r\n              self.value = evt.target.result;\r\n              self.refreshPreview();\r\n              self.onChange(true);\r\n              fr = null;\r\n            };\r\n            fr.readAsDataURL(this.files[0]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    this.preview = this.theme.getFormInputDescription(this.schema.description);\r\n    this.container.appendChild(this.preview);\r\n\r\n    this.control = this.theme.getFormControl(this.label, this.uploader||this.input, this.preview, this.infoButton);\r\n    this.container.appendChild(this.control);\r\n  },\r\n  refreshPreview: function() {\r\n    if(this.last_preview === this.value) return;\r\n    this.last_preview = this.value;\r\n\r\n    this.preview.innerHTML = '';\r\n\r\n    if(!this.value) return;\r\n\r\n    var mime = this.value.match(/^data:([^;,]+)[;,]/);\r\n    if(mime) mime = mime[1];\r\n\r\n    if(!mime) {\r\n      this.preview.innerHTML = '<em>Invalid data URI</em>';\r\n    }\r\n    else {\r\n      this.preview.innerHTML = '<strong>Type:</strong> '+mime+', <strong>Size:</strong> '+Math.floor((this.value.length-this.value.split(',')[0].length-1)/1.33333)+' bytes';\r\n      if(mime.substr(0,5)===\"image\") {\r\n        this.preview.innerHTML += '<br>';\r\n        var img = document.createElement('img');\r\n        img.style.maxWidth = '100%';\r\n        img.style.maxHeight = '100px';\r\n        img.src = this.value;\r\n        this.preview.appendChild(img);\r\n      }\r\n    }\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.uploader) this.uploader.disabled = false;\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.uploader) this.uploader.disabled = true;\r\n    this._super();\r\n  },\r\n  setValue: function(val) {\r\n    if(this.value !== val) {\r\n      this.value = val;\r\n      this.input.value = this.value;\r\n      this.refreshPreview();\r\n      this.onChange();\r\n    }\r\n  },\r\n  destroy: function() {\r\n    if(this.preview && this.preview.parentNode) this.preview.parentNode.removeChild(this.preview);\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if(this.uploader && this.uploader.parentNode) this.uploader.parentNode.removeChild(this.uploader);\r\n\r\n    this._super();\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.upload = JSONEditor.AbstractEditor.extend({\r\n  getNumColumns: function() {\r\n    return 4;\r\n  },\r\n  build: function() {    \r\n    var self = this;\r\n    this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n\r\n    // Input that holds the base64 string\r\n    this.input = this.theme.getFormInputField('hidden');\r\n    this.container.appendChild(this.input);\r\n    \r\n    // Don't show uploader if this is readonly\r\n    if(!this.schema.readOnly && !this.schema.readonly) {\r\n\r\n      if(!this.jsoneditor.options.upload) throw \"Upload handler required for upload editor\";\r\n\r\n      // File uploader\r\n      this.uploader = this.theme.getFormInputField('file');\r\n      \r\n      this.uploader.addEventListener('change',function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        \r\n        if(this.files && this.files.length) {\r\n          var fr = new FileReader();\r\n          fr.onload = function(evt) {\r\n            self.preview_value = evt.target.result;\r\n            self.refreshPreview();\r\n            self.onChange(true);\r\n            fr = null;\r\n          };\r\n          fr.readAsDataURL(this.files[0]);\r\n        }\r\n      });\r\n    }\r\n\r\n    var description = this.schema.description;\r\n    if (!description) description = '';\r\n\r\n    this.preview = this.theme.getFormInputDescription(description);\r\n    this.container.appendChild(this.preview);\r\n\r\n    this.control = this.theme.getFormControl(this.label, this.uploader||this.input, this.preview);\r\n    this.container.appendChild(this.control);\r\n\r\n    window.requestAnimationFrame(function() {\r\n      if (self.value) {\r\n        var img = document.createElement('img');\r\n        img.style.maxWidth = '100%';\r\n        img.style.maxHeight = '100px';\r\n        img.onload = function (event) {\r\n          self.preview.appendChild(img);\r\n        };\r\n        img.onerror = function(error) {\r\n          console.error('upload error', error);\r\n        };\r\n        img.src = self.container.querySelector('a').href;\r\n      }\r\n    });\r\n\r\n  },\r\n  refreshPreview: function() {\r\n    if(this.last_preview === this.preview_value) return;\r\n    this.last_preview = this.preview_value;\r\n\r\n    this.preview.innerHTML = '';\r\n    \r\n    if(!this.preview_value) return;\r\n\r\n    var self = this;\r\n\r\n    var mime = this.preview_value.match(/^data:([^;,]+)[;,]/);\r\n    if(mime) mime = mime[1];\r\n    if(!mime) mime = 'unknown';\r\n\r\n    var file = this.uploader.files[0];\r\n\r\n    this.preview.innerHTML = '<strong>Type:</strong> '+mime+', <strong>Size:</strong> '+file.size+' bytes';\r\n    if(mime.substr(0,5)===\"image\") {\r\n      this.preview.innerHTML += '<br>';\r\n      var img = document.createElement('img');\r\n      img.style.maxWidth = '100%';\r\n      img.style.maxHeight = '100px';\r\n      img.src = this.preview_value;\r\n      this.preview.appendChild(img);\r\n    }\r\n\r\n    this.preview.innerHTML += '<br>';\r\n    var uploadButton = this.getButton('Upload', 'upload', 'Upload');\r\n    this.preview.appendChild(uploadButton);\r\n    uploadButton.addEventListener('click',function(event) {\r\n      event.preventDefault();\r\n\r\n      uploadButton.setAttribute(\"disabled\", \"disabled\");\r\n      self.theme.removeInputError(self.uploader);\r\n\r\n      if (self.theme.getProgressBar) {\r\n        self.progressBar = self.theme.getProgressBar();\r\n        self.preview.appendChild(self.progressBar);\r\n      }\r\n\r\n      self.jsoneditor.options.upload(self.path, file, {\r\n        success: function(url) {\r\n          self.setValue(url);\r\n\r\n          if(self.parent) self.parent.onChildEditorChange(self);\r\n          else self.jsoneditor.onChange();\r\n\r\n          if (self.progressBar) self.preview.removeChild(self.progressBar);\r\n          uploadButton.removeAttribute(\"disabled\");\r\n        },\r\n        failure: function(error) {\r\n          self.theme.addInputError(self.uploader, error);\r\n          if (self.progressBar) self.preview.removeChild(self.progressBar);\r\n          uploadButton.removeAttribute(\"disabled\");\r\n        },\r\n        updateProgress: function(progress) {\r\n          if (self.progressBar) {\r\n            if (progress) self.theme.updateProgressBar(self.progressBar, progress);\r\n            else self.theme.updateProgressBarUnknown(self.progressBar);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    if(this.jsoneditor.options.auto_upload || this.schema.options.auto_upload) {\r\n      uploadButton.dispatchEvent(new MouseEvent('click'));\r\n      this.preview.removeChild(uploadButton);\r\n    }\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      if(this.uploader) this.uploader.disabled = false;\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    if(this.uploader) this.uploader.disabled = true;\r\n    this._super();\r\n  },\r\n  setValue: function(val) {\r\n    if(this.value !== val) {\r\n      this.value = val;\r\n      this.input.value = this.value;\r\n      this.onChange();\r\n    }\r\n  },\r\n  destroy: function() {\r\n    if(this.preview && this.preview.parentNode) this.preview.parentNode.removeChild(this.preview);\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    if(this.uploader && this.uploader.parentNode) this.uploader.parentNode.removeChild(this.uploader);\r\n\r\n    this._super();\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.checkbox = JSONEditor.AbstractEditor.extend({\r\n  setValue: function(value,initial) {\r\n    this.value = !!value;\r\n    this.input.checked = this.value;\r\n    this.onChange();\r\n  },\r\n  register: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.setAttribute('name',this.formname);\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n    if(!this.input) return;\r\n    this.input.removeAttribute('name');\r\n  },\r\n  getNumColumns: function() {\r\n    return Math.min(12,Math.max(this.getTitle().length/7,2));\r\n  },\r\n  build: function() {\r\n    var self = this;\r\n    if(!this.options.compact) {\r\n      this.label = this.header = this.theme.getCheckboxLabel(this.getTitle());\r\n    }\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n    if(this.options.compact) this.container.classList.add('compact');\r\n\r\n    this.input = this.theme.getCheckbox();\r\n    this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton);\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      this.input.disabled = true;\r\n    }\r\n\r\n    this.input.addEventListener('change',function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      self.value = this.checked;\r\n      self.onChange(true);\r\n    });\r\n\r\n    this.container.appendChild(this.control);\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      this.input.disabled = false;\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    this.input.disabled = true;\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n    this._super();\r\n  },\r\n  showValidationErrors: function (errors) {\r\n    var self = this;\r\n\r\n    if (this.jsoneditor.options.show_errors === \"always\") {}\r\n\r\n    else if (!this.is_dirty && this.previous_error_setting === this.jsoneditor.options.show_errors) {\r\n      return;\r\n    }\r\n\r\n    this.previous_error_setting = this.jsoneditor.options.show_errors;\r\n\r\n    var messages = [];\r\n    $each(errors, function (i, error) {\r\n      if (error.path === self.path) {\r\n        messages.push(error.message);\r\n      }\r\n    });\r\n\r\n    this.input.controlgroup = this.control;\r\n\r\n    if (messages.length) {\r\n      this.theme.addInputError(this.input, messages.join('. ') + '.');\r\n    }\r\n    else {\r\n      this.theme.removeInputError(this.input);\r\n    }\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.arraySelectize = JSONEditor.AbstractEditor.extend({\r\n  preBuild: function() {\r\n    var self = this;\r\n    this.enum_options = [];\r\n    this.enum_values = [];\r\n    this.enum_display = [];\r\n    var i;\r\n\r\n    // Enum options enumerated\r\n    if(this.schema.items.enum) {\r\n      var display = this.schema.options && this.schema.options.enum_titles || [];\r\n\r\n      $each(this.schema.items.enum,function(i,option) {\r\n        self.enum_options[i] = \"\"+option;\r\n        self.enum_display[i] = \"\"+(display[i] || option);\r\n        self.enum_values[i] = self.typecast(option);\r\n      });\r\n    }\r\n    // Dynamic Enum for arrays is not specified in docs\r\n  },\r\n  build: function() {\r\n    this.title = this.theme.getFormInputLabel(this.getTitle());\r\n\r\n    this.title_controls = this.theme.getHeaderButtonHolder();\r\n    this.title.appendChild(this.title_controls);\r\n    this.error_holder = document.createElement('div');\r\n\r\n    if(this.schema.description) {\r\n      this.description = this.theme.getDescription(this.schema.description);\r\n    }\r\n\r\n    this.input = this.theme.getSelectInput(this.enum_options);\r\n    this.input.setAttribute('multiple', 'multiple');\r\n    var group = this.theme.getFormControl(this.title, this.input, this.description);\r\n\r\n    this.container.appendChild(group);\r\n    this.container.appendChild(this.error_holder);\r\n\r\n    //apply global options to array selectize\r\n    var options = $extend({},JSONEditor.plugins.selectize);\r\n    if(this.schema.options && this.schema.options.selectize_options) options = $extend(options,this.schema.options.selectize_options);\r\n    window.jQuery(this.input).selectize($extend(options,\r\n      {\r\n        delimiter: ( options.delimiter === undefined ? false : options.delimiter),\r\n        createOnBlur: ( options.createOnBlur === undefined ? true : options.createOnBlur),\r\n        create: ( options.create === undefined ? true : options.create)\r\n      }));\r\n  },\r\n  postBuild: function() {\r\n      this._super();\r\n      var self = this;\r\n      this.input.selectize.on('change', function(event) {\r\n          self.refreshValue();\r\n          self.onChange(true);\r\n      });\r\n  },\r\n  destroy: function() {\r\n    this.empty(true);\r\n    if(this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);\r\n\r\n    this._super();\r\n  },\r\n  empty: function(hard) {},\r\n  setValue: function(value, initial) {\r\n    var self = this;\r\n    // Update the array's value, adding/removing rows when necessary\r\n    value = value || [];\r\n    if(!(Array.isArray(value))) value = [value];\r\n\r\n    this.input.selectize.clearOptions();\r\n    this.input.selectize.clear(true);\r\n\r\n    if (this.schema.items.enum && this.enum_options && this.enum_options.length > 0) {\r\n      var titles = this.enum_titles || [];\r\n      this.enum_options.forEach(function(x, idx) {\r\n        self.input.selectize.addOption({ text: titles[idx] || x, value: x });\r\n      });\r\n    } else {\r\n      value.forEach(function(item) {\r\n        self.input.selectize.addOption({text: item, value: item});\r\n      });\r\n    }\r\n    \r\n    this.input.selectize.setValue(value);\r\n\r\n    this.refreshValue(initial);\r\n  },\r\n  refreshValue: function(force) {\r\n    this.value = this.input.selectize.getValue();\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    var self = this;\r\n\r\n    // Get all the errors that pertain to this editor\r\n    var my_errors = [];\r\n    var other_errors = [];\r\n    $each(errors, function(i,error) {\r\n      if(error.path === self.path) {\r\n        my_errors.push(error);\r\n      }\r\n      else {\r\n        other_errors.push(error);\r\n      }\r\n    });\r\n\r\n    // Show errors for this editor\r\n    if(this.error_holder) {\r\n\r\n      if(my_errors.length) {\r\n        var message = [];\r\n        this.error_holder.innerHTML = '';\r\n        this.error_holder.style.display = '';\r\n        $each(my_errors, function(i,error) {\r\n          self.error_holder.appendChild(self.theme.getErrorMessage(error.message));\r\n        });\r\n      }\r\n      // Hide error area\r\n      else {\r\n        this.error_holder.style.display = 'none';\r\n      }\r\n    }\r\n  },\r\n  typecast: function(value) {\r\n    if(this.schema.type === \"boolean\") {\r\n      return !!value;\r\n    }\r\n    else if(this.schema.type === \"number\") {\r\n      return 1*value;\r\n    }\r\n    else if(this.schema.type === \"integer\") {\r\n      return Math.floor(value*1);\r\n    }\r\n    else {\r\n      return \"\"+value;\r\n    }\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.starrating = JSONEditor.defaults.editors.string.extend({\r\n  build: function () {\r\n    var self = this;\r\n\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n    if(this.options.compact) this.container.classList.add('compact');\r\n\r\n    this.ratingContainer = document.createElement('div');\r\n    this.ratingContainer.classList.add('starrating');\r\n\r\n    this.enum_values = this.schema.enum;\r\n    this.radioGroup =[];\r\n\r\n    var radioInputEventhandler = function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      self.setValue(this.value);\r\n      self.onChange(true);\r\n    };\r\n\r\n    for(var i = this.enum_values.length-1; i>-1; i--) {\r\n\r\n      var id = this.key + '-' + i;\r\n\r\n      // form radio elements\r\n      var radioInput = this.theme.getFormInputField('radio');\r\n      radioInput.name = this.formname + '[starrating]';\r\n      radioInput.value = this.enum_values[i];\r\n      radioInput.id = id;\r\n      radioInput.addEventListener('change', radioInputEventhandler, false);\r\n      this.radioGroup.push(radioInput);\r\n\r\n      // form-label for radio elements\r\n      var radioLabel = document.createElement('label');\r\n      radioLabel.htmlFor = id;\r\n      radioLabel.title = this.enum_values[i];\r\n      if(this.options.displayValue) {\r\n        radioLabel.classList.add('starrating-display-enabled');\r\n      }\r\n\r\n      this.ratingContainer.appendChild(radioInput);\r\n      this.ratingContainer.appendChild(radioLabel);\r\n\r\n    }\r\n\r\n    if(this.options.displayValue) {\r\n      this.displayRating = document.createElement('div');\r\n      this.displayRating.classList.add('starrating-display');\r\n      this.displayRating.innerText = this.enum_values[0];\r\n      this.ratingContainer.appendChild(this.displayRating);\r\n    }\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      for (var j = 0; i<this.radioGroup.length; j++) {\r\n        this.radioGroup[j].disabled = true;\r\n      }\r\n      this.ratingContainer.classList.add('readonly');\r\n    }\r\n\r\n    var ratingsContainerWrapper = this.theme.getContainer();\r\n    ratingsContainerWrapper.appendChild(this.ratingContainer);\r\n\r\n    this.input = ratingsContainerWrapper;\r\n    \r\n    this.control = this.theme.getFormControl(this.label, ratingsContainerWrapper, this.description, this.infoButton);\r\n    this.container.appendChild(this.control);\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      for (var i = 0; i<this.radioGroup.length; i++) {\r\n        this.radioGroup[i].disabled = false;\r\n      }\r\n      this.ratingContainer.classList.remove('readonly');\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    for (var i = 0; i<this.radioGroup.length; i++) {\r\n      this.radioGroup[i].disabled = true;\r\n    }\r\n    this.ratingContainer.classList.add('readonly');\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.ratingContainer.parentNode && this.ratingContainer.parentNode.parentNode) this.ratingContainer.parentNode.parentNode.removeChild(this.ratingContainer.parentNode);\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    this._super();\r\n  },\r\n  getNumColumns: function() {\r\n    return 2;\r\n  },\r\n  setValue: function (val) {\r\n    for(var i = 0; i < this.radioGroup.length; i++) {\r\n\r\n      if(this.radioGroup[i].value == val) {\r\n        this.radioGroup[i].checked = true;\r\n        this.value = val;\r\n        if(this.options.displayValue) {\r\n          this.displayRating.innerHTML = this.value;\r\n        }\r\n        this.onChange();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n/*\r\n\r\nEdtended handling of date, time and datetime-local type fields.\r\n\r\nWorks with both string and integer data types. (default only support string type)\r\n\r\nHas optional support for using flatpickr datepicker.\r\nAll flatpickr options is supported with a few minor differences.\r\n- \"enableTime\" and \"noCalendar\" are set automatically, based on the data type.\r\n- Extra config option \"errorDateFormat\". If this is set, it will replace the format displayed in error messages.\r\n- It is not possible to use \"inline\" and \"wrap\" options together.\r\n- When using the \"wrap\" option, \"toggle\" and \"clear\" buttons are automatically added to markup. 2 extra boolean options (\"showToggleButton\" and \"showClearButton\") are available to control which buttons to display. Note: not all frameworks supports this. (Works in: Bootstrap and Foundation)\r\n- When using the \"inline\" option, an extra boolean option (\"inlineHideInput\") is available to hide the original input field.\r\n- If \"mode\" is set to either \"multiple\" or \"range\", only string data type is supported. Also the result from these is returned as a string not an array.\r\n\r\nToDo:\r\n - Improve Handling of flatpicker \"multiple\" and \"range\" modes. (Currently the values are just added as string values, but the optimal scenario would be to save those as array if possible)\r\n\r\n*/\r\nJSONEditor.defaults.editors.datetime = JSONEditor.defaults.editors.string.extend({\r\n  build: function () {\r\n    this._super();\r\n    if(!this.input) return;\r\n\r\n    if(window.flatpickr && typeof this.options.flatpickr == 'object') {\r\n\r\n      // Make sure that flatpickr settings matches the input type\r\n      this.options.flatpickr.enableTime = this.schema.format == 'date' ? false : true;\r\n      this.options.flatpickr.noCalendar = this.schema.format == 'time' ? true : false;\r\n\r\n      // Curently only string can contain range or multiple values\r\n      if (this.schema.type == 'integer') this.options.flatpickr.mode = 'single';\r\n\r\n      // Attribute for flatpicker\r\n      this.input.setAttribute('data-input','');\r\n\r\n      var input = this.input;\r\n\r\n      if (this.options.flatpickr.wrap === true) {\r\n\r\n        // Create buttons for input group\r\n        var buttons = [];\r\n        if (this.options.flatpickr.showToggleButton !== false) {\r\n          var toggleButton = this.getButton('',this.schema.format == 'time' ? 'time' :'calendar', this.translate('flatpickr_toggle_button'));\r\n          // Attribute for flatpicker\r\n          toggleButton.setAttribute('data-toggle','');\r\n          buttons.push(toggleButton);\r\n        }\r\n        if (this.options.flatpickr.showClearButton !== false) {\r\n          var clearButton = this.getButton('','clear', this.translate('flatpickr_clear_button'));\r\n          // Attribute for flatpicker\r\n          clearButton.setAttribute('data-clear','');\r\n          buttons.push(clearButton);\r\n        }\r\n\r\n        // Save position of input field\r\n        var parentNode = this.input.parentNode, nextSibling = this.input.nextSibling;\r\n\r\n        var buttonContainer = this.theme.getInputGroup(this.input, buttons);\r\n        if (buttonContainer !== undefined) {\r\n          // Make sure \"inline\" option is turned off\r\n          this.options.flatpickr.inline = false;\r\n\r\n          // Insert container at same position as input field\r\n          parentNode.insertBefore(buttonContainer, nextSibling);\r\n\r\n          input = buttonContainer;\r\n        }\r\n        else {\r\n          this.options.flatpickr.wrap = false;\r\n        }\r\n\r\n      }\r\n\r\n      this.flatpickr = window.flatpickr(input, this.options.flatpickr);\r\n\r\n      if (this.options.flatpickr.inline === true && this.options.flatpickr.inlineHideInput === true) {\r\n          this.input.setAttribute('type','hidden');\r\n      }\r\n    }\r\n  },\r\n  getValue: function() {\r\n    if (!this.dependenciesFulfilled) {\r\n      return undefined;\r\n    }\r\n    if (this.schema.type == 'string') {\r\n      return this.value;\r\n    }\r\n    if (this.value === '' || this.value === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    var value =  this.schema.format == 'time' ? '1970-01-01 ' + this.value : this.value;\r\n    return parseInt(new Date(value).getTime() / 1000);\r\n  },\r\n  setValue: function(value, initial, from_template) {\r\n    if (this.schema.type == 'string') {\r\n      this._super(value, initial, from_template);\r\n      if (this.flatpickr) this.flatpickr.setDate(value);\r\n    }\r\n    else if (value > 0) {\r\n      var dateObj = new Date(value * 1000),\r\n          year = dateObj.getFullYear(),\r\n          month = this.zeroPad(dateObj.getMonth() + 1),\r\n          day = this.zeroPad(dateObj.getDate()),\r\n          hour = this.zeroPad(dateObj.getHours()),\r\n          min = this.zeroPad(dateObj.getMinutes()),\r\n          sec = this.zeroPad(dateObj.getSeconds()),\r\n          date = [year, month, day].join('-'),\r\n          time = [hour, min, sec].join(':'),\r\n          dateValue = date + 'T' + time;\r\n\r\n      if (this.schema.format == 'date') dateValue = date;\r\n      else if (this.schema.format == 'time') dateValue = time;\r\n\r\n      this.input.value = dateValue;\r\n      if (this.flatpickr) this.flatpickr.setDate(dateValue);\r\n    }\r\n  },\r\n  destroy: function() {\r\n    if (this.flatpickr) this.flatpickr.destroy();\r\n    this.flatpickr = null;\r\n    this._super();\r\n  },\r\n  // helper function\r\n  zeroPad: function(value) {\r\n    return ('0' + value).slice(-2);\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.signature = JSONEditor.defaults.editors.string.extend({\r\n\r\n  // This editor is using the signature pad editor from https://github.com/szimek/signature_pad\r\n  // Credits for the pad itself go to https://github.com/szimek\r\n\r\n  build: function() {\r\n    var self = this, i;\r\n\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    var formname = this.formname.replace(/\\W/g, '');\r\n\r\n    if (typeof SignaturePad == 'function') {\r\n      // Dynamically add the required CSS the first time this editor is used\r\n      var styleId = 'json-editor-style-signature';\r\n      var styles = document.getElementById(styleId);\r\n      this.input = this.theme.getFormInputField('hidden');\r\n      this.container.appendChild(this.input);\r\n\r\n      // Required to keep height\r\n      var signatureContainer = document.createElement('div');\r\n      signatureContainer.classList.add('signature-container');\r\n\r\n      // Create canvas for signature pad\r\n      var canvas = document.createElement('canvas');\r\n      canvas.setAttribute('name', formname);\r\n      canvas.classList.add('signature');\r\n      signatureContainer.appendChild(canvas);\r\n\r\n\r\n      self.signaturePad = new window.SignaturePad(canvas, {\r\n        onEnd: function() {\r\n\r\n          // check if the signature is not empty before setting a value\r\n          if (!self.signaturePad.isEmpty()) {\r\n            self.input.value = self.signaturePad.toDataURL();\r\n          } else {\r\n            self.input.value = '';\r\n          }\r\n\r\n          self.is_dirty = true;\r\n          self.refreshValue();\r\n          self.watch_listener();\r\n          self.jsoneditor.notifyWatchers(self.path);\r\n          if(self.parent) self.parent.onChildEditorChange(self);\r\n          else self.jsoneditor.onChange();\r\n\r\n        }\r\n      });\r\n\r\n      // create button containers and add clear signature button\r\n      var buttons = document.createElement('div');\r\n      var clearButton = document.createElement('button');\r\n      clearButton.classList.add('tiny', 'button');\r\n      clearButton.innerHTML='Clear signature';\r\n      buttons.appendChild(clearButton);\r\n      signatureContainer.appendChild(buttons);\r\n\r\n      if(this.options.compact) this.container.setAttribute('class',this.container.getAttribute('class')+' compact');\r\n\r\n      if(this.schema.readOnly || this.schema.readonly) {\r\n        this.always_disabled = true;\r\n        $each(this.inputs,function(i,input) {\r\n          canvas.setAttribute(\"readOnly\", \"readOnly\");\r\n          input.disabled = true;\r\n        });\r\n      }\r\n      // add listener to the clear button. when clicked, trigger a canvas change after emptying the canvas\r\n      clearButton.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        self.signaturePad.clear();\r\n        // trigger stroke end to let signaturePad update the dataURL\r\n        self.signaturePad.strokeEnd();\r\n      });\r\n\r\n      this.control = this.theme.getFormControl(this.label, signatureContainer, this.description);\r\n      this.container.appendChild(this.control);\r\n      this.refreshValue();\r\n\r\n      // signature canvas will stretch to signatureContainer width\r\n      canvas.width = signatureContainer.offsetWidth;\r\n      if (self.options && self.options.canvas_height) {\r\n        canvas.height = self.options.canvas_height;\r\n      } else {\r\n        canvas.height = \"300\"; // Set to default height of 300px;\r\n      }\r\n    } else {\r\n      var message = document.createElement('p');\r\n      message.innerHTML='Signature pad is not available, please include SignaturePad from https://github.com/szimek/signature_pad';\r\n      this.container.appendChild(message);\r\n    }\r\n\r\n  },\r\n  setValue: function(val) {\r\n    var self = this, i;\r\n    if (typeof SignaturePad == 'function') {\r\n      var formname = this.formname.replace(/\\W/g, '');\r\n      var sanitized = this.sanitize(val);\r\n      if(this.value === sanitized) {\r\n        return;\r\n      }\r\n      self.value = sanitized;\r\n      self.input.value = self.value;\r\n      self.signaturePad.clear();\r\n      // only set contents if value != ''\r\n      if (val && val != '') {\r\n        self.signaturePad.fromDataURL(val);\r\n      }\r\n      self.watch_listener();\r\n      self.jsoneditor.notifyWatchers(self.path);\r\n      return false;\r\n    }\r\n  },\r\n  destroy: function() {\r\n    var self = this, i;\r\n    var formname = this.formname.replace(/\\W/g, '');\r\n    self.signaturePad.off();\r\n    delete self.signaturePad;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.editors.radio = JSONEditor.defaults.editors.string.extend({\r\n  build: function () {\r\n    var self = this;\r\n\r\n    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());\r\n    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);\r\n    if(this.options.infoText) this.infoButton = this.theme.getInfoButton(this.options.infoText);\r\n    if(this.options.compact) this.container.classList.add('compact');\r\n\r\n    this.radioContainer = document.createElement('div');\r\n\r\n    this.enum_values = this.schema.enum;\r\n    this.radioGroup = [];\r\n\r\n    var radioInputEventhandler = function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      self.setValue(this.value);\r\n      self.onChange(true);\r\n    };\r\n\r\n    for(var i = 0; i < this.enum_values.length; i++) {\r\n\r\n      var id = this.key + '-' + i;\r\n\r\n      // form radio elements\r\n      var radioInput = this.theme.getFormInputField('radio');\r\n      radioInput.name = this.formname;\r\n      radioInput.value = this.enum_values[i];\r\n      radioInput.id = id;\r\n      radioInput.classList.add('radio__field');\r\n      radioInput.addEventListener('change', radioInputEventhandler, false);\r\n      this.radioGroup.push(radioInput);\r\n\r\n      // form-label for radio elements\r\n      var radioLabel = document.createElement('label');\r\n      radioLabel.htmlFor = id;\r\n      radioLabel.classList.add('radio');\r\n\r\n      // contains the displayed text to the label\r\n      var radioLabelText = document.createElement('span');\r\n      radioLabelText.innerText = this.enum_values[i];\r\n      radioLabelText.classList.add('radio__label');\r\n\r\n      // permits the addition of styles for the radio itself (if you want it to look differently than browser default)\r\n      var radioLabelIcon = document.createElement('span');\r\n      radioLabelIcon.classList.add('radio__icon');\r\n\r\n      radioLabel.appendChild(radioInput);\r\n      radioLabel.appendChild(radioLabelIcon);\r\n      radioLabel.appendChild(radioLabelText);\r\n\r\n      this.radioContainer.appendChild(radioLabel);\r\n    }\r\n\r\n    if(this.schema.readOnly || this.schema.readonly) {\r\n      this.always_disabled = true;\r\n      for (var j = 0; j < this.radioGroup.length; j++) {\r\n        this.radioGroup[j].disabled = true;\r\n      }\r\n      this.radioContainer.classList.add('readonly');\r\n    }\r\n\r\n    var radioContainerWrapper = this.theme.getContainer();\r\n    radioContainerWrapper.appendChild(this.radioContainer);\r\n\r\n    this.input = radioContainerWrapper;\r\n    \r\n    this.control = this.theme.getFormControl(this.label, radioContainerWrapper, this.description, this.infoButton);\r\n    this.container.appendChild(this.control);\r\n  },\r\n  enable: function() {\r\n    if(!this.always_disabled) {\r\n      for (var i = 0; i<this.radioGroup.length; i++) {\r\n        this.radioGroup[i].disabled = false;\r\n      }\r\n      this.radioContainer.classList.remove('readonly');\r\n      this._super();\r\n    }\r\n  },\r\n  disable: function(always_disabled) {\r\n    if(always_disabled) this.always_disabled = true;\r\n    for (var i = 0; i<this.radioGroup.length; i++) {\r\n      this.radioGroup[i].disabled = true;\r\n    }\r\n    this.radioContainer.classList.add('readonly');\r\n    this._super();\r\n  },\r\n  destroy: function() {\r\n    if(this.radioContainer.parentNode && this.radioContainer.parentNode.parentNode) this.radioContainer.parentNode.parentNode.removeChild(this.radioContainer.parentNode);\r\n    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);\r\n    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);\r\n    this._super();\r\n  },\r\n  getNumColumns: function() {\r\n    return 2;\r\n  },\r\n  setValue: function (val) {\r\n    for(var i = 0; i < this.radioGroup.length; i++) {\r\n\r\n      if(this.radioGroup[i].value == val) {\r\n        this.radioGroup[i].checked = true;\r\n        this.value = val;\r\n        if(this.options.displayValue) {\r\n          this.displayRating.innerHTML = this.value;\r\n        }\r\n        this.onChange();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n// hyper-link describeBy Editor\r\n\r\nJSONEditor.defaults.editors.describedBy = JSONEditor.AbstractEditor.extend({\r\n  register: function() {\r\n    if (this.editors) {\r\n      for (var i = 0; i < this.editors.length; i++) {\r\n        if (!this.editors[i]) continue;\r\n        this.editors[i].unregister();\r\n      }\r\n\r\n      if (this.editors[this.currentEditor]) this.editors[this.currentEditor].register();\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  unregister: function() {\r\n    this._super();\r\n\r\n    if (this.editors) {\r\n      for (var i = 0; i < this.editors.length; i++) {\r\n        if (!this.editors[i]) continue;\r\n        this.editors[i].unregister();\r\n      }\r\n    }\r\n  },\r\n  getNumColumns: function() {\r\n    if (!this.editors[this.currentEditor]) return 4;\r\n    return Math.max(this.editors[this.currentEditor].getNumColumns(), 4);\r\n  },\r\n  enable: function() {\r\n    if (this.editors) {\r\n      for (var i = 0; i < this.editors.length; i++) {\r\n        if (!this.editors[i]) continue;\r\n        this.editors[i].enable();\r\n      }\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  disable: function() {\r\n    if (this.editors) {\r\n      for (var i = 0; i < this.editors.length; i++) {\r\n        if (!this.editors[i]) continue;\r\n        this.editors[i].disable();\r\n      }\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  switchEditor: function() {\r\n    var self = this;\r\n    var vars = this.getWatchedFieldValues();\r\n\r\n    if (!vars) return;\r\n\r\n    //var ref = this.template.fillFromObject(vars);\r\n    //var ref = this.template(vars);\r\n    var ref = document.location.toString() + this.template(vars);\r\n\r\n    if (!this.editors[this.refs[ref]]) {\r\n      this.buildChildEditor(ref);\r\n    }\r\n\r\n    this.currentEditor = this.refs[ref];\r\n\r\n    this.register();\r\n\r\n    $each(this.editors, function(ref, editor) {\r\n      if (!editor) return;\r\n      if (self.currentEditor === ref) {\r\n        editor.container.style.display = '';\r\n      } else {\r\n        editor.container.style.display = 'none';\r\n      }\r\n    });\r\n\r\n    this.refreshValue();\r\n  },\r\n  buildChildEditor: function(ref) {\r\n    this.refs[ref] = this.editors.length;\r\n\r\n    var holder = this.theme.getChildEditorHolder();\r\n    this.editor_holder.appendChild(holder);\r\n\r\n    var schema = $extend({}, this.schema, this.jsoneditor.refs[ref]);\r\n\r\n    var editor = this.jsoneditor.createEditor(\r\n      this.jsoneditor.getEditorClass(schema), {\r\n        jsoneditor: this.jsoneditor,\r\n        schema: schema,\r\n        container: holder,\r\n        path: this.path,\r\n        parent: this,\r\n        required: true\r\n      }\r\n    );\r\n\r\n    this.editors.push(editor);\r\n\r\n    editor.preBuild();\r\n    editor.build();\r\n    editor.postBuild();\r\n  },\r\n  preBuild: function() {\r\n    var self = this;\r\n\r\n    this.refs = {};\r\n    this.editors = [];\r\n    this.currentEditor = '';\r\n\r\n    for (var i = 0; i < this.schema.links.length; i++) {\r\n      if (this.schema.links[i].rel.toLowerCase() === 'describedby') {\r\n        //this.template = new UriTemplate(this.schema.links[i].href);\r\n        this.template = this.jsoneditor.compileTemplate(this.schema.links[i].href, this.template_engine);\r\n        break;\r\n      }\r\n    }\r\n\r\n    /*this.template.fill(function(varName) {\r\n      self.schema.watch = self.schema.watch || {};\r\n      self.schema.watch[varName] = varName;\r\n      return '';\r\n    });*/\r\n\r\n    this.schema.links.splice(0, 1);\r\n    if (this.schema.links.length === 0) delete this.schema.links;\r\n\r\n    this.baseSchema = $extend({}, this.schema);\r\n  },\r\n  build: function() {\r\n    this.editor_holder = document.createElement('div');\r\n    this.container.appendChild(this.editor_holder);\r\n    this.switchEditor();\r\n  },\r\n  onWatchedFieldChange: function() {\r\n    this.switchEditor();\r\n  },\r\n  onChildEditorChange: function(editor) {\r\n    if (this.editors[this.currentEditor]) {\r\n      this.refreshValue();\r\n    }\r\n\r\n    this._super(editor);\r\n  },\r\n  refreshValue: function() {\r\n    if (this.editors[this.currentEditor]) {\r\n      this.value = this.editors[this.currentEditor].getValue();\r\n    }\r\n  },\r\n  setValue: function(val, initial) {\r\n    if (this.editors[this.currentEditor]) {\r\n      this.editors[this.currentEditor].setValue(val, initial);\r\n      this.refreshValue();\r\n      this.onChange();\r\n    }\r\n  },\r\n  destroy: function() {\r\n    $each(this.editors, function(i, editor) {\r\n      if (editor) editor.destroy();\r\n    });\r\n\r\n    if (this.editor_holder && this.editor_holder.parentNode) {\r\n      this.editor_holder.parentNode.removeChild(this.editor_holder);\r\n    }\r\n\r\n    this._super();\r\n  },\r\n  showValidationErrors: function(errors) {\r\n    $each(this.editors, function(i, editor) {\r\n      if (!editor) return;\r\n      editor.showValidationErrors(errors);\r\n    });\r\n  }\r\n});\r\n\r\nvar matchKey = (function () {\r\n  var elem = document.documentElement;\r\n\r\n  if (elem.matches) return 'matches';\r\n  else if (elem.webkitMatchesSelector) return 'webkitMatchesSelector';\r\n  else if (elem.mozMatchesSelector) return 'mozMatchesSelector';\r\n  else if (elem.msMatchesSelector) return 'msMatchesSelector';\r\n  else if (elem.oMatchesSelector) return 'oMatchesSelector';\r\n})();\r\n\r\nJSONEditor.AbstractTheme = Class.extend({\r\n  getContainer: function() {\r\n    return document.createElement('div');\r\n  },\r\n  getFloatRightLinkHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.style = el.style || {};\r\n    el.style.cssFloat = 'right';\r\n    el.style.marginLeft = '10px';\r\n    return el;\r\n  },\r\n  getModal: function() {\r\n    var el = document.createElement('div');\r\n    el.style.backgroundColor = 'white';\r\n    el.style.border = '1px solid black';\r\n    el.style.boxShadow = '3px 3px black';\r\n    el.style.position = 'absolute';\r\n    el.style.zIndex = '10';\r\n    el.style.display = 'none';\r\n    return el;\r\n  },\r\n  getGridContainer: function() {\r\n    var el = document.createElement('div');\r\n    return el;\r\n  },\r\n  getGridRow: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('row');\r\n    return el;\r\n  },\r\n  getGridColumn: function() {\r\n    var el = document.createElement('div');\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size) {\r\n\r\n  },\r\n  getLink: function(text) {\r\n    var el = document.createElement('a');\r\n    el.setAttribute('href','#');\r\n    el.appendChild(document.createTextNode(text));\r\n    return el;\r\n  },\r\n  disableHeader: function(header) {\r\n    header.style.color = '#ccc';\r\n  },\r\n  disableLabel: function(label) {\r\n    label.style.color = '#ccc';\r\n  },\r\n  enableHeader: function(header) {\r\n    header.style.color = '';\r\n  },\r\n  enableLabel: function(label) {\r\n    label.style.color = '';\r\n  },\r\n  getInfoButton: function(text) {\r\n    var icon = document.createElement('span');\r\n    icon.innerText = \"â\";\r\n    icon.style.fontSize = \"16px\";\r\n    icon.style.fontWeight = \"bold\";\r\n    icon.style.padding = \".25rem\";\r\n    icon.style.position = \"relative\";\r\n    icon.style.display = \"inline-block\";\r\n\r\n    var tooltip = document.createElement('span');\r\n    tooltip.style.fontSize = \"12px\";\r\n    icon.style.fontWeight = \"normal\";\r\n    tooltip.style[\"font-family\"] = \"sans-serif\";\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style[\"background-color\"] = \"rgba(50, 50, 50, .75)\";\r\n    tooltip.style.margin = \"0 .25rem\";\r\n    tooltip.style.color = \"#FAFAFA\";\r\n    tooltip.style.padding = \".5rem 1rem\";\r\n    tooltip.style[\"border-radius\"] = \".25rem\";\r\n    tooltip.style.width = \"20rem\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.innerText = text;\r\n    icon.onmouseover = function() {\r\n      tooltip.style.visibility = \"visible\";\r\n    };\r\n    icon.onmouseleave = function() {\r\n      tooltip.style.visibility = \"hidden\";\r\n    };\r\n\r\n    icon.appendChild(tooltip);\r\n\r\n    return icon;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = document.createElement('label');\r\n    el.appendChild(document.createTextNode(text));\r\n    return el;\r\n  },\r\n  getCheckboxLabel: function(text) {\r\n    var el = this.getFormInputLabel(text);\r\n    el.style.fontWeight = 'normal';\r\n    return el;\r\n  },\r\n  getHeader: function(text) {\r\n    var el = document.createElement('h3');\r\n    if(typeof text === \"string\") {\r\n      el.textContent = text;\r\n    }\r\n    else {\r\n      el.appendChild(text);\r\n    }\r\n\r\n    return el;\r\n  },\r\n  getCheckbox: function() {\r\n    var el = this.getFormInputField('checkbox');\r\n    el.style.display = 'inline-block';\r\n    el.style.width = 'auto';\r\n    return el;\r\n  },\r\n  getMultiCheckboxHolder: function(controls,label,description) {\r\n    var el = document.createElement('div');\r\n\r\n    if(label) {\r\n      label.style.display = 'block';\r\n      el.appendChild(label);\r\n    }\r\n\r\n    for(var i in controls) {\r\n      if(!controls.hasOwnProperty(i)) continue;\r\n      controls[i].style.display = 'inline-block';\r\n      controls[i].style.marginRight = '20px';\r\n      el.appendChild(controls[i]);\r\n    }\r\n\r\n    if(description) el.appendChild(description);\r\n\r\n    return el;\r\n  },\r\n  getSelectInput: function(options) {\r\n    var select = document.createElement('select');\r\n    if(options) this.setSelectOptions(select, options);\r\n    return select;\r\n  },\r\n  getSwitcher: function(options) {\r\n    var switcher = this.getSelectInput(options);\r\n    switcher.style.backgroundColor = 'transparent';\r\n    switcher.style.display = 'inline-block';\r\n    switcher.style.fontStyle = 'italic';\r\n    switcher.style.fontWeight = 'normal';\r\n    switcher.style.height = 'auto';\r\n    switcher.style.marginBottom = 0;\r\n    switcher.style.marginLeft = '5px';\r\n    switcher.style.padding = '0 0 0 3px';\r\n    switcher.style.width = 'auto';\r\n    return switcher;\r\n  },\r\n  getSwitcherOptions: function(switcher) {\r\n    return switcher.getElementsByTagName('option');\r\n  },\r\n  setSwitcherOptions: function(switcher, options, titles) {\r\n    this.setSelectOptions(switcher, options, titles);\r\n  },\r\n  setSelectOptions: function(select, options, titles) {\r\n    titles = titles || [];\r\n    select.innerHTML = '';\r\n    for(var i=0; i<options.length; i++) {\r\n      var option = document.createElement('option');\r\n      option.setAttribute('value',options[i]);\r\n      option.textContent = titles[i] || options[i];\r\n      select.appendChild(option);\r\n    }\r\n  },\r\n  getTextareaInput: function() {\r\n    var el = document.createElement('textarea');\r\n    el.style = el.style || {};\r\n    el.style.width = '100%';\r\n    el.style.height = '300px';\r\n    el.style.boxSizing = 'border-box';\r\n    return el;\r\n  },\r\n  getRangeInput: function(min,max,step) {\r\n    var el = this.getFormInputField('range');\r\n    el.setAttribute('min',min);\r\n    el.setAttribute('max',max);\r\n    el.setAttribute('step',step);\r\n    return el;\r\n  },\r\n  getFormInputField: function(type) {\r\n    var el = document.createElement('input');\r\n    el.setAttribute('type',type);\r\n    return el;\r\n  },\r\n  afterInputReady: function(input) {\r\n\r\n  },\r\n  getFormControl: function(label, input, description, infoText) {\r\n    var el = document.createElement('div');\r\n    el.classList.add('form-control');\r\n    if(label) el.appendChild(label);\r\n    if(input.type === 'checkbox' && label) {\r\n      label.insertBefore(input,label.firstChild);\r\n      if(infoText) label.appendChild(infoText);\r\n    }\r\n    else {\r\n      if(infoText) label.appendChild(infoText);\r\n      el.appendChild(input);\r\n    }\r\n\r\n    if(description) el.appendChild(description);\r\n    return el;\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.style = el.style || {};\r\n    el.style.paddingLeft = '10px';\r\n    el.style.marginLeft = '10px';\r\n    el.style.borderLeft = '1px solid #ccc';\r\n    return el;\r\n  },\r\n  getTopIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.style = el.style || {};\r\n    el.style.paddingLeft = '10px';\r\n    el.style.marginLeft = '10px';\r\n    return el;\r\n  },\r\n  getChildEditorHolder: function() {\r\n    return document.createElement('div');\r\n  },\r\n  getDescription: function(text) {\r\n    var el = document.createElement('p');\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    return el;\r\n  },\r\n  getCheckboxDescription: function(text) {\r\n    return this.getDescription(text);\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    return this.getDescription(text);\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    return this.getButtonHolder();\r\n  },\r\n  getButtonHolder: function() {\r\n    return document.createElement('div');\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el = document.createElement('button');\r\n    el.type = 'button';\r\n    this.setButtonText(el,text,icon,title);\r\n    return el;\r\n  },\r\n  setButtonText: function(button, text, icon, title) {\r\n    // Clear previous contents. https://jsperf.com/innerhtml-vs-removechild/37\r\n    while (button.firstChild) {\r\n      button.removeChild(button.firstChild);\r\n    }\r\n    if(icon) {\r\n      button.appendChild(icon);\r\n      text = ' ' + text;\r\n    }\r\n    var spanEl = document.createElement('span');\r\n    spanEl.appendChild(document.createTextNode(text));\r\n    button.appendChild(spanEl);\r\n    if(title) button.setAttribute('title',title);\r\n  },\r\n  getTable: function() {\r\n    return document.createElement('table');\r\n  },\r\n  getTableRow: function() {\r\n    return document.createElement('tr');\r\n  },\r\n  getTableHead: function() {\r\n    return document.createElement('thead');\r\n  },\r\n  getTableBody: function() {\r\n    return document.createElement('tbody');\r\n  },\r\n  getTableHeaderCell: function(text) {\r\n    var el = document.createElement('th');\r\n    el.textContent = text;\r\n    return el;\r\n  },\r\n  getTableCell: function() {\r\n    var el = document.createElement('td');\r\n    return el;\r\n  },\r\n  getErrorMessage: function(text) {\r\n    var el = document.createElement('p');\r\n    el.style = el.style || {};\r\n    el.style.color = 'red';\r\n    el.appendChild(document.createTextNode(text));\r\n    return el;\r\n  },\r\n  addInputError: function(input, text) {\r\n  },\r\n  removeInputError: function(input) {\r\n  },\r\n  addTableRowError: function(row) {\r\n  },\r\n  removeTableRowError: function(row) {\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = \"<div style='float: left; width: 130px;' class='tabs' id='\" + pName + \"'></div><div class='content' style='margin-left: 120px;' id='\" + pName + \"'></div><div style='clear:both;'></div>\";\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = \"<div class='tabs' style='margin-left: 10px;' id='\" + pName + \"'></div><div style='clear:both;'></div><div class='content' id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  applyStyles: function(el,styles) {\r\n    for(var i in styles) {\r\n      if(!styles.hasOwnProperty(i)) continue;\r\n      el.style[i] = styles[i];\r\n    }\r\n  },\r\n  closest: function(elem, selector) {\r\n    while (elem && elem !== document) {\r\n      if (elem[matchKey]) {\r\n        if (elem[matchKey](selector)) {\r\n          return elem;\r\n        } else {\r\n          elem = elem.parentNode;\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  insertBasicTopTab: function(tab, newTabs_holder ) {\r\n    newTabs_holder.firstChild.insertBefore(tab,newTabs_holder.firstChild.firstChild);\r\n  },\r\n  getTab: function(span, tabId) {\r\n    var el = document.createElement('div');\r\n    el.appendChild(span);\r\n    el.id = tabId;\r\n    el.style = el.style || {};\r\n    this.applyStyles(el,{\r\n      border: '1px solid #ccc',\r\n      borderWidth: '1px 0 1px 1px',\r\n      textAlign: 'center',\r\n      lineHeight: '30px',\r\n      borderRadius: '5px',\r\n      borderBottomRightRadius: 0,\r\n      borderTopRightRadius: 0,\r\n      fontWeight: 'bold',\r\n      cursor: 'pointer'\r\n    });\r\n    return el;\r\n  },\r\n  getTopTab: function(span, tabId) {\r\n    var el = document.createElement('div');\r\n    el.id = tabId;\r\n    el.appendChild(span);\r\n    el.style = el.style || {};\r\n    this.applyStyles(el,{\r\n      float: 'left',\r\n      border: '1px solid #ccc',\r\n      borderWidth: '1px 1px 0px 1px',\r\n      textAlign: 'center',\r\n      lineHeight: '30px',\r\n      borderRadius: '5px',\r\n      paddingLeft:'5px',\r\n      paddingRight:'5px',\r\n      borderBottomRightRadius: 0,\r\n      borderBottomLeftRadius: 0,\r\n      fontWeight: 'bold',\r\n      cursor: 'pointer'\r\n    });\r\n    return el;\r\n  },\r\n  getTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTopTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTabContent: function() {\r\n    return this.getIndentedPanel();\r\n  },\r\n  getTopTabContent: function() {\r\n    return this.getTopIndentedPanel();\r\n  },\r\n  markTabActive: function(row) {\r\n    this.applyStyles(row.tab,{\r\n      opacity: 1,\r\n      background: 'white'\r\n    });\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = '';\r\n    }\r\n    else {\r\n      row.container.style.display = '';\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    this.applyStyles(row.tab,{\r\n      opacity:0.5,\r\n      background: ''\r\n    });\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = 'none';\r\n    }\r\n    else {\r\n      row.container.style.display = 'none';\r\n    }\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  addTopTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  getBlockLink: function() {\r\n    var link = document.createElement('a');\r\n    link.style.display = 'block';\r\n    return link;\r\n  },\r\n  getBlockLinkHolder: function() {\r\n    var el = document.createElement('div');\r\n    return el;\r\n  },\r\n  getLinksHolder: function() {\r\n    var el = document.createElement('div');\r\n    return el;\r\n  },\r\n  createMediaLink: function(holder,link,media) {\r\n    holder.appendChild(link);\r\n    media.style.width='100%';\r\n    holder.appendChild(media);\r\n  },\r\n  createImageLink: function(holder,link,image) {\r\n    holder.appendChild(link);\r\n    link.appendChild(image);\r\n  },\r\n  getFirstTab: function(holder){\r\n    return holder.firstChild.firstChild;\r\n  },\r\n  getInputGroup: function(input, buttons) {\r\n    return undefined;\r\n  },\r\n  cleanText: function(txt) {\r\n    // Clean out HTML tags from txt\r\n    var tmp = document.createElement('div');\r\n    tmp.innerHTML = txt;\r\n    return (tmp.textContent || tmp.innerText);\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.bootstrap2 = JSONEditor.AbstractTheme.extend({\r\n  getRangeInput: function(min, max, step) {\r\n    // TODO: use bootstrap slider\r\n    return this._super(min, max, step);\r\n  },\r\n  getGridContainer: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('container-fluid');\r\n    return el;\r\n  },\r\n  getGridRow: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('row-fluid');\r\n    return el;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.display = 'inline-block';\r\n    el.style.fontWeight = 'bold';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size) {\r\n    el.classList.add('span'+size);\r\n  },\r\n  getSelectInput: function(options) {\r\n    var input = this._super(options);\r\n    input.style.width = 'auto';\r\n    input.style.maxWidth = '98%';\r\n    return input;\r\n  },\r\n  getFormInputField: function(type) {\r\n    var el = this._super(type);\r\n    el.style.width = '98%';\r\n    return el;\r\n  },\r\n  afterInputReady: function(input) {\r\n    if(input.controlgroup) return;\r\n    input.controlgroup = this.closest(input,'.control-group');\r\n    input.controls = this.closest(input,'.controls');\r\n    if(this.closest(input,'.compact')) {\r\n      input.controlgroup.className = input.controlgroup.className.replace(/control-group/g,'').replace(/[ ]{2,}/g,' ');\r\n      input.controls.className = input.controlgroup.className.replace(/controls/g,'').replace(/[ ]{2,}/g,' ');\r\n      input.style.marginBottom = 0;\r\n    }\r\n    if (this.queuedInputErrorText) {\r\n        var text = this.queuedInputErrorText;\r\n        delete this.queuedInputErrorText;\r\n        this.addInputError(input,text);\r\n    }\r\n\r\n    // TODO: use bootstrap slider\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('well','well-small');\r\n    el.style.paddingBottom = 0;\r\n    return el;\r\n  },\r\n  getInfoButton: function(text) {\r\n    var icon = document.createElement('span');\r\n    icon.classList.add('icon-info-sign', 'pull-right');\r\n    icon.style.padding = \".25rem\";\r\n    icon.style.position = \"relative\";\r\n    icon.style.display = \"inline-block\";\r\n\r\n    var tooltip = document.createElement('span');\r\n    tooltip.style[\"font-family\"] = \"sans-serif\";\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style[\"background-color\"] = \"rgba(50, 50, 50, .75)\";\r\n    tooltip.style.margin = \"0 .25rem\";\r\n    tooltip.style.color = \"#FAFAFA\";\r\n    tooltip.style.padding = \".5rem 1rem\";\r\n    tooltip.style[\"border-radius\"] = \".25rem\";\r\n    tooltip.style.width = \"25rem\";\r\n    tooltip.style.transform = \"translateX(-27rem) translateY(-.5rem)\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.innerText = text;\r\n    icon.onmouseover = function() {\r\n      tooltip.style.visibility = \"visible\";\r\n    };\r\n    icon.onmouseleave = function() {\r\n      tooltip.style.visibility = \"hidden\";\r\n    };\r\n\r\n    icon.appendChild(tooltip);\r\n\r\n    return icon;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = document.createElement('p');\r\n    el.classList.add('help-inline');\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    return el;\r\n  },\r\n  getFormControl: function(label, input, description, infoText) {\r\n    var ret = document.createElement('div');\r\n    ret.classList.add('control-group');\r\n\r\n    var controls = document.createElement('div');\r\n    controls.classList.add('controls');\r\n\r\n    if(label && input.getAttribute('type') === 'checkbox') {\r\n      ret.appendChild(controls);\r\n      label.classList.add('checkbox');\r\n      label.appendChild(input);\r\n      controls.appendChild(label);\r\n      if(infoText) controls.appendChild(infoText);\r\n      controls.style.height = '30px';\r\n    }\r\n    else {\r\n      if(label) {\r\n        label.classList.add('control-label');\r\n        ret.appendChild(label);\r\n      }\r\n      if(infoText) controls.appendChild(infoText);\r\n      controls.appendChild(input);\r\n      ret.appendChild(controls);\r\n    }\r\n\r\n    if(description) controls.appendChild(description);\r\n\r\n    return ret;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.marginLeft = '10px';\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('btn-group');\r\n    return el;\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el =  this._super(text, icon, title);\r\n    el.classList.add('btn', 'btn-default');\r\n    return el;\r\n  },\r\n  getTable: function() {\r\n    var el = document.createElement('table');\r\n    el.classList.add('table', 'table-bordered');\r\n    el.style.width = 'auto';\r\n    el.style.maxWidth = 'none';\r\n    return el;\r\n  },\r\n  addInputError: function(input,text) {\r\n    if(!input.controlgroup) {\r\n        this.queuedInputErrorText = text;\r\n        return;\r\n    }\r\n    if(!input.controlgroup || !input.controls) return;\r\n    input.controlgroup.classList.add('error');\r\n    if(!input.errmsg) {\r\n      input.errmsg = document.createElement('p');\r\n      input.errmsg.classList.add('help-block', 'errormsg');\r\n      input.controls.appendChild(input.errmsg);\r\n    }\r\n    else {\r\n      input.errmsg.style.display = '';\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if(!input.controlgroup) {\r\n        delete this.queuedInputErrorText;\r\n    }\r\n    if(!input.errmsg) return;\r\n    input.errmsg.style.display = 'none';\r\n    input.controlgroup.classList.remove('error');\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('tabbable', 'tabs-left');\r\n    el.innerHTML = \"<ul class='nav nav-tabs'  id='\" + pName + \"'></ul><div class='tab-content well well-small' id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('tabbable', 'tabs-over');\r\n    el.innerHTML = \"<ul class='nav nav-tabs' id='\" + pName + \"'></ul><div class='tab-content well well-small'  id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  getTab: function(text,tabId) {\r\n    var el = document.createElement('li');\r\n    el.classList.add('nav-item');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#' + tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTopTab: function(text,tabId) {\r\n    var el = document.createElement('li');\r\n    el.classList.add('nav-item');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#' + tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTopTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.add('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.add('active');\r\n    }\r\n    else {\r\n      row.container.classList.add('active');\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.remove('active');\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.remove('active');\r\n    }\r\n    else {\r\n      row.container.classList.remove('active');\r\n    }\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  addTopTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  getProgressBar: function() {\r\n    var container = document.createElement('div');\r\n    container.classList.add('progress');\r\n\r\n    var bar = document.createElement('div');\r\n    bar.classList.add('bar');\r\n    bar.style.width = '0%';\r\n    container.appendChild(bar);\r\n\r\n    return container;\r\n  },\r\n  updateProgressBar: function(progressBar, progress) {\r\n    if (!progressBar) return;\r\n\r\n    progressBar.firstChild.style.width = progress + \"%\";\r\n  },\r\n  updateProgressBarUnknown: function(progressBar) {\r\n    if (!progressBar) return;\r\n\r\n    progressBar.classList.add('progress', 'progress-striped', 'active');\r\n    progressBar.firstChild.style.width = '100%';\r\n  },\r\n  getInputGroup: function(input, buttons) {\r\n    if (!input) return;\r\n\r\n    var inputGroupContainer = document.createElement('div');\r\n    inputGroupContainer.classList.add('input-append');\r\n    inputGroupContainer.appendChild(input);\r\n\r\n    for(var i=0;i<buttons.length;i++) {\r\n      buttons[i].classList.add('btn');\r\n      inputGroupContainer.appendChild(buttons[i]);\r\n    }\r\n\r\n    return inputGroupContainer;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.bootstrap3 = JSONEditor.AbstractTheme.extend({\r\n  getSelectInput: function(options) {\r\n    var el = this._super(options);\r\n    el.classList.add('form-control');\r\n    //el.style.width = 'auto';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size, offset) {\r\n    el.classList.add('col-md-'+size);\r\n    if (offset) {\r\n      el.classList.add('col-md-offset-'+offset);\r\n    }\r\n  },\r\n  afterInputReady: function(input) {\r\n    if(input.controlgroup) return;\r\n    input.controlgroup = this.closest(input,'.form-group');\r\n    if(this.closest(input,'.compact')) {\r\n      input.controlgroup.style.marginBottom = 0;\r\n    }\r\n    if (this.queuedInputErrorText) {\r\n        var text = this.queuedInputErrorText;\r\n        delete this.queuedInputErrorText;\r\n        this.addInputError(input,text);\r\n    }\r\n\r\n    // TODO: use bootstrap slider\r\n  },\r\n  getTextareaInput: function() {\r\n    var el = document.createElement('textarea');\r\n    el.classList.add('form-control');\r\n    return el;\r\n  },\r\n  getRangeInput: function(min, max, step) {\r\n    // TODO: use better slider\r\n    return this._super(min, max, step);\r\n  },\r\n  getFormInputField: function(type) {\r\n    var el = this._super(type);\r\n    if(type !== 'checkbox') {\r\n      el.classList.add('form-control');\r\n    }\r\n    return el;\r\n  },\r\n  getFormControl: function(label, input, description, infoText) {\r\n    var group = document.createElement('div');\r\n\r\n    if(label && input.type === 'checkbox') {\r\n      group.classList.add('checkbox');\r\n      label.appendChild(input);\r\n      label.style.fontSize = '14px';\r\n      group.style.marginTop = '0';\r\n      if(infoText) group.appendChild(infoText);\r\n      group.appendChild(label);\r\n      input.style.position = 'relative';\r\n      input.style.cssFloat = 'left';\r\n    }\r\n    else {\r\n      group.classList.add('form-group');\r\n      if(label) {\r\n        label.classList.add('control-label');\r\n        group.appendChild(label);\r\n      }\r\n\r\n      if(infoText) group.appendChild(infoText);\r\n      group.appendChild(input);\r\n    }\r\n\r\n    if(description) group.appendChild(description);\r\n\r\n    return group;\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('well', 'well-sm');\r\n    el.style.paddingBottom = 0;\r\n    return el;\r\n  },\r\n  getInfoButton: function(text) {\r\n    var icon = document.createElement('span');\r\n    icon.classList.add('glyphicon', 'glyphicon-info-sign', 'pull-right');\r\n    icon.style.padding = \".25rem\";\r\n    icon.style.position = \"relative\";\r\n    icon.style.display = \"inline-block\";\r\n\r\n    var tooltip = document.createElement('span');\r\n    tooltip.style[\"font-family\"] = \"sans-serif\";\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style[\"background-color\"] = \"rgba(50, 50, 50, .75)\";\r\n    tooltip.style.margin = \"0 .25rem\";\r\n    tooltip.style.color = \"#FAFAFA\";\r\n    tooltip.style.padding = \".5rem 1rem\";\r\n    tooltip.style[\"border-radius\"] = \".25rem\";\r\n    tooltip.style.width = \"25rem\";\r\n    tooltip.style.transform = \"translateX(-27rem) translateY(-.5rem)\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.innerText = text;\r\n    icon.onmouseover = function() {\r\n      tooltip.style.visibility = \"visible\";\r\n    };\r\n    icon.onmouseleave = function() {\r\n      tooltip.style.visibility = \"hidden\";\r\n    };\r\n\r\n    icon.appendChild(tooltip);\r\n\r\n    return icon;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = document.createElement('p');\r\n    el.classList.add('help-block');\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    return el;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.marginLeft = '10px';\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('btn-group');\r\n    return el;\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el = this._super(text, icon, title);\r\n    el.classList.add('btn', 'btn-default');\r\n    return el;\r\n  },\r\n  getTable: function() {\r\n    var el = document.createElement('table');\r\n    el.classList.add('table', 'table-bordered');\r\n    el.style.width = 'auto';\r\n    el.style.maxWidth = 'none';\r\n    return el;\r\n  },\r\n\r\n  addInputError: function(input,text) {\r\n    if(!input.controlgroup) {\r\n        this.queuedInputErrorText = text;\r\n        return;\r\n    }\r\n    input.controlgroup.classList.add('has-error');\r\n    if(!input.errmsg) {\r\n      input.errmsg = document.createElement('p');\r\n      input.errmsg.classList.add('help-block', 'errormsg');\r\n      input.controlgroup.appendChild(input.errmsg);\r\n    }\r\n    else {\r\n      input.errmsg.style.display = '';\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if(!input.controlgroup) {\r\n        delete this.queuedInputErrorText;\r\n    }\r\n    if(!input.errmsg) return;\r\n    input.errmsg.style.display = 'none';\r\n    input.controlgroup.classList.remove('has-error');\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = \"<ul class='col-md-2 nav nav-pills nav-stacked' id='\" + pName + \"' role='tablist'></ul>\" +\r\n      \"<div class='col-md-10 tab-content well well-small'  id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = \"<ul class='nav nav-tabs' id='\" + pName + \"' role='tablist'></ul>\" +\r\n      \"<div class='tab-content well well-small'  id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  getTab: function(text, tabId) {\r\n    var li = document.createElement('li');\r\n    li.setAttribute('role', 'presentation');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    a.setAttribute('aria-controls', tabId);\r\n    a.setAttribute('role', 'tab');\r\n    a.setAttribute('data-toggle', 'tab');\r\n    li.appendChild(a);\r\n    return li;\r\n  },\r\n  getTopTab: function(text, tabId) {\r\n    var li = document.createElement('li');\r\n    li.setAttribute('role', 'presentation');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    a.setAttribute('aria-controls', tabId);\r\n    a.setAttribute('role', 'tab');\r\n    a.setAttribute('data-toggle', 'tab');\r\n    li.appendChild(a);\r\n    return li;\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    el.setAttribute('role', 'tabpanel');\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    el.setAttribute('role', 'tabpanel');\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.add('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.add('active');\r\n    }\r\n    else {\r\n      row.container.classList.add('active');\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.remove('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.remove('active');\r\n    }\r\n    else {\r\n      row.container.classList.remove('active');\r\n    }\r\n  },\r\n  getProgressBar: function() {\r\n    var min = 0, max = 100, start = 0;\r\n\r\n    var container = document.createElement('div');\r\n    container.classList.add('progress');\r\n\r\n    var bar = document.createElement('div');\r\n    bar.classList.add('progress-bar');\r\n    bar.setAttribute('role', 'progressbar');\r\n    bar.setAttribute('aria-valuenow', start);\r\n    bar.setAttribute('aria-valuemin', min);\r\n    bar.setAttribute('aria-valuenax', max);\r\n    bar.innerHTML = start + \"%\";\r\n    container.appendChild(bar);\r\n\r\n    return container;\r\n  },\r\n  updateProgressBar: function(progressBar, progress) {\r\n    if (!progressBar) return;\r\n\r\n    var bar = progressBar.firstChild;\r\n    var percentage = progress + \"%\";\r\n    bar.setAttribute('aria-valuenow', progress);\r\n    bar.style.width = percentage;\r\n    bar.innerHTML = percentage;\r\n  },\r\n  updateProgressBarUnknown: function(progressBar) {\r\n    if (!progressBar) return;\r\n\r\n    var bar = progressBar.firstChild;\r\n    progressBar.classList.add('progress', 'progress-striped', 'active');\r\n    bar.removeAttribute('aria-valuenow');\r\n    bar.style.width = '100%';\r\n    bar.innerHTML = '';\r\n  },\r\n  getInputGroup: function(input, buttons) {\r\n    if (!input) return;\r\n\r\n    var inputGroupContainer = document.createElement('div');\r\n    inputGroupContainer.classList.add('input-group');\r\n    inputGroupContainer.appendChild(input);\r\n\r\n    var inputGroup = document.createElement('div');\r\n    inputGroup.classList.add('input-group-btn');\r\n    inputGroupContainer.appendChild(inputGroup);\r\n\r\n    for(var i=0;i<buttons.length;i++) {\r\n      inputGroup.appendChild(buttons[i]);\r\n    }\r\n\r\n    return inputGroupContainer;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.bootstrap4 = JSONEditor.AbstractTheme.extend({\r\n  getSelectInput: function(options) {\r\n    var el = this._super(options);\r\n    el.classList.add(\"form-control\");\r\n    //el.style.width = 'auto';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size, offset) {\r\n    el.classList.add('col-md-'+size);\r\n    if (offset) {\r\n      el.classList.add('offset-md-'+offset);\r\n    }\r\n  },\r\n  afterInputReady: function(input) {\r\n    if (input.controlgroup) return;\r\n    input.controlgroup = this.closest(input, \".form-group\");\r\n    if (this.closest(input, \".compact\")) {\r\n      input.controlgroup.style.marginBottom = 0;\r\n    }\r\n\r\n    // TODO: use bootstrap slider\r\n  },\r\n  getTextareaInput: function() {\r\n    var el = document.createElement(\"textarea\");\r\n    el.classList.add(\"form-control\");\r\n    return el;\r\n  },\r\n  getRangeInput: function(min, max, step) {\r\n    // TODO: use better slider\r\n    return this._super(min, max, step);\r\n  },\r\n  getFormInputField: function(type) {\r\n    var el = this._super(type);\r\n    if (type !== \"checkbox\") {\r\n      el.classList.add(\"form-control\");\r\n    }\r\n    return el;\r\n  },\r\n  getFormControl: function(label, input, description) {\r\n    var group = document.createElement(\"div\");\r\n\r\n    if (label && input.type === \"checkbox\") {\r\n      group.classList.add(\"checkbox\");\r\n      label.appendChild(input);\r\n      label.style.fontSize = \"14px\";\r\n      group.style.marginTop = \"0\";\r\n      group.appendChild(label);\r\n      input.style.position = \"relative\";\r\n      input.style.cssFloat = \"left\";\r\n    } else {\r\n      group.classList.add(\"form-group\");\r\n      if (label) {\r\n        label.classList.add(\"form-control-label\");\r\n        group.appendChild(label);\r\n      }\r\n      group.appendChild(input);\r\n    }\r\n\r\n    if (description) group.appendChild(description);\r\n\r\n    return group;\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement(\"div\");\r\n    el.classList.add('card', 'card-body', 'bg-light');\r\n    return el;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = document.createElement(\"p\");\r\n    el.classList.add('form-text');\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    return el;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.marginLeft = \"10px\";\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement(\"div\");\r\n    el.classList.add(\"btn-group\");\r\n    return el;\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el = this._super(text, icon, title);\r\n    el.classList.add(\"btn\", \"btn-secondary\");\r\n    return el;\r\n  },\r\n  getTable: function() {\r\n    var el = document.createElement(\"table\");\r\n    el.classList.add(\"table-bordered\", \"table-sm\");\r\n    el.style.width = \"auto\";\r\n    el.style.maxWidth = \"none\";\r\n    return el;\r\n  },\r\n\r\n  addInputError: function(input, text) {\r\n    if (!input.controlgroup) return;\r\n    input.controlgroup.classList.add('has-danger');\r\n    input.classList.add('is-invalid');\r\n    if (!input.errmsg) {\r\n      input.errmsg = document.createElement(\"p\");\r\n      input.errmsg.classList.add(\"form-text\", \"invalid-feedback\");\r\n      input.controlgroup.appendChild(input.errmsg);\r\n    } else {\r\n      input.errmsg.style.display = \"\";\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if (!input.errmsg) return;\r\n    input.errmsg.style.display = \"none\";\r\n    input.classList.remove('is-invalid');\r\n    input.controlgroup.classList.remove('has-danger');\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var el = document.createElement(\"div\");\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    el.innerHTML = \"<div class='col-md-2' id='\" + pName + \"'><ul class='nav flex-column nav-pills'></ul></div><div class='tab-content col-md-10' id='\" + pName + \"'></div>\";\r\n    el.classList.add(\"row\");\r\n    return el;\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].children[0].appendChild(tab);\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = \"<ul class='nav nav-tabs' id='\" + pName + \"'></ul><div class='card-body tab-content' id='\" + pName + \"'></div>\";\r\n    return el;\r\n  },\r\n  getTab: function(text,tabId) {\r\n    var liel = document.createElement('li');\r\n    liel.classList.add('nav-item');\r\n    var ael = document.createElement(\"a\");\r\n    ael.classList.add(\"nav-link\");\r\n    ael.setAttribute(\"style\",'padding:10px;');\r\n    ael.setAttribute(\"href\", \"#\" + tabId);\r\n    ael.setAttribute('data-toggle', 'tab');\r\n    ael.appendChild(text);\r\n    liel.appendChild(ael);\r\n    return liel;\r\n  },\r\n  getTopTab: function(text, tabId) {\r\n    var el = document.createElement('li');\r\n    el.classList.add('nav-item');\r\n    var a = document.createElement('a');\r\n    a.classList.add('nav-link');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.setAttribute('data-toggle', 'tab');\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    el.setAttribute('role', 'tabpanel');\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-pane');\r\n    el.setAttribute('role', 'tabpanel');\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.firstChild.classList.add('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.add('active');\r\n    }\r\n    else {\r\n      row.container.classList.add('active');\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.firstChild.classList.remove('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.remove('active');\r\n    }\r\n    else {\r\n      row.container.classList.remove('active');\r\n    }\r\n  },\r\n  getProgressBar: function() {\r\n    var min = 0,\r\n      max = 100,\r\n      start = 0;\r\n\r\n    var container = document.createElement(\"div\");\r\n    container.classList.add(\"progress\");\r\n\r\n    var bar = document.createElement(\"div\");\r\n    bar.classList.add(\"progress-bar\");\r\n    bar.setAttribute(\"role\", \"progressbar\");\r\n    bar.setAttribute(\"aria-valuenow\", start);\r\n    bar.setAttribute(\"aria-valuemin\", min);\r\n    bar.setAttribute(\"aria-valuenax\", max);\r\n    bar.innerHTML = start + \"%\";\r\n    container.appendChild(bar);\r\n\r\n    return container;\r\n  },\r\n  updateProgressBar: function(progressBar, progress) {\r\n    if (!progressBar) return;\r\n\r\n    var bar = progressBar.firstChild;\r\n    var percentage = progress + \"%\";\r\n    bar.setAttribute(\"aria-valuenow\", progress);\r\n    bar.style.width = percentage;\r\n    bar.innerHTML = percentage;\r\n  },\r\n  updateProgressBarUnknown: function(progressBar) {\r\n    if (!progressBar) return;\r\n\r\n    var bar = progressBar.firstChild;\r\n    progressBar.classList.add('progress', 'progress-striped', 'active');\r\n    bar.removeAttribute(\"aria-valuenow\");\r\n    bar.style.width = \"100%\";\r\n    bar.innerHTML = \"\";\r\n  },\r\n  getInputGroup: function(input, buttons) {\r\n    if (!input) return;\r\n\r\n    var inputGroupContainer = document.createElement('div');\r\n    inputGroupContainer.classList.add('input-group');\r\n    inputGroupContainer.appendChild(input);\r\n\r\n    var inputGroup = document.createElement('div');\r\n    inputGroup.classList.add('input-group-prepend');\r\n    inputGroupContainer.appendChild(inputGroup);\r\n\r\n    for(var i=0;i<buttons.length;i++) {\r\n      inputGroup.appendChild(buttons[i]);\r\n    }\r\n\r\n    return inputGroupContainer;\r\n  }\r\n});\r\n\r\n// Base Foundation theme\r\nJSONEditor.defaults.themes.foundation = JSONEditor.AbstractTheme.extend({\r\n  getChildEditorHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.style.marginBottom = '15px';\r\n    return el;\r\n  },\r\n  getSelectInput: function(options) {\r\n    var el = this._super(options);\r\n    el.style.minWidth = 'none';\r\n    el.style.padding = '5px';\r\n    el.style.marginTop = '3px';\r\n    return el;\r\n  },\r\n  getSwitcher: function(options) {\r\n    var el = this._super(options);\r\n    el.style.paddingRight = '8px';\r\n    return el;\r\n  },\r\n  afterInputReady: function(input) {\r\n    if(input.group) return;\r\n    if(this.closest(input,'.compact')) {\r\n      input.style.marginBottom = 0;\r\n    }\r\n    input.group = this.closest(input,'.form-control');\r\n    if (this.queuedInputErrorText) {\r\n        var text = this.queuedInputErrorText;\r\n        delete this.queuedInputErrorText;\r\n        this.addInputError(input,text);\r\n    }\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.display = 'inline-block';\r\n    return el;\r\n  },\r\n  getFormInputField: function(type) {\r\n    var el = this._super(type);\r\n    el.style.width = '100%';\r\n    el.style.marginBottom = type==='checkbox'? '0' : '12px';\r\n    return el;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = document.createElement('p');\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    el.style.marginTop = '-10px';\r\n    el.style.fontStyle = 'italic';\r\n    return el;\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('panel');\r\n    el.style.paddingBottom = 0;\r\n    return el;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.display = 'inline-block';\r\n    el.style.marginLeft = '10px';\r\n    el.style.verticalAlign = 'middle';\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('button-group');\r\n    return el;\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el = this._super(text, icon, title);\r\n    el.classList.add('small', 'button');\r\n    return el;\r\n  },\r\n  addInputError: function(input,text) {\r\n    if(!input.group) {\r\n        this.queuedInputErrorText = text;\r\n        return;\r\n    }\r\n    input.group.classList.add('error');\r\n\r\n    if(!input.errmsg) {\r\n      input.insertAdjacentHTML('afterend','<small class=\"error\"></small>');\r\n      input.errmsg = input.parentNode.getElementsByClassName('error')[0];\r\n    }\r\n    else {\r\n      input.errmsg.style.display = '';\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if(!input.group) {\r\n        delete this.queuedInputErrorText;\r\n    }\r\n    if(!input.errmsg) return;\r\n    input.group.classList.remove('error');\r\n    input.errmsg.style.display = 'none';\r\n  },\r\n  getProgressBar: function() {\r\n    var progressBar = document.createElement('div');\r\n    progressBar.classList.add('progress');\r\n\r\n    var meter = document.createElement('span');\r\n    meter.classList.add('meter');\r\n    meter.style.width = '0%';\r\n    progressBar.appendChild(meter);\r\n    return progressBar;\r\n  },\r\n  updateProgressBar: function(progressBar, progress) {\r\n    if (!progressBar) return;\r\n    progressBar.firstChild.style.width = progress + '%';\r\n  },\r\n  updateProgressBarUnknown: function(progressBar) {\r\n    if (!progressBar) return;\r\n    progressBar.firstChild.style.width = '100%';\r\n  },\r\n  getInputGroup: function(input, buttons) {\r\n    if (!input) return undefined;\r\n\r\n    var inputGroupContainer = document.createElement('div');\r\n    inputGroupContainer.classList.add('input-group');\r\n    input.classList.add('input-group-field');\r\n    inputGroupContainer.appendChild(input);\r\n\r\n    for(var i=0;i<buttons.length;i++) {\r\n      var inputGroup = document.createElement('div');\r\n      inputGroup.classList.add('input-group-button');\r\n      inputGroup.style.verticalAlign = 'top';\r\n      buttons[i].classList.remove('small');\r\n      inputGroup.appendChild(buttons[i]);\r\n      inputGroupContainer.appendChild(inputGroup);\r\n    }\r\n\r\n    return inputGroupContainer;\r\n  }\r\n});\r\n\r\n// Foundation 3 Specific Theme\r\nJSONEditor.defaults.themes.foundation3 = JSONEditor.defaults.themes.foundation.extend({\r\n  getHeaderButtonHolder: function() {\r\n    var el = this._super();\r\n    el.style.fontSize = '.6em';\r\n    return el;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.fontWeight = 'bold';\r\n    return el;\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('row');\r\n    el.innerHTML = '<dl class=\"tabs vertical two columns\" id=\"' + pName + '\"></dl><div class=\"tabs-content ten columns\" id=\"' + pName + '\"></div>';\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('row');\r\n    el.innerHTML = '<dl class=\"tabs horizontal\" style=\"padding-left: 10px; margin-left: 10px;\" id=\"' + pName + '\"></dl><div class=\"tabs-content twelve columns\" style=\"padding: 10px; margin-left: 10px;\" id=\"' + pName + '\"></div>';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size, offset) {\r\n    var sizes = ['zero','one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve'];\r\n    el.classList.add('columns', sizes[size]);\r\n    if (offset && offset < 11) {\r\n      el.classList.add('offset-by-' + sizes[offset]);\r\n    }\r\n  },\r\n  getTab: function(text, tabId) {\r\n    var el = document.createElement('dd');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTopTab: function(text, tabId) {\r\n    var el = document.createElement('dd');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTopTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('content', 'active');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('content', 'active');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.add('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = '';\r\n    }\r\n    else {\r\n      row.container.style.display = '';\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.remove('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = 'none';\r\n    }\r\n    else {\r\n      row.container.style.display = 'none';\r\n    }\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  addTopTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  }\r\n});\r\n\r\n// Foundation 4 Specific Theme\r\nJSONEditor.defaults.themes.foundation4 = JSONEditor.defaults.themes.foundation.extend({\r\n  getHeaderButtonHolder: function() {\r\n    var el = this._super();\r\n    el.style.fontSize = '.6em';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el, size, offset) {\r\n    el.classList.add('columns', 'large-' + size);\r\n    if (offset) {\r\n      el.classList.add('large-offset-' + offset);\r\n    }\r\n\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = this._super(text);\r\n    el.style.fontSize = '.8rem';\r\n    return el;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.fontWeight = 'bold';\r\n    return el;\r\n  }\r\n});\r\n\r\n// Foundation 5 Specific Theme\r\nJSONEditor.defaults.themes.foundation5 = JSONEditor.defaults.themes.foundation.extend({\r\n  getFormInputDescription: function(text) {\r\n    var el = this._super(text);\r\n    el.style.fontSize = '.8rem';\r\n    return el;\r\n  },\r\n  setGridColumnSize: function(el,size, offset) {\r\n    el.classList.add('columns', 'medium-'+size);\r\n    if (offset) {\r\n      el.classList.add('medium-offset-'+offset);\r\n    }\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var el = this._super(text,icon,title);\r\n    el.className = el.className.replace(/\\s*small/g,'') + ' tiny';\r\n    return el;\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.innerHTML = '<dl class=\"tabs vertical\" id=\"' + pName + '\"></dl><div class=\"tabs-content vertical\" id=\"' + pName + '\"></div>';\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('row');\r\n    el.innerHTML = '<dl class=\"tabs horizontal\" style=\"padding-left: 10px;\" id=\"' + pName + '\"></dl><div class=\"tabs-content horizontal\" style=\"padding: 10px;\" id=\"' + pName + '\"></div>';\r\n    return el;\r\n  },\r\n  getTab: function(text, tabId) {\r\n    var el = document.createElement('dd');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTopTab: function(text, tabId) {\r\n    var el = document.createElement('dd');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTopTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1];\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-content', 'active');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tab-content', 'active');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.add('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = '';\r\n    }\r\n    else {\r\n      row.container.style.display = '';\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.remove('active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = 'none';\r\n    }\r\n    else {\r\n      row.container.style.display = 'none';\r\n    }\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  },\r\n  addTopTab: function(holder, tab) {\r\n    holder.children[0].appendChild(tab);\r\n  }\r\n\r\n});\r\n\r\nJSONEditor.defaults.themes.foundation6 = JSONEditor.defaults.themes.foundation5.extend({\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('callout', 'secondary');\r\n    el.style = 'padding-left: 10px; margin-left: 10px;';\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('button-group', 'tiny');\r\n    el.style.marginBottom = 0;\r\n    return el;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.display = 'block';\r\n    return el;\r\n  },\r\n  getFormControl: function(label, input, description, infoText) {\r\n    var el = document.createElement('div');\r\n    el.classList.add('form-control');\r\n    if(label) el.appendChild(label);\r\n    if(input.type === 'checkbox') {\r\n      label.insertBefore(input,label.firstChild);\r\n    }\r\n    else if (label) {\r\n      if(infoText) label.appendChild(infoText);\r\n      label.appendChild(input);\r\n    } else {\r\n      if(infoText) el.appendChild(infoText);\r\n      el.appendChild(input);\r\n    }\r\n\r\n    if(description) label.appendChild(description);\r\n    return el;\r\n  },\r\n  addInputError: function(input,text) {\r\n    if(!input.group) return;\r\n    input.group.classList.add('error');\r\n\r\n    if(!input.errmsg) {\r\n      var errorEl = document.createElement('span');\r\n      errorEl.classList.add('form-error', 'is-visible');\r\n      input.group.getElementsByTagName('label')[0].appendChild(errorEl);\r\n\r\n      input.classList.add('is-invalid-input');\r\n\r\n      input.errmsg = errorEl;\r\n    }\r\n    else {\r\n      input.errmsg.style.display = '';\r\n      input.className = '';\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if(!input.errmsg) return;\r\n    input.classList.remove('is-invalid-input');\r\n    if(input.errmsg.parentNode) {\r\n      input.errmsg.parentNode.removeChild(input.errmsg);\r\n    }\r\n  },\r\n  getTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('grid-x');\r\n    el.innerHTML = '<div class=\"medium-2 cell\" style=\"float: left;\"><ul class=\"vertical tabs\" data-tabs id=\"' + pName + '\"></ul></div><div class=\"medium-10 cell\" style=\"float: left;\"><div class=\"tabs-content\" data-tabs-content=\"'+pName+'\"></div></div>';\r\n    return el;\r\n  },\r\n  getTopTabHolder: function(propertyName) {\r\n    var pName = (typeof propertyName === 'undefined')? \"\" : propertyName;\r\n    var el = document.createElement('div');\r\n    el.classList.add('grid-y');\r\n    el.innerHTML = '<div className=\"cell\"><ul class=\"tabs\" data-tabs id=\"' + pName + '\"></ul><div class=\"tabs-content\" data-tabs-content=\"' + pName + '\"></div></div>';\r\n    return el;\r\n\r\n\r\n  },\r\n  insertBasicTopTab: function(tab, newTabs_holder ) {\r\n    newTabs_holder.firstChild.firstChild.insertBefore(tab,newTabs_holder.firstChild.firstChild.firstChild);\r\n  },\r\n  getTab: function(text, tabId) {\r\n    var el = document.createElement('li');\r\n    el.classList.add('tabs-title');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#'+tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTopTab: function(text, tabId) {\r\n    var el = document.createElement('li');\r\n    el.classList.add('tabs-title');\r\n    var a = document.createElement('a');\r\n    a.setAttribute('href','#' + tabId);\r\n    a.appendChild(text);\r\n    el.appendChild(a);\r\n    return el;\r\n  },\r\n  getTabContentHolder: function(tab_holder) {\r\n    return tab_holder.children[1].firstChild;\r\n  },\r\n  getTopTabContentHolder: function(tab_holder) {\r\n    return tab_holder.firstChild.children[1];\r\n  },\r\n  getTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tabs-panel');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  getTopTabContent: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('tabs-panel');\r\n    el.style.paddingLeft = '5px';\r\n    return el;\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.add('is-active');\r\n    row.tab.firstChild.setAttribute('aria-selected', 'true');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.add('is-active');\r\n      row.rowPane.setAttribute('aria-selected', 'true');\r\n    }\r\n    else {\r\n      row.container.classList.add('is-active');\r\n      row.container.setAttribute('aria-selected', 'true');\r\n      }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.remove('is-active');\r\n    row.tab.firstChild.removeAttribute('aria-selected');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.classList.remove('is-active');\r\n      row.rowPane.removeAttribute('aria-selected');\r\n    }\r\n    else {\r\n      row.container.classList.remove('is-active');\r\n      row.container.removeAttribute('aria-selected');\r\n      }\r\n  },\r\n  addTab: function(holder, tab) {\r\n    holder.children[0].firstChild.appendChild(tab);\r\n  },\r\n  addTopTab: function(holder, tab) {\r\n    holder.firstChild.children[0].appendChild(tab);\r\n  },\r\n  getFirstTab: function(holder){\r\n    return holder.firstChild.firstChild.firstChild;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.html = JSONEditor.AbstractTheme.extend({\r\n  getFormInputLabel: function(text) {\r\n    var el = this._super(text);\r\n    el.style.display = 'block';\r\n    el.style.marginBottom = '3px';\r\n    el.style.fontWeight = 'bold';\r\n    return el;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = this._super(text);\r\n    el.style.fontSize = '.8em';\r\n    el.style.margin = 0;\r\n    el.style.display = 'inline-block';\r\n    el.style.fontStyle = 'italic';\r\n    return el;\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = this._super();\r\n    el.style.border = '1px solid #ddd';\r\n    el.style.padding = '5px';\r\n    el.style.margin = '10px';\r\n    el.style.borderRadius = '3px';\r\n    return el;\r\n  },\r\n  getTopIndentedPanel: function() {\r\n    return this.getIndentedPanel();\r\n  },\r\n  getChildEditorHolder: function() {\r\n    var el = this._super();\r\n    el.style.marginBottom = '8px';\r\n    return el;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.display = 'inline-block';\r\n    el.style.marginLeft = '10px';\r\n    el.style.fontSize = '.8em';\r\n    el.style.verticalAlign = 'middle';\r\n    return el;\r\n  },\r\n  getTable: function() {\r\n    var el = this._super();\r\n    el.style.borderBottom = '1px solid #ccc';\r\n    el.style.marginBottom = '5px';\r\n    return el;\r\n  },\r\n  addInputError: function(input, text) {\r\n    input.style.borderColor = 'red';\r\n    \r\n    if(!input.errmsg) {\r\n      var group = this.closest(input,'.form-control');\r\n      input.errmsg = document.createElement('div');\r\n      input.errmsg.setAttribute('class','errmsg');\r\n      input.errmsg.style = input.errmsg.style || {};\r\n      input.errmsg.style.color = 'red';\r\n      group.appendChild(input.errmsg);\r\n    }\r\n    else {\r\n      input.errmsg.style.display = 'block';\r\n    }\r\n    \r\n    input.errmsg.innerHTML = '';\r\n    input.errmsg.appendChild(document.createTextNode(text));\r\n  },\r\n  removeInputError: function(input) {\r\n    input.style.borderColor = '';\r\n    if(input.errmsg) input.errmsg.style.display = 'none';\r\n  },\r\n  getProgressBar: function() {\r\n    var max = 100, start = 0;\r\n\r\n    var progressBar = document.createElement('progress');\r\n    progressBar.setAttribute('max', max);\r\n    progressBar.setAttribute('value', start);\r\n    return progressBar;\r\n  },\r\n  updateProgressBar: function(progressBar, progress) {\r\n    if (!progressBar) return;\r\n    progressBar.setAttribute('value', progress);\r\n  },\r\n  updateProgressBarUnknown: function(progressBar) {\r\n    if (!progressBar) return;\r\n    progressBar.removeAttribute('value');\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.jqueryui = JSONEditor.AbstractTheme.extend({\r\n  getTable: function() {\r\n    var el = this._super();\r\n    el.setAttribute('cellpadding',5);\r\n    el.setAttribute('cellspacing',0);\r\n    return el;\r\n  },\r\n  getTableHeaderCell: function(text) {\r\n    var el = this._super(text);\r\n    el.classList.add('ui-state-active');\r\n    el.style.fontWeight = 'bold';\r\n    return el;\r\n  },\r\n  getTableCell: function() {\r\n    var el = this._super();\r\n    el.classList.add('ui-widget-content');\r\n    return el;\r\n  },\r\n  getHeaderButtonHolder: function() {\r\n    var el = this.getButtonHolder();\r\n    el.style.marginLeft = '10px';\r\n    el.style.fontSize = '.6em';\r\n    el.style.display = 'inline-block';\r\n    return el;\r\n  },\r\n  getFormInputDescription: function(text) {\r\n    var el = this.getDescription(text);\r\n    el.style.marginLeft = '10px';\r\n    el.style.display = 'inline-block';\r\n    return el;\r\n  },\r\n  getFormControl: function(label, input, description, infoText) {\r\n    var el = this._super(label,input,description, infoText);\r\n    if(input.type === 'checkbox') {\r\n      el.style.lineHeight = '25px';\r\n\r\n      el.style.padding = '3px 0';\r\n    }\r\n    else {\r\n      el.style.padding = '4px 0 8px 0';\r\n    }\r\n    return el;\r\n  },\r\n  getDescription: function(text) {\r\n    var el = document.createElement('span');\r\n    el.style.fontSize = '.8em';\r\n    el.style.fontStyle = 'italic';\r\n    if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n    else el.textContent = this.cleanText(text);\r\n    return el;\r\n  },\r\n  getButtonHolder: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('ui-buttonset');\r\n    el.style.fontSize = '.7em';\r\n    return el;\r\n  },\r\n  getFormInputLabel: function(text) {\r\n    var el = document.createElement('label');\r\n    el.style.fontWeight = 'bold';\r\n    el.style.display = 'block';\r\n    el.textContent = text;\r\n    return el;\r\n  },\r\n  getButton: function(text, icon, title) {\r\n    var button = document.createElement(\"button\");\r\n    button.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all');\r\n\r\n    // Icon only\r\n    if(icon && !text) {\r\n      button.classList.add('ui-button-icon-only');\r\n      icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');\r\n      button.appendChild(icon);\r\n    }\r\n    // Icon and Text\r\n    else if(icon) {\r\n      button.classList.add('ui-button-text-icon-primary');\r\n      icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');\r\n      button.appendChild(icon);\r\n    }\r\n    // Text only\r\n    else {\r\n      button.classList.add('ui-button-text-only');\r\n    }\r\n\r\n    var el = document.createElement('span');\r\n    el.classList.add('ui-button-text');\r\n    el.textContent = text||title||\".\";\r\n    button.appendChild(el);\r\n\r\n    button.setAttribute('title',title);\r\n\r\n    return button;\r\n  },\r\n  setButtonText: function(button,text, icon, title) {\r\n    button.innerHTML = '';\r\n    button.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all');\r\n\r\n    // Icon only\r\n    if(icon && !text) {\r\n      button.classList.add('ui-button-icon-only');\r\n      icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');\r\n      button.appendChild(icon);\r\n    }\r\n    // Icon and Text\r\n    else if(icon) {\r\n      button.classList.add('ui-button-text-icon-primary');\r\n      icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');\r\n      button.appendChild(icon);\r\n    }\r\n    // Text only\r\n    else {\r\n      button.classList.add('ui-button-text-only');\r\n    }\r\n\r\n    var el = document.createElement('span');\r\n    el.classList.add('ui-button-text');\r\n    el.textContent = text||title||\".\";\r\n    button.appendChild(el);\r\n\r\n    button.setAttribute('title',title);\r\n  },\r\n  getIndentedPanel: function() {\r\n    var el = document.createElement('div');\r\n    el.classList.add('ui-widget-content', 'ui-corner-all');\r\n    el.style.padding = '1em 1.4em';\r\n    el.style.marginBottom = '20px';\r\n    return el;\r\n  },\r\n  afterInputReady: function(input) {\r\n    if(input.controls) return;\r\n    input.controls = this.closest(input,'.form-control');\r\n    if (this.queuedInputErrorText) {\r\n        var text = this.queuedInputErrorText;\r\n        delete this.queuedInputErrorText;\r\n        this.addInputError(input,text);\r\n    }\r\n  },\r\n  addInputError: function(input,text) {\r\n    if(!input.controls) {\r\n        this.queuedInputErrorText = text;\r\n        return;\r\n    }\r\n    if(!input.errmsg) {\r\n      input.errmsg = document.createElement('div');\r\n      input.errmsg.classList.add('ui-state-error');\r\n      input.controls.appendChild(input.errmsg);\r\n    }\r\n    else {\r\n      input.errmsg.style.display = '';\r\n    }\r\n\r\n    input.errmsg.textContent = text;\r\n  },\r\n  removeInputError: function(input) {\r\n    if(!input.controls) {\r\n        delete this.queuedInputErrorText;\r\n    }\r\n    if(!input.errmsg) return;\r\n    input.errmsg.style.display = 'none';\r\n  },\r\n  markTabActive: function(row) {\r\n    row.tab.classList.remove('ui-widget-header');\r\n    row.tab.classList.add('ui-state-active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = '';\r\n    }\r\n    else {\r\n      row.container.style.display = '';\r\n    }\r\n  },\r\n  markTabInactive: function(row) {\r\n    row.tab.classList.add('ui-widget-header');\r\n    row.tab.classList.remove('ui-state-active');\r\n\r\n    if(typeof row.rowPane !== 'undefined'){\r\n      row.rowPane.style.display = 'none';\r\n    }\r\n    else {\r\n      row.container.style.display = 'none';\r\n    }\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.themes.barebones = JSONEditor.AbstractTheme.extend({\r\n    getFormInputLabel: function (text) {\r\n        var el = this._super(text);\r\n        return el;\r\n    },\r\n    getFormInputDescription: function (text) {\r\n        var el = this._super(text);\r\n        return el;\r\n    },\r\n    getIndentedPanel: function () {\r\n        var el = this._super();\r\n        return el;\r\n    },\r\n    getChildEditorHolder: function () {\r\n        var el = this._super();\r\n        return el;\r\n    },\r\n    getHeaderButtonHolder: function () {\r\n        var el = this.getButtonHolder();\r\n        return el;\r\n    },\r\n    getTable: function () {\r\n        var el = this._super();\r\n        return el;\r\n    },\r\n    addInputError: function (input, text) {\r\n        if (!input.errmsg) {\r\n            var group = this.closest(input, '.form-control');\r\n            input.errmsg = document.createElement('div');\r\n            input.errmsg.setAttribute('class', 'errmsg');\r\n            group.appendChild(input.errmsg);\r\n        }\r\n        else {\r\n            input.errmsg.style.display = 'block';\r\n        }\r\n\r\n        input.errmsg.innerHTML = '';\r\n        input.errmsg.appendChild(document.createTextNode(text));\r\n    },\r\n    removeInputError: function (input) {\r\n        input.style.borderColor = '';\r\n        if (input.errmsg) input.errmsg.style.display = 'none';\r\n    },\r\n    getProgressBar: function () {\r\n        var max = 100, start = 0;\r\n\r\n        var progressBar = document.createElement('progress');\r\n        progressBar.setAttribute('max', max);\r\n        progressBar.setAttribute('value', start);\r\n        return progressBar;\r\n    },\r\n    updateProgressBar: function (progressBar, progress) {\r\n        if (!progressBar) return;\r\n        progressBar.setAttribute('value', progress);\r\n    },\r\n    updateProgressBarUnknown: function (progressBar) {\r\n        if (!progressBar) return;\r\n        progressBar.removeAttribute('value');\r\n    }\r\n});\r\n\r\nJSONEditor.defaults.themes.materialize = JSONEditor.AbstractTheme.extend(\r\n  {\r\n\r\n    /**\r\n   * Applies grid size to specified element.\r\n   *\r\n   * @param {HTMLElement} el The DOM element to have specified size applied.\r\n   * @param {int} size The grid column size.\r\n   * @see http://materializecss.com/grid.html\r\n   */\r\n  setGridColumnSize: function(el, size) {\r\n      el.classList.add('col');\r\n      el.classList.add('s' + size);\r\n    },\r\n\r\n    /**\r\n   * Gets a wrapped button element for a header.\r\n   *\r\n   * @returns {HTMLElement} The wrapped button element.\r\n   */\r\n  getHeaderButtonHolder: function() {\r\n      return this.getButtonHolder();\r\n    },\r\n\r\n    /**\r\n   * Gets a wrapped button element.\r\n   *\r\n   * @returns {HTMLElement} The wrapped button element.\r\n   */\r\n  getButtonHolder: function() {\r\n      return document.createElement('span');\r\n    },\r\n\r\n    /**\r\n   * Gets a single button element.\r\n   *\r\n   * @param {string} text The button text.\r\n   * @param {HTMLElement} icon The icon object.\r\n   * @param {string} title The button title.\r\n   * @returns {HTMLElement} The button object.\r\n   * @see http://materializecss.com/buttons.html\r\n   */\r\n  getButton: function(text, icon, title) {\r\n\r\n      // Prepare icon.\r\n      if (text) {\r\n        icon.classList.add('left');\r\n        icon.style.marginRight = '5px';\r\n      }\r\n\r\n      // Create and return button.\r\n      var el = this._super(text, icon, title);\r\n      el.classList.add('waves-effect', 'waves-light', 'btn');\r\n      el.style.fontSize = '0.75rem';\r\n      el.style.height = '24px';\r\n      el.style.lineHeight = '24px';\r\n      el.style.marginLeft = '5px';\r\n      el.style.padding = '0 0.5rem';\r\n      return el;\r\n\r\n    },\r\n\r\n    /**\r\n   * Gets a form control object consisiting of several sub objects.\r\n   *\r\n   * @param {HTMLElement} label The label element.\r\n   * @param {HTMLElement} input The input element.\r\n   * @param {string} description The element description.\r\n   * @param {string} infoText The element information text.\r\n   * @returns {HTMLElement} The assembled DOM element.\r\n   * @see http://materializecss.com/forms.html\r\n   */\r\n  getFormControl: function(label, input, description, infoText) {\r\n\r\n      var ctrl,\r\n      type = input.type;\r\n\r\n      // Checkboxes get wrapped in p elements.\r\n      if (type && type === 'checkbox') {\r\n\r\n        ctrl = document.createElement('p');\r\n        if (label) {\r\n          var span = document.createElement('span');\r\n          span.innerHTML = label.innerHTML;\r\n          label.innerHTML = '';\r\n          label.setAttribute('for', input.id);\r\n          ctrl.appendChild(label);\r\n          label.appendChild(input);\r\n          label.appendChild(span);\r\n        }\r\n        else {\r\n          ctrl.appendChild(input);\r\n        }\r\n\r\n        return ctrl;\r\n\r\n      }\r\n\r\n      // Anything else gets wrapped in divs.\r\n      ctrl = this._super(label, input, description, infoText);\r\n\r\n      // Not .input-field for select wrappers.\r\n      if (!type || !type.startsWith('select'))\r\n        ctrl.classList.add('input-field');\r\n\r\n      // Color needs special attention.\r\n      if (type && type === 'color') {\r\n        input.style.height = '3rem';\r\n        input.style.width = '100%';\r\n        input.style.margin = '5px 0 20px 0';\r\n        input.style.padding = '3px';\r\n\r\n        if (label) {\r\n          label.style.transform = 'translateY(-14px) scale(0.8)';\r\n          label.style['-webkit-transform'] = 'translateY(-14px) scale(0.8)';\r\n          label.style['-webkit-transform-origin'] = '0 0';\r\n          label.style['transform-origin'] = '0 0';\r\n        }\r\n      }\r\n\r\n      return ctrl;\r\n\r\n    },\r\n\r\n  getDescription: function(text) {\r\n      var el = document.createElement('div');\r\n      el.classList.add('grey-text');\r\n      el.style.marginTop = '-15px';\r\n      if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);\r\n      else el.textContent = this.cleanText(text);\r\n      return el;\r\n    },\r\n\r\n    /**\r\n   * Gets a header element.\r\n   *\r\n   * @param {string|HTMLElement} text The header text or element.\r\n   * @returns {HTMLElement} The header element.\r\n   */\r\n  getHeader: function(text) {\r\n\r\n      var el = document.createElement('h5');\r\n\r\n      if (typeof text === 'string') {\r\n        el.textContent = text;\r\n      } else {\r\n        el.appendChild(text);\r\n      }\r\n\r\n      return el;\r\n\r\n    },\r\n\r\n  getChildEditorHolder: function() {\r\n\r\n      var el = document.createElement('div');\r\n      el.marginBottom = '10px';\r\n      return el;\r\n\r\n    },\r\n\r\n  getIndentedPanel: function() {\r\n      var el = document.createElement(\"div\");\r\n      el.classList.add(\"card-panel\");\r\n      return el;\r\n    },\r\n\r\n  getTable: function() {\r\n\r\n      var el = document.createElement('table');\r\n      el.classList.add('striped', 'bordered');\r\n      el.style.marginBottom = '10px';\r\n      return el;\r\n\r\n    },\r\n\r\n  getTableRow: function() {\r\n      return document.createElement('tr');\r\n    },\r\n\r\n  getTableHead: function() {\r\n      return document.createElement('thead');\r\n    },\r\n\r\n  getTableBody: function() {\r\n      return document.createElement('tbody');\r\n    },\r\n\r\n  getTableHeaderCell: function(text) {\r\n\r\n      var el = document.createElement('th');\r\n      el.textContent = text;\r\n      return el;\r\n\r\n    },\r\n\r\n  getTableCell: function() {\r\n\r\n      var el = document.createElement('td');\r\n      return el;\r\n\r\n    },\r\n\r\n    /**\r\n   * Gets the tab holder element.\r\n   *\r\n   * @returns {HTMLElement} The tab holder component.\r\n   * @see https://github.com/Dogfalo/materialize/issues/2542#issuecomment-233458602\r\n   */\r\n  getTabHolder: function() {\r\n\r\n      var html =[\r\n        '<div class=\"col s2\">',\r\n        '   <ul class=\"tabs\" style=\"height: auto; margin-top: 0.82rem; -ms-flex-direction: column; -webkit-flex-direction: column; flex-direction: column; display: -webkit-flex; display: flex;\">',\r\n        '   </ul>',\r\n        '</div>',\r\n        '<div class=\"col s10\">',\r\n        '<div>'\r\n      ].join(\"\\n\");\r\n\r\n      var el = document.createElement('div');\r\n      el.classList.add('row', 'card-panel');\r\n      el.innerHTML = html;\r\n      return el;\r\n\r\n    },\r\n\r\n    /**\r\n   * Add specified tab to specified holder element.\r\n   *\r\n   * @param {HTMLElement} holder The tab holder element.\r\n   * @param {HTMLElement} tab The tab to add.\r\n   */\r\n  addTab: function(holder, tab) {\r\n      holder.children[0].children[0].appendChild(tab);\r\n    },\r\n\r\n    /**\r\n   * Gets a single tab element.\r\n   *\r\n   * @param {HTMLElement} span The tab's content.\r\n   * @returns {HTMLElement} The tab element.\r\n   * @see https://github.com/Dogfalo/materialize/issues/2542#issuecomment-233458602\r\n   */\r\n  getTab: function(span) {\r\n\r\n      var el = document.createElement('li');\r\n      el.classList.add('tab');\r\n      el.style = el.style || {};\r\n      this.applyStyles(el,\r\n        {\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        lineHeight: '24px',\r\n        height: '24px',\r\n        fontSize: '14px',\r\n        cursor: 'pointer'\r\n        }\r\n      );\r\n      el.appendChild(span);\r\n      return el;\r\n    },\r\n\r\n    /**\r\n   * Marks specified tab as active.\r\n   *\r\n   * @returns {HTMLElement} The tab element.\r\n   * @see https://github.com/Dogfalo/materialize/issues/2542#issuecomment-233458602\r\n   */\r\n  markTabActive: function(tab) {\r\n\r\n      tab.style = tab.style || {};\r\n      this.applyStyles(tab,\r\n        {\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        lineHeight: '24px',\r\n        height: '24px',\r\n        fontSize: '14px',\r\n        cursor: 'pointer',\r\n        color: 'rgba(238,110,115,1)',\r\n        transition: 'border-color .5s ease',\r\n        borderRight: '3px solid #424242'\r\n        }\r\n      );\r\n\r\n    },\r\n\r\n    /**\r\n   * Marks specified tab as inactive.\r\n   *\r\n   * @returns {HTMLElement} The tab element.\r\n   * @see https://github.com/Dogfalo/materialize/issues/2542#issuecomment-233458602\r\n   */\r\n  markTabInactive: function(tab) {\r\n\r\n      tab.style = tab.style || {};\r\n      this.applyStyles(tab,\r\n        {\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        lineHeight: '24px',\r\n        height: '24px',\r\n        fontSize: '14px',\r\n        cursor: 'pointer',\r\n        color: 'rgba(238,110,115,0.7)'\r\n        }\r\n      );\r\n\r\n    },\r\n\r\n    /**\r\n   * Returns the element that holds the tab contents.\r\n   *\r\n   * @param {HTMLElement} tabHolder The full tab holder element.\r\n   * @returns {HTMLElement} The content element inside specified tab holder.\r\n   */\r\n  getTabContentHolder: function(tabHolder) {\r\n      return tabHolder.children[1];\r\n    },\r\n\r\n    /**\r\n   * Creates and returns a tab content element.\r\n   *\r\n   * @returns {HTMLElement} The new tab content element.\r\n   */\r\n  getTabContent: function() {\r\n      return document.createElement('div');\r\n    },\r\n\r\n    /**\r\n   * Adds an error message to the specified input element.\r\n   *\r\n   * @param {HTMLElement} input The input element that caused the error.\r\n   * @param {string} text The error message.\r\n   */\r\n  addInputError: function(input, text) {\r\n\r\n      // Get the parent element. Should most likely be a <div class=\"input-field\" ... />.\r\n      var parent = input.parentNode,\r\n      el;\r\n\r\n      if (!parent) return;\r\n\r\n      // Remove any previous error.\r\n      this.removeInputError(input);\r\n\r\n      // Append an error message div.\r\n      el = document.createElement('div');\r\n      el.classList.add('error-text', 'red-text');\r\n      el.textContent = text;\r\n      parent.appendChild(el);\r\n\r\n    },\r\n\r\n    /**\r\n   * Removes any error message from the specified input element.\r\n   *\r\n   * @param {HTMLElement} input The input element that previously caused the error.\r\n   */\r\n  removeInputError: function(input) {\r\n\r\n      // Get the parent element. Should most likely be a <div class=\"input-field\" ... />.\r\n      var parent = input.parentElement,\r\n      els;\r\n\r\n      if (!parent) return;\r\n\r\n      // Remove all elements having class .error-text.\r\n      els = parent.getElementsByClassName('error-text');\r\n      for (var i = 0; i < els.length; i++)\r\n        parent.removeChild(els[i]);\r\n\r\n    },\r\n\r\n  addTableRowError: function(row) {\r\n    },\r\n\r\n  removeTableRowError: function(row) {\r\n    },\r\n\r\n    /**\r\n   * Gets a select DOM element.\r\n   *\r\n   * @param {object} options The option values.\r\n   * @return {HTMLElement} The DOM element.\r\n   * @see http://materializecss.com/forms.html#select\r\n   */\r\n  getSelectInput: function(options) {\r\n\r\n      var select = this._super(options);\r\n      select.classList.add('browser-default');\r\n      return select;\r\n\r\n    },\r\n\r\n    /**\r\n   * Gets a textarea DOM element.\r\n   *\r\n   * @returns {HTMLElement} The DOM element.\r\n   * @see http://materializecss.com/forms.html#textarea\r\n   */\r\n  getTextareaInput: function() {\r\n      var el = document.createElement('textarea');\r\n      el.style.marginBottom = '5px';\r\n      el.style.fontSize = '1rem';\r\n      el.style.fontFamily = 'monospace';\r\n      return el;\r\n    },\r\n\r\n  getCheckbox: function() {\r\n\r\n      var el = this.getFormInputField('checkbox');\r\n      el.id = this.createUuid();\r\n      return el;\r\n\r\n    },\r\n\r\n    /**\r\n   * Gets the modal element for displaying Edit JSON and Properties dialogs.\r\n   *\r\n   * @returns {HTMLElement} The modal DOM element.\r\n   * @see http://materializecss.com/cards.html\r\n   */\r\n  getModal: function() {\r\n\r\n      var el = document.createElement('div');\r\n      el.classList.add('card-panel', 'z-depth-3');\r\n      el.style.padding = '5px';\r\n      el.style.position = 'absolute';\r\n      el.style.zIndex = '10';\r\n      el.style.display = 'none';\r\n      return el;\r\n\r\n    },\r\n\r\n    /**\r\n   * Creates and returns a RFC4122 version 4 compliant unique id.\r\n   *\r\n   * @returns {string} A GUID.\r\n   * @see https://stackoverflow.com/a/2117523\r\n   */\r\n  createUuid: function() {\r\n\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\r\n        {\r\n          var r = Math.random() * 16 | 0, v = c == 'x'? r: (r & 0x3 | 0x8);\r\n          return v.toString(16);\r\n        }\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n);\r\nJSONEditor.AbstractIconLib = Class.extend({\r\n  mapping: {\r\n    collapse: '',\r\n    expand: '',\r\n    \"delete\": '',\r\n    edit: '',\r\n    add: '',\r\n    cancel: '',\r\n    save: '',\r\n    moveup: '',\r\n    movedown: ''\r\n  },\r\n  icon_prefix: '',\r\n  getIconClass: function(key) {\r\n    if(this.mapping[key]) return this.icon_prefix+this.mapping[key];\r\n    else return null;\r\n  },\r\n  getIcon: function(key) {\r\n    var iconclass = this.getIconClass(key);\r\n    \r\n    if(!iconclass) return null;\r\n    \r\n    var i = document.createElement('i');\r\n    i.classList.add.apply(i.classList, iconclass.split(' '));\r\n    \r\n    return i;\r\n  }\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.bootstrap2 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'chevron-down',\r\n    expand: 'chevron-up',\r\n    \"delete\": 'trash',\r\n    edit: 'pencil',\r\n    add: 'plus',\r\n    cancel: 'ban-circle',\r\n    save: 'ok',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    clear: 'remove-circle',\r\n    time: 'time',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'icon-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.bootstrap3 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'chevron-down',\r\n    expand: 'chevron-right',\r\n    \"delete\": 'remove',\r\n    edit: 'pencil',\r\n    add: 'plus',\r\n    cancel: 'floppy-remove',\r\n    save: 'floppy-saved',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    clear: 'remove-circle',\r\n    time: 'time',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'glyphicon glyphicon-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.fontawesome3 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'chevron-down',\r\n    expand: 'chevron-right',\r\n    \"delete\": 'remove',\r\n    edit: 'pencil',\r\n    add: 'plus',\r\n    cancel: 'ban-circle',\r\n    save: 'save',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    clear: 'remove-circle',\r\n    time: 'time',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'icon-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.fontawesome4 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'caret-square-o-down',\r\n    expand: 'caret-square-o-right',\r\n    \"delete\": 'times',\r\n    edit: 'pencil',\r\n    add: 'plus',\r\n    cancel: 'ban',\r\n    save: 'save',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    copy: 'files-o',\r\n    clear: 'times-circle-o',\r\n    time: 'clock-o',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'fa fa-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.fontawesome5 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'caret-down',\r\n    expand: 'caret-right',\r\n    delete: 'times',\r\n    edit: 'pen',\r\n    add: 'plus',\r\n    cancel: 'ban',\r\n    save: 'save',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    copy: 'copy',\r\n    clear: 'times-circle',\r\n    time: 'clock',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'fas fa-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.foundation2 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'minus',\r\n    expand: 'plus',\r\n    \"delete\": 'remove',\r\n    edit: 'edit',\r\n    add: 'add-doc',\r\n    cancel: 'error',\r\n    save: 'checkmark',\r\n    moveup: 'up-arrow',\r\n    movedown: 'down-arrow',\r\n    clear: 'remove',\r\n    time: 'clock',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'foundicon-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.foundation3 = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'minus',\r\n    expand: 'plus',\r\n    \"delete\": 'x',\r\n    edit: 'pencil',\r\n    add: 'page-add',\r\n    cancel: 'x-circle',\r\n    save: 'save',\r\n    moveup: 'arrow-up',\r\n    movedown: 'arrow-down',\r\n    clear: 'x-circle',\r\n    time: 'clock',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'fi-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.jqueryui = JSONEditor.AbstractIconLib.extend({\r\n  mapping: {\r\n    collapse: 'triangle-1-s',\r\n    expand: 'triangle-1-e',\r\n    \"delete\": 'trash',\r\n    edit: 'pencil',\r\n    add: 'plusthick',\r\n    cancel: 'closethick',\r\n    save: 'disk',\r\n    moveup: 'arrowthick-1-n',\r\n    movedown: 'arrowthick-1-s',\r\n    clear: 'circle-close',\r\n    time: 'time',\r\n    calendar: 'calendar'\r\n  },\r\n  icon_prefix: 'ui-icon ui-icon-'\r\n});\r\n\r\nJSONEditor.defaults.iconlibs.materialicons = JSONEditor.AbstractIconLib.extend({\r\n\r\n    mapping: {\r\n      collapse: 'arrow_drop_up',\r\n      expand: 'arrow_drop_down',\r\n      \"delete\": 'delete',\r\n      edit: 'edit',\r\n      add: 'add',\r\n      cancel: 'cancel',\r\n      save: 'save',\r\n      moveup: 'arrow_upward',\r\n      movedown: 'arrow_downward',\r\n      copy: 'content_copy',\r\n      clear: 'highlight_off',\r\n      time: 'access_time',\r\n      calendar: 'calendar_today',\r\n      upload: 'cloud_upload',\r\n    },\r\n\r\n    icon_class: 'material-icons',\r\n    icon_prefix: '',\r\n\r\n    getIconClass: function(key) {\r\n\r\n        // This method is unused.\r\n\r\n        return this.icon_class;\r\n    },\r\n\r\n    getIcon: function(key) {\r\n\r\n        // Get the mapping.\r\n        var mapping = this.mapping[key];\r\n        if (!mapping) return null;\r\n\r\n        // @see http://materializecss.com/icons.html\r\n        var i = document.createElement('i');\r\n        i.classList.add(this.icon_class);\r\n        var t = document.createTextNode(mapping);\r\n        i.appendChild(t);\r\n        return i;\r\n\r\n    }\r\n});\r\n\r\nJSONEditor.defaults.templates[\"default\"] = function() {\r\n  return {\r\n    compile: function(template) {\r\n      var matches = template.match(/{{\\s*([a-zA-Z0-9\\-_ \\.]+)\\s*}}/g);\r\n      var l = matches && matches.length;\r\n\r\n      // Shortcut if the template contains no variables\r\n      if(!l) return function() { return template; };\r\n\r\n      // Pre-compute the search/replace functions\r\n      // This drastically speeds up template execution\r\n      var replacements = [];\r\n      var get_replacement = function(i) {\r\n        var p = matches[i].replace(/[{}]+/g,'').trim().split('.');\r\n        var n = p.length;\r\n        var func;\r\n        \r\n        if(n > 1) {\r\n          var cur;\r\n          func = function(vars) {\r\n            cur = vars;\r\n            for(i=0; i<n; i++) {\r\n              cur = cur[p[i]];\r\n              if(!cur) break;\r\n            }\r\n            return cur;\r\n          };\r\n        }\r\n        else {\r\n          p = p[0];\r\n          func = function(vars) {\r\n            return vars[p];\r\n          };\r\n        }\r\n        \r\n        replacements.push({\r\n          s: matches[i],\r\n          r: func\r\n        });\r\n      };\r\n      for(var i=0; i<l; i++) {\r\n        get_replacement(i);\r\n      }\r\n\r\n      // The compiled function\r\n      return function(vars) {\r\n        var ret = template+\"\";\r\n        var r;\r\n        for(i=0; i<l; i++) {\r\n          r = replacements[i];\r\n          ret = ret.replace(r.s, r.r(vars));\r\n        }\r\n        return ret;\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.ejs = function() {\r\n  if(!window.EJS) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      var compiled = new window.EJS({\r\n        text: template\r\n      });\r\n\r\n      return function(context) {\r\n        return compiled.render(context);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.handlebars = function() {\r\n  return window.Handlebars;\r\n};\r\n\r\nJSONEditor.defaults.templates.hogan = function() {\r\n  if(!window.Hogan) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      var compiled = window.Hogan.compile(template);\r\n      return function(context) {\r\n        return compiled.render(context);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.lodash = function() {\r\n  if(!window._) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      return function(context) {\r\n        return window._.template(template)(context);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.markup = function() {\r\n  if(!window.Mark || !window.Mark.up) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      return function(context) {\r\n        return window.Mark.up(template,context);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.mustache = function() {\r\n  if(!window.Mustache) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      return function(view) {\r\n        return window.Mustache.render(template, view);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nJSONEditor.defaults.templates.swig = function() {\r\n  return window.swig;\r\n};\r\n\r\nJSONEditor.defaults.templates.underscore = function() {\r\n  if(!window._) return false;\r\n\r\n  return {\r\n    compile: function(template) {\r\n      return function(context) {\r\n        return window._.template(template)(context);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n// Set the default theme\r\nJSONEditor.defaults.theme = 'html';\r\n\r\n// Set the default template engine\r\nJSONEditor.defaults.template = 'default';\r\n\r\n// Default options when initializing JSON Editor\r\nJSONEditor.defaults.options = {};\r\n\r\nJSONEditor.defaults.options.prompt_before_delete = true;\r\n\r\nJSONEditor.defaults.options.upload = function(type, file, cbs) {\r\n  console.log('Upload handler required for upload editor');\r\n};\r\n\r\n// String translate function\r\nJSONEditor.defaults.translate = function(key, variables) {\r\n  var lang = JSONEditor.defaults.languages[JSONEditor.defaults.language];\r\n  if(!lang) throw \"Unknown language \"+JSONEditor.defaults.language;\r\n\r\n  var string = lang[key] || JSONEditor.defaults.languages[JSONEditor.defaults.default_language][key];\r\n\r\n  if(typeof string === \"undefined\") throw \"Unknown translate string \"+key;\r\n\r\n  if(variables) {\r\n    for(var i=0; i<variables.length; i++) {\r\n      string = string.replace(new RegExp('\\\\{\\\\{'+i+'}}','g'),variables[i]);\r\n    }\r\n  }\r\n\r\n  return string;\r\n};\r\n\r\n// Translation strings and default languages\r\nJSONEditor.defaults.default_language = 'en';\r\nJSONEditor.defaults.language = JSONEditor.defaults.default_language;\r\nJSONEditor.defaults.languages.en = {\r\n  /**\r\n   * When a property is not set\r\n   */\r\n  error_notset: \"Property must be set\",\r\n  /**\r\n   * When a string must not be empty\r\n   */\r\n  error_notempty: \"Value required\",\r\n  /**\r\n   * When a value is not one of the enumerated values\r\n   */\r\n  error_enum: \"Value must be one of the enumerated values\",\r\n  /**\r\n   * When a value doesn't validate any schema of a 'anyOf' combination\r\n   */\r\n  error_anyOf: \"Value must validate against at least one of the provided schemas\",\r\n  /**\r\n   * When a value doesn't validate\r\n   * @variables This key takes one variable: The number of schemas the value does not validate\r\n   */\r\n  error_oneOf: 'Value must validate against exactly one of the provided schemas. It currently validates against {{0}} of the schemas.',\r\n  /**\r\n   * When a value does not validate a 'not' schema\r\n   */\r\n  error_not: \"Value must not validate against the provided schema\",\r\n  /**\r\n   * When a value does not match any of the provided types\r\n   */\r\n  error_type_union: \"Value must be one of the provided types\",\r\n  /**\r\n   * When a value does not match the given type\r\n   * @variables This key takes one variable: The type the value should be of\r\n   */\r\n  error_type: \"Value must be of type {{0}}\",\r\n  /**\r\n   *  When the value validates one of the disallowed types\r\n   */\r\n  error_disallow_union: \"Value must not be one of the provided disallowed types\",\r\n  /**\r\n   *  When the value validates a disallowed type\r\n   * @variables This key takes one variable: The type the value should not be of\r\n   */\r\n  error_disallow: \"Value must not be of type {{0}}\",\r\n  /**\r\n   * When a value is not a multiple of or divisible by a given number\r\n   * @variables This key takes one variable: The number mentioned above\r\n   */\r\n  error_multipleOf: \"Value must be a multiple of {{0}}\",\r\n  /**\r\n   * When a value is greater than it's supposed to be (exclusive)\r\n   * @variables This key takes one variable: The maximum\r\n   */\r\n  error_maximum_excl: \"Value must be less than {{0}}\",\r\n  /**\r\n   * When a value is greater than it's supposed to be (inclusive\r\n   * @variables This key takes one variable: The maximum\r\n   */\r\n  error_maximum_incl: \"Value must be at most {{0}}\",\r\n  /**\r\n   * When a value is lesser than it's supposed to be (exclusive)\r\n   * @variables This key takes one variable: The minimum\r\n   */\r\n  error_minimum_excl: \"Value must be greater than {{0}}\",\r\n  /**\r\n   * When a value is lesser than it's supposed to be (inclusive)\r\n   * @variables This key takes one variable: The minimum\r\n   */\r\n  error_minimum_incl: \"Value must be at least {{0}}\",\r\n  /**\r\n   * When a value have too many characters\r\n   * @variables This key takes one variable: The maximum character count\r\n   */\r\n  error_maxLength: \"Value must be at most {{0}} characters long\",\r\n  /**\r\n   * When a value does not have enough characters\r\n   * @variables This key takes one variable: The minimum character count\r\n   */\r\n  error_minLength: \"Value must be at least {{0}} characters long\",\r\n  /**\r\n   * When a value does not match a given pattern\r\n   */\r\n  error_pattern: \"Value must match the pattern {{0}}\",\r\n  /**\r\n   * When an array has additional items whereas it is not supposed to\r\n   */\r\n  error_additionalItems: \"No additional items allowed in this array\",\r\n  /**\r\n   * When there are to many items in an array\r\n   * @variables This key takes one variable: The maximum item count\r\n   */\r\n  error_maxItems: \"Value must have at most {{0}} items\",\r\n  /**\r\n   * When there are not enough items in an array\r\n   * @variables This key takes one variable: The minimum item count\r\n   */\r\n  error_minItems: \"Value must have at least {{0}} items\",\r\n  /**\r\n   * When an array is supposed to have unique items but has duplicates\r\n   */\r\n  error_uniqueItems: \"Array must have unique items\",\r\n  /**\r\n   * When there are too many properties in an object\r\n   * @variables This key takes one variable: The maximum property count\r\n   */\r\n  error_maxProperties: \"Object must have at most {{0}} properties\",\r\n  /**\r\n   * When there are not enough properties in an object\r\n   * @variables This key takes one variable: The minimum property count\r\n   */\r\n  error_minProperties: \"Object must have at least {{0}} properties\",\r\n  /**\r\n   * When a required property is not defined\r\n   * @variables This key takes one variable: The name of the missing property\r\n   */\r\n  error_required: \"Object is missing the required property '{{0}}'\",\r\n  /**\r\n   * When there is an additional property is set whereas there should be none\r\n   * @variables This key takes one variable: The name of the additional property\r\n   */\r\n  error_additional_properties: \"No additional properties allowed, but property {{0}} is set\",\r\n  /**\r\n   * When a dependency is not resolved\r\n   * @variables This key takes one variable: The name of the missing property for the dependency\r\n   */\r\n  error_dependency: \"Must have property {{0}}\",\r\n  /**\r\n   * When a date is in incorrect format\r\n   * @variables This key takes one variable: The valid format\r\n   */\r\n  error_date: 'Date must be in the format {{0}}',\r\n  /**\r\n   * When a time is in incorrect format\r\n   * @variables This key takes one variable: The valid format\r\n   */\r\n  error_time: 'Time must be in the format {{0}}',\r\n  /**\r\n   * When a datetime-local is in incorrect format\r\n   * @variables This key takes one variable: The valid format\r\n   */\r\n  error_datetime_local: 'Datetime must be in the format {{0}}',\r\n  /**\r\n   * When a integer date is less than 1 January 1970\r\n   */\r\n  error_invalid_epoch: 'Date must be greater than 1 January 1970',\r\n\r\n  /**\r\n   * Text on Delete All buttons\r\n   */\r\n  button_delete_all: \"All\",\r\n  /**\r\n   * Title on Delete All buttons\r\n   */\r\n  button_delete_all_title: \"Delete All\",\r\n  /**\r\n    * Text on Delete Last buttons\r\n    * @variable This key takes one variable: The title of object to delete\r\n    */\r\n  button_delete_last: \"Last {{0}}\",\r\n  /**\r\n    * Title on Delete Last buttons\r\n    * @variable This key takes one variable: The title of object to delete\r\n    */\r\n  button_delete_last_title: \"Delete Last {{0}}\",\r\n  /**\r\n    * Title on Add Row buttons\r\n    * @variable This key takes one variable: The title of object to add\r\n    */\r\n  button_add_row_title: \"Add {{0}}\",\r\n  /**\r\n    * Title on Move Down buttons\r\n    */\r\n  button_move_down_title: \"Move down\",\r\n  /**\r\n    * Title on Move Up buttons\r\n    */\r\n  button_move_up_title: \"Move up\",\r\n  /**\r\n    * Title on Object Properties buttons\r\n    */\r\n  button_object_properties: \"Object Properties\",\r\n  /**\r\n    * Title on Delete Row buttons\r\n    * @variable This key takes one variable: The title of object to delete\r\n    */\r\n  button_delete_row_title: \"Delete {{0}}\",\r\n  /**\r\n    * Title on Delete Row buttons, short version (no parameter with the object title)\r\n    */\r\n  button_delete_row_title_short: \"Delete\",\r\n  /**\r\n    * Title on Collapse buttons\r\n    */\r\n  button_collapse: \"Collapse\",\r\n  /**\r\n    * Title on Expand buttons\r\n    */\r\n  button_expand: \"Expand\",\r\n  /**\r\n    * Title on Flatpickr toggle buttons\r\n    */\r\n  flatpickr_toggle_button: \"Toggle\",\r\n  /**\r\n    * Title on Flatpickr clear buttons\r\n    */\r\n  flatpickr_clear_button: \"Clear\"\r\n};\r\n\r\n// Miscellaneous Plugin Settings\r\nJSONEditor.plugins = {\r\n  ace: {\r\n    theme: ''\r\n  },\r\n  SimpleMDE: {\r\n\r\n  },\r\n  sceditor: {\r\n\r\n  },\r\n  select2: {\r\n\r\n  },\r\n  selectize: {\r\n  }\r\n};\r\n\r\n// Default per-editor options\r\n$each(JSONEditor.defaults.editors, function(i,editor) {\r\n  JSONEditor.defaults.editors[i].options = editor.options || {};\r\n});\r\n\r\n// Set the default resolvers\r\n// Use \"multiple\" as a fall back for everything\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(typeof schema.type !== \"string\") return \"multiple\";\r\n});\r\n// If the type is not set but properties are defined, we can infer the type is actually object\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // If the schema is a simple type\r\n  if(!schema.type && schema.properties ) return \"object\";\r\n});\r\n// If the type is set and it's a basic type, use the primitive editor\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // If the schema is a simple type\r\n  if(typeof schema.type === \"string\") return schema.type;\r\n});\r\n// Use specialized editor for signatures\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.type === \"string\" && schema.format === \"signature\") return \"signature\";\r\n});\r\n// Use a specialized editor for ratings\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.type === \"integer\" && schema.format === \"rating\") return \"rating\";\r\n});\r\n// Use the select editor for all boolean values\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.type === 'boolean') {\r\n    // If explicitly set to 'checkbox', use that\r\n    if(schema.format === \"checkbox\" || (schema.options && schema.options.checkbox)) {\r\n      return \"checkbox\";\r\n    }\r\n    // Otherwise, default to select menu\r\n    return (JSONEditor.plugins.selectize.enable) ? 'selectize' : 'select';\r\n  }\r\n});\r\n// Use the multiple editor for schemas where the `type` is set to \"any\"\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // If the schema can be of any type\r\n  if(schema.type === \"any\") return \"multiple\";\r\n});\r\n// Editor for base64 encoded files\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // If the schema can be of any type\r\n  if(schema.type === \"string\" && schema.media && schema.media.binaryEncoding===\"base64\") {\r\n    return \"base64\";\r\n  }\r\n});\r\n// Editor for uploading files\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.type === \"string\" && schema.format === \"url\" && schema.options && schema.options.upload === true) {\r\n    if(window.FileReader) return \"upload\";\r\n  }\r\n});\r\n// Use the table editor for arrays with the format set to `table`\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // Type `array` with format set to `table`\r\n  if(schema.type === \"array\" && schema.format === \"table\") {\r\n    return \"table\";\r\n  }\r\n});\r\n// Use the `select` editor for dynamic enumSource enums\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.enumSource) {\r\n    if(schema.format === \"radio\") {\r\n      return \"radio\";\r\n    }\r\n    return (JSONEditor.plugins.selectize.enable) ? 'selectize' : 'select';\r\n  }\r\n});\r\n// Use the `enum` or `select` editors for schemas with enumerated properties\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema[\"enum\"]) {\r\n    if(schema.type === \"array\" || schema.type === \"object\") {\r\n      return \"enum\";\r\n    }\r\n    else if(schema.type === \"number\" || schema.type === \"integer\" || schema.type === \"string\") {\r\n\r\n      if(schema.format === \"radio\") {\r\n        return \"radio\";\r\n      }\r\n\r\n      return (JSONEditor.plugins.selectize.enable) ? 'selectize' : 'select';\r\n    }\r\n  }\r\n});\r\n// Specialized editors for arrays of strings\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if(schema.type === \"array\" && schema.items && !(Array.isArray(schema.items)) && schema.uniqueItems && ['string','number','integer'].indexOf(schema.items.type) >= 0) {\r\n    // if 'selectize' enabled it is expected to be selectized control\r\n    if (JSONEditor.plugins.selectize.enable) {\r\n      return 'arraySelectize';\r\n    }\r\n    // otherwise it is select\r\n    else {\r\n      return 'multiselect';\r\n    }\r\n  }\r\n});\r\n// Use the multiple editor for schemas with `oneOf` set\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  // If this schema uses `oneOf` or `anyOf`\r\n  if(schema.oneOf || schema.anyOf) return \"multiple\";\r\n});\r\n// Specialized editor for date, time and datetime-local formats\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if (['string', 'integer'].indexOf(schema.type) !== -1 && ['date', 'time', 'datetime-local'].indexOf(schema.format) !== -1) {\r\n    return \"datetime\";\r\n  }\r\n});\r\n// Use a specialized editor for starratings\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if (schema.type === \"string\" && schema.format === \"starrating\") return \"starrating\";\r\n});\r\n\r\n// hyper-link describeBy Resolver\r\nJSONEditor.defaults.resolvers.unshift(function(schema) {\r\n  if (schema.links) {\r\n    for (var i = 0; i < schema.links.length; i++) {\r\n      if (schema.links[i].rel.toLowerCase() === \"describedby\") {\r\n        return \"describedBy\";\r\n      }\r\n    }\r\n  }\r\n});\r\n/**\r\n * This is a small wrapper for using JSON Editor like a typical jQuery plugin.\r\n */\r\n(function() {\r\n  if(window.jQuery || window.Zepto) {\r\n    var $ = window.jQuery || window.Zepto;\r\n    $.jsoneditor = JSONEditor.defaults;\r\n    \r\n    $.fn.jsoneditor = function(options) {\r\n      var self = this;\r\n      var editor = this.data('jsoneditor');\r\n      if(options === 'value') {\r\n        if(!editor) throw \"Must initialize jsoneditor before getting/setting the value\";\r\n        \r\n        // Set value\r\n        if(arguments.length > 1) {\r\n          editor.setValue(arguments[1]);\r\n        }\r\n        // Get value\r\n        else {\r\n          return editor.getValue();\r\n        }\r\n      }\r\n      else if(options === 'validate') {\r\n        if(!editor) throw \"Must initialize jsoneditor before validating\";\r\n        \r\n        // Validate a specific value\r\n        if(arguments.length > 1) {\r\n          return editor.validate(arguments[1]);\r\n        }\r\n        // Validate current value\r\n        else {\r\n          return editor.validate();\r\n        }\r\n      }\r\n      else if(options === 'destroy') {\r\n        if(editor) {\r\n          editor.destroy();\r\n          this.data('jsoneditor',null);\r\n        }\r\n      }\r\n      else {\r\n        // Destroy first\r\n        if(editor) {\r\n          editor.destroy();\r\n        }\r\n        \r\n        // Create editor\r\n        editor = new JSONEditor(this.get(0),options);\r\n        this.data('jsoneditor',editor);\r\n        \r\n        // Setup event listeners\r\n        editor.on('change',function() {\r\n          self.trigger('change');\r\n        });\r\n        editor.on('ready',function() {\r\n          self.trigger('ready');\r\n        });\r\n      }\r\n      \r\n      return this;\r\n    };\r\n  }\r\n})();\r\n\r\n\treturn JSONEditor;\r\n});\r\n\r\n//# sourceMappingURL=jsoneditor.js.map\n}",
            "type": "application/javascript",
            "title": "$:/plugins/joshuafontany/jsoneditor/jsoneditor.js",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsoneditor/jsoneditor.css": {
            "text": ".card-body {\r\n    padding: 0.5rem;\r\n}\r\n\r\n.card-body p {\r\n    margin-bottom: 0.2em;\r\n}\r\n\r\n.starrating {\r\n    direction: rtl;\r\n    display: inline-block;\r\n    white-space: nowrap\r\n}\r\n.starrating > input {\r\n    display: none\r\n}\r\n.starrating > label:before {\r\n    content: '\\2606';\r\n    margin: 1px;\r\n    font-size: 18px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: 1;\r\n    font-family: Arial;\r\n    display: inline-block\r\n}\r\n.starrating > label {\r\n    color:  #888;\r\n    cursor: pointer;\r\n    margin: 0;\r\n    margin: 8px 0 2px 0\r\n}\r\n.starrating > label.starrating-display-enabled {\r\n    margin: 1px 0 0 0\r\n}\r\n.starrating:not(.readonly) > input:hover~label, .starrating > input:checked~label {\r\n    color:  #ffca08\r\n}\r\n.starrating:not(.readonly) > input:hover~label:before, .starrating > input:checked~label:before {\r\n    content: '\\2605';\r\n    text-shadow: 0 0 1px rgba(0, 20, 20, 1)\r\n}\r\n.starrating.starrating-display {\r\n    position: relative;\r\n    direction: rtl;\r\n    text-align: center;\r\n    font-size: 10px;\r\n    line-height: 0\r\n}",
            "type": "text/css",
            "title": "$:/plugins/joshuafontany/jsoneditor/jsoneditor.css",
            "tags": "$:/tags/Stylesheet"
        },
        "$:/plugins/joshuafontany/jsoneditor/defaultOptions": {
            "text": "{\r\n    \"mode\" : \"edit\",\r\n    \"enabled\" : true,\r\n    \"compact\": false,\r\n    \"disable_array_add\": false,\r\n    \"disable_array_delete\": false,\r\n    \"disable_array_reorder\": false,\r\n    \"enable_array_copy\": true,\r\n    \"disable_collapse\": false,\r\n    \"disable_edit_json\": true,\r\n    \"disable_properties\": true,\r\n    \"array_controls_top\": true,\r\n    \"form_name_root\": \"root\",\r\n    \"iconlib\": \"fontawesome5\",\r\n    \"no_additional_properties\": false,\r\n    \"refs\": {},\r\n    \"required_by_default\": false,\r\n    \"keep_oneof_values\": true,\r\n    \"schema\": {},\r\n    \"show_all\": true,\r\n    \"show_errors\": \"interaction\",\r\n    \"startval\": null,\r\n    \"template\": \"default\",\r\n    \"theme\": \"bootstrap4\",\r\n    \"display_required_only\": false,\r\n    \"prompt_before_delete\": true,\r\n    \"view_toggle\": false\r\n}",
            "type": "application/json",
            "title": "$:/plugins/joshuafontany/jsoneditor/defaultOptions"
        },
        "$:/plugins/joshuafontany/jsoneditor/devMetaSchema4": {
            "text": "{\n    \"$ref\": \"#/definitions/object\",\n    \"title\": \"object type\",\n    \"definitions\": {\n        \"string\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"string type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"default\": {\n                    \"type\": \"string\"\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"color\",\n                        \"date\",\n                        \"datetime\",\n                        \"datetime-local\",\n                        \"email\",\n                        \"month\",\n                        \"password\",\n                        \"tel\",\n                        \"text\",\n                        \"textarea\",\n                        \"time\",\n                        \"url\",\n                        \"week\",\n                        \"json\",\n                        \"sql\",\n                        \"xml\",\n                        \"yaml\"\n                    ]\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"string\"\n                    ]\n                },\n                \"enum\": {\n                    \"format\": \"table\",\n                    \"items\": {\n                        \"title\": \"alternative\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"null\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"null type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"default\": {\n                    \"type\": \"null\"\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"null\"\n                    ]\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"array\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"items\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"array type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"default\": {\n                    \"type\": \"array\"\n                },\n                \"format\": {\n                    \"default\": \"table\",\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"array\",\n                        \"table\",\n                        \"tabs\",\n                        \"tabs-top\",\n                        \"checkbox\",\n                        \"select\",\n                        \"categories\"\n                    ]\n                },\n                \"items\": {\n                    \"$ref\": \"#/definitions/schema\"\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"array\"\n                    ]\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"schema\": {\n            \"default\": {\n                \"type\": \"object\"\n            },\n            \"oneOf\": [\n                {\n                    \"$ref\": \"#/definitions/null\",\n                    \"title\": \"null type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/boolean\",\n                    \"title\": \"boolean type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/string\",\n                    \"title\": \"string type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/integer\",\n                    \"title\": \"integer type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/number\",\n                    \"title\": \"number type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/object\",\n                    \"title\": \"object type\"\n                },\n                {\n                    \"$ref\": \"#/definitions/array\",\n                    \"title\": \"array type\"\n                }\n            ],\n            \"options\": {\n                \"keep_oneof_values\": false\n            },\n            \"type\": \"object\"\n        },\n        \"boolean\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"boolean type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"default\": {\n                    \"type\": \"boolean\"\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"select\",\n                        \"checkbox\"\n                    ]\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"boolean\"\n                    ]\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"object\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"properties\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"object type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"default\": {\n                    \"type\": \"object\"\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"object\",\"grid\",\"categories\"\n                    ]\n                },\n                \"required\": {\n                    \"uniqueItems\": true,\n                    \"format\": \"table\",\n                    \"items\": {\n                        \"title\": \"property\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"object\"\n                    ]\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"properties\": {\n                    \"type\": \"object\",\n                    \"patternProperties\": {\n                        \".*\": {\n                            \"$ref\": \"#/definitions/propertySchema\"\n                        }\n                    }\n                }\n            }\n        },\n        \"number\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"number type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"maximum\": {\n                    \"type\": \"number\"\n                },\n                \"default\": {\n                    \"type\": \"number\"\n                },\n                \"minimum\": {\n                    \"type\": \"number\"\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"number\"\n                    ]\n                },\n                \"enum\": {\n                    \"format\": \"table\",\n                    \"items\": {\n                        \"title\": \"alternative\",\n                        \"type\": \"number\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"integer\": {\n            \"required\": [\n                \"type\"\n            ],\n            \"defaultProperties\": [\n                \"type\",\n                \"title\"\n            ],\n            \"additionalProperties\": false,\n            \"title\": \"integer type\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"$ref\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"maximum\": {\n                    \"type\": \"integer\"\n                },\n                \"default\": {\n                    \"type\": \"integer\"\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"range\",\n                        \"number\"\n                    ]\n                },\n                \"minimum\": {\n                    \"type\": \"integer\"\n                },\n                \"$schema\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"format\": \"uri\",\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"propertyOrder\": 1\n                },\n                \"type\": {\n                    \"options\": {\n                        \"hidden\": true\n                    },\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"integer\"\n                    ]\n                },\n                \"enum\": {\n                    \"format\": \"table\",\n                    \"items\": {\n                        \"title\": \"alternative\",\n                        \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"propertySchema\": {\n            \"default\": {\n                \"type\": \"object\"\n            },\n            \"oneOf\": [\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"null type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"default\": {\n                            \"type\": \"null\"\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"null\"\n                            ]\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"boolean type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"default\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"select\",\n                                \"checkbox\"\n                            ]\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"boolean\"\n                            ]\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"string type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"default\": {\n                            \"type\": \"string\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"color\",\n                                \"date\",\n                                \"datetime\",\n                                \"datetime-local\",\n                                \"email\",\n                                \"month\",\n                                \"password\",\n                                \"tel\",\n                                \"text\",\n                                \"textarea\",\n                                \"time\",\n                                \"url\",\n                                \"week\",\n                                \"json\",\n                                \"sql\",\n                                \"xml\",\n                                \"yaml\"\n                            ]\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"string\"\n                            ]\n                        },\n                        \"enum\": {\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"title\": \"alternative\",\n                                \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"integer type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"maximum\": {\n                            \"type\": \"integer\"\n                        },\n                        \"default\": {\n                            \"type\": \"integer\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"range\",\n                                \"number\"\n                            ]\n                        },\n                        \"minimum\": {\n                            \"type\": \"integer\"\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"integer\"\n                            ]\n                        },\n                        \"enum\": {\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"title\": \"alternative\",\n                                \"type\": \"integer\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"number type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"maximum\": {\n                            \"type\": \"number\"\n                        },\n                        \"default\": {\n                            \"type\": \"number\"\n                        },\n                        \"minimum\": {\n                            \"type\": \"number\"\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"number\"\n                            ]\n                        },\n                        \"enum\": {\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"title\": \"alternative\",\n                                \"type\": \"number\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\",\n                        \"properties\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"object type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"default\": {\n                            \"type\": \"object\"\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"object\",\"grid\",\"categories\"\n                            ]\n                        },\n                        \"required\": {\n                            \"uniqueItems\": true,\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"title\": \"property\",\n                                \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"object\"\n                            ]\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        },\n                        \"properties\": {\n                            \"type\": \"object\",\n                            \"patternProperties\": {\n                                \".*\": {\n                                    \"$ref\": \"#/definitions/propertySchema\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"required\": [\n                        \"type\"\n                    ],\n                    \"defaultProperties\": [\n                        \"type\",\n                        \"items\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"title\": \"array type\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"$ref\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"default\": {\n                            \"type\": \"array\"\n                        },\n                        \"format\": {\n                            \"default\": \"table\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"array\",\n                                \"table\",\n                                \"tabs\",\n                                \"tabs-top\",\n                                \"checkbox\",\n                                \"select\",\n                                \"categories\"\n                            ]\n                        },\n                        \"items\": {\n                            \"$ref\": \"#/definitions/schema\"\n                        },\n                        \"$schema\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"format\": \"uri\",\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"options\": {\n                                \"hidden\": true\n                            },\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"array\"\n                            ]\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            ],\n            \"options\": {\n                \"keep_oneof_values\": false\n            },\n            \"type\": \"object\"\n        }\n    }\n}",
            "type": "application/json",
            "title": "$:/plugins/joshuafontany/jsoneditor/devMetaSchema4"
        },
        "$:/plugins/joshuafontany/jsoneditor/license": {
            "text": "Copyright (c) 2015, btheado\r\nCopyright (c) 2019, joshuafontany\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n",
            "type": "text/plain",
            "title": "$:/plugins/joshuafontany/jsoneditor/license"
        },
        "$:/plugins/joshuafontany/jsoneditor/jsoneditor-widget.js": {
            "title": "$:/plugins/joshuafontany/jsoneditor/jsoneditor-widget.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsoneditor/jsoneditor-widget.js\r\ntype: application/javascript\r\nmodule-type: widget\r\n\r\nJSON Editor widget\r\n\r\n\\*/\r\n\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n// Pull in the meat of the json-editor functionality\r\nvar JSONEditor = require(\"$:/plugins/joshuafontany/jsoneditor/jsoneditor.js\");\r\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\n\r\n/* SaveState .closest() PolyFill\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\r\nif ($tw.browser && !Element.prototype.closest) {\r\n\tif (!Element.prototype.matches) {\r\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n\t}\r\n\tElement.prototype.closest = function (s) {\r\n\t\tvar el = this;\r\n\t\tvar ancestor = this;\r\n\t\tif (!document.documentElement.contains(el)) return null;\r\n\t\tdo {\r\n\t\t\tif (ancestor.matches(s)) return ancestor;\r\n\t\t\tancestor = ancestor.parentElement;\r\n\t\t} while (ancestor !== null);\r\n\t\treturn null;\r\n\t};\r\n}\r\n\r\nvar JSONEditorWidget = function(parseTreeNode,options) {\r\n  this.initialise(parseTreeNode,options);\r\n};\r\n\r\n/*\r\nInherit from the base widget class\r\n*/\r\nJSONEditorWidget.prototype = new Widget();\r\n\r\n/*\r\nRender this widget into the DOM\r\n*/\r\nJSONEditorWidget.prototype.render = function(parent,nextSibling) {\r\n  var self = this;\r\n  this.options = {};\r\n  this.targets = {};\r\n  this.parentDomNode = parent;\r\n  this.nextSibling = nextSibling;\r\n  this.currentTiddler = this.getVariable(\"currentTiddler\");\r\n  this.computeAttributes();\r\n  this.execute();\r\n  if(this.editor.ready) {this.saveState();}\r\n  // Insert element\r\n\tparent.insertBefore(this.domNode,this.nextSibling);\r\n  //this.renderChildren(parent,nextSibling);\r\n\tthis.domNodes.push(this.domNode);\r\n}\r\n\r\n/*\r\nCompute the internal state of the widget\r\n*/\r\nJSONEditorWidget.prototype.execute = function() {\r\n  /* Attributes are described in the Read Me. */\r\n  // Initialize widget state\r\n  if(!this.state){\r\n    //Setup a State Tiddler Title\r\n    this.state = \"$:/state/jsoneditor/\"+$tw.utils.jsonStringify(this.getVariable(\"currentTiddler\").replace(/^\\$\\:\\//g, \"__\"))+\"/\"\r\n    this.state += this.getStateQualifier(); \r\n  }\r\n  this.paramStr = this.getAttribute(\"param\", \"{}\");\r\n  this.schemaRef = this.getAttribute(\"schema\", \"\");\r\n  this.jsonRoot = this.getAttribute(\"json\", \"New Json Tiddler\");\r\n\r\n  this.targets = this.setTargets();\r\n  this.options = this.getOptionsFromAttributes();\r\n  this.options.startval = this.getJsonFromAttributes();\r\n  if(this.options.show_all == true){\r\n    this.options.startval = $tw.utils.jsonMerge({}, $tw.utils.jsonSchemaInstance(this.options.schema),this.options.startval);\r\n  }\r\n  // Create root editor\r\n  this.domNode = this.document.createElement('div');\r\n  this.domNode.setAttribute(\"class\", \"tw-jsoneditor\");\r\n  if(this.editor) this.editor.destroy();\r\n  this.editor = new JSONEditor(this.domNode, this.options);\r\n  //Handle state and mode\r\n  this.rebuildEditorNodes();\r\n  //Callbacks\r\n  var self = this;\r\n  this.bcb = this.addBoundCallbacks.bind(this);\r\n  this.editor.on(\"change\", this.bcb); //Always ignore first call to change callbacks\r\n  var elements = this.domNode.querySelectorAll(\".json-editor-btn-collapse\");\r\n  elements.forEach((el) =>{\r\n    el.addEventListener(\"click\", function(e) {\r\n      //console.log(\"saveState:\"+self.jsonRoot);\r\n      self.saveState(e); /* autosave state */\r\n    });\r\n  });\r\n};\r\n\r\n/*\r\nSets the target attribute based on the schema and json textReferences\r\n*/\r\nJSONEditorWidget.prototype.setTargets = function() {\r\n  var results = {},\r\n  targets = {};\r\n  results[this.schemaRef] = $tw.utils.parseTextReference(this.schemaRef);\r\n  results[this.jsonRoot] = $tw.utils.parseTextReference(this.jsonRoot);\r\n  var objKeys = Object.keys(results);\r\n  objKeys.forEach(function(i) {\r\n    if (results[i].field) { \r\n      targets[i] = {type: \"field\"};\r\n    }\r\n    else if (results[i].index) targets[i] = {type: \"index\"};\r\n    else targets[i] = {type: \"tiddler\"};\r\n    targets[i].title = results[i].title;\r\n    targets[i].field = results[i].field || \"\";\r\n    targets[i].index = results[i].index || \"\";\r\n  }, this);\r\n  return targets;\r\n}\r\n\r\n/*\r\nRebuilds the source json object from the `jsonRoot`\r\n*/\r\nJSONEditorWidget.prototype.getJsonFromAttributes = function() {\r\n  var jsonstring = this.wiki.getTextReference(this.jsonRoot, \"{}\", this.currentTiddler);\r\n  //If jsonRoot contains invalid json, alert\r\n  if($tw.utils.jsonIsValid(this.targets[this.jsonRoot].title, jsonstring) && jsonstring !== \"\"){\r\n    return JSON.parse(jsonstring);\r\n  }\r\n  else return {};\r\n} \r\n\r\n/*\r\nRebuilds the options object\r\n*/\r\nJSONEditorWidget.prototype.getOptionsFromAttributes = function() {\r\n  //Default editor options\r\n  var defaultString = $tw.wiki.getTiddlerText(\"$:/plugins/joshuafontany/jsoneditor/defaultOptions\", \"{}\"),\r\n  defaultsValid = $tw.utils.jsonIsValid(\"$:/plugins/joshuafontany/jsoneditor/defaultOptions\", defaultString) || false;\r\n  var defaultOptions = defaultsValid ? JSON.parse(defaultString) : {};\r\n  //User editor options\r\n  var optionstring = this.getAttribute(\"options\", \"{}\"),\r\n  optionsValid = $tw.utils.jsonIsValid(this.currentTiddler, optionstring) || false;\r\n  var options = optionsValid ? JSON.parse(optionstring) : {};\r\n  /* An attribute named 'param' can pass in a valid schema json string\r\n  /  as a triple quoted string, or as translusion, variable, etc.\r\n  /  Anything declared in `param` overwrites any value found in `schema`.\r\n  /  Otherwise the 'schema' attribute contains a textReference from which\r\n  /  to retreive the json schema definition. Defaults to '{}' as it still\r\n  /  works with that degenerate case. */\r\n  var paramObj = {}, schemaObj = {};\r\n  var text = this.wiki.getTextReference(this.schemaRef, \"{}\", this.currentTiddler),\r\n  schemaValid = $tw.utils.jsonIsValid(this.targets[this.schemaRef].title, text) || false,\r\n  paramValid = $tw.utils.jsonIsValid(this.currentTiddler, this.paramStr);\r\n  if (paramValid) { paramObj = JSON.parse(this.paramStr); }\r\n  if (schemaValid) { schemaObj = JSON.parse(text); }\r\n  options.schema = $tw.utils.jsonMerge({}, schemaObj, paramObj);\r\n  options.form_name_root = this.jsonRoot;\r\n  //Merge\r\n  options = $tw.utils.jsonMerge({}, defaultOptions, options);\r\n  //State tiddler options\r\n  var stateString = $tw.wiki.getTiddlerText(this.state, '{\"collapsed\":[]}'),\r\n  stateValid = $tw.utils.jsonIsValid(this.state, stateString);\r\n  this.stateObj = (stateValid) ? JSON.parse(stateString) : { collapsed:[]};\r\n  if(this.stateObj.mode) options.mode = this.stateObj.mode;\r\n  if(this.stateObj.enabled) options.enabled = this.stateObj.enabled;\r\n  if (options.mode == \"view\" || options.enabled == false) {\r\n    options.disable_array_add = true,\r\n    options.disable_array_delete = true,\r\n    options.disable_array_reorder = true,\r\n    options.enable_array_copy = false,\r\n    options.disable_edit_json = true,\r\n    options.disable_properties = true;\r\n  }\r\n  // iconlib and theme\r\n  var lib = options.iconlib;\r\n  var validlibs = [\r\n    \"bootstrap2\",\r\n    \"bootstrap3\",\r\n    \"foundation2\",\r\n    \"foundation3\",\r\n    \"jqueryui\",\r\n    \"fontawesome3\",\r\n    \"fontawesome4\",\r\n    \"fontawesome5\",\r\n    \"materialicons\"\r\n  ];\r\n  options.iconlib = (validlibs.indexOf(lib) != -1 ) ? lib : \"\";\r\n  var th = options.theme;\r\n  var validthemes = [\r\n    \"barebones\",\r\n    \"html\",\r\n    \"bootstrap2\",\r\n    \"bootstrap3\",\r\n    \"bootstrap4\",\r\n    \"foundation3\",\r\n    \"foundation4\",\r\n    \"foundation5\",\r\n    \"foundation6\",\r\n    \"jqueryui\",\r\n    \"materialize\"];\r\n  options.theme = (validthemes.indexOf(th) != -1 ) ? th : \"\";\r\n  // handle schema editor mode\r\n  if(options.mode == \"preview\"){\r\n    // Preview mode for a Schema Editor\r\n    options.no_additional_properties = true;\r\n    this.jsonRoot = \"$:/temp/json-preview/\"+this.getStateQualifier();\r\n    //refresh targets\r\n    this.targets = this.setTargets();\r\n  }\r\n  if(options.mode == \"design\"){\r\n    if(this.schemaRef == \"\") {\r\n      this.schemaRef = \"$:/plugins/joshuafontany/jsoneditor/devMetaSchema4\";\r\n      this.targets = this.setTargets();\r\n      var text = this.wiki.getTextReference(this.schemaRef, \"{}\", this.currentTiddler);\r\n      var metaSchema = JSON.parse(text);\r\n      options.schema = $tw.utils.jsonMerge(options.schema, metaSchema);\r\n    }\r\n    // Add extra validation logic for integer schemas that use the `range` format.\r\n    // For integer schemas that use the `range` format we require that minimum and maximum properties are set, too.\r\n    var range_integer_validator = function(schema, value, path) {\r\n      if (typeof value == \"undefined\" || value === null){\r\n        return [{path: path, property: 'maximum', message:'Value undefined'}];\r\n      }\r\n      var errors = [];\r\n      if(value.type === 'integer' && value.format === 'range') {\r\n          if(typeof value.minimum === 'undefined' || typeof value.maximum === 'undefined') {\r\n              errors.push({\r\n                  path: path,\r\n                  property: 'format',\r\n                  message: 'The range format requires that you specify both minimum and maximum properties, too.'\r\n              });\r\n          }\r\n      }\r\n      return errors;\r\n    };\r\n\r\n    // Check that if minimum and maximum are specified, minimum <= maximum\r\n    var min_max_consistence_validator = function(schema, value, path) {\r\n      if (typeof value == \"undefined\" || value === null){\r\n        return [{path: path, property: 'maximum', message:'Value undefined'}];\r\n      }\r\n      var errors = [];\r\n      if(value.type === 'integer' || value.type === 'number') {\r\n          if(typeof value.minimum !== 'undefined' && typeof value.minimum !== 'undefined' && value.minimum > value.maximum) {\r\n              errors.push({\r\n                  path: path,\r\n                  property: 'maximum',\r\n                  message: 'The maximum value must be greater than or equal than the minimum value.'\r\n              });\r\n          }\r\n      }\r\n      return errors;\r\n    };\r\n\r\n    options.custom_validators = [ range_integer_validator, min_max_consistence_validator ];\r\n    //options.schema = JSON.parse(Meta.jsonMetaSchema);\r\n    options.enabled = true;\r\n    options.compact = false;\r\n    options.disable_array_add = false;\r\n    options.disable_array_delete = false;\r\n    options.disable_array_reorder = false;\r\n    options.enable_array_copy = true;\r\n    options.disable_collapse = false;\r\n    options.disable_edit_json = false;\r\n    options.disable_properties = false;\r\n    options.array_controls_top = true;\r\n    options.show_all = false;\r\n    options.required_by_default = false;\r\n  }\r\n  return options;\r\n}\r\n\r\n/*\r\nRebuilds the domNodes if the editor is in view mode to allow transcluded content\r\nResets the collapsed states from this.stateObj.collapsed\r\n*/\r\nJSONEditorWidget.prototype.rebuildViewEditorNodes = function (){\r\n  var isHiddenInput = function(node) {\r\n    // Input matches type?\r\n    var viewTypes = [\"text\",\"textarea\", \"tel\", \"url\", \"number\", \"email\"];\r\n    var nodeType = node.getAttribute(\"type\");\r\n    if(( node.tagName.toLowerCase() == \"input\" && viewTypes.indexOf(nodeType) != -1 ) || node.tagName == \"textarea\" ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  var self = this, currentValue = this.editor.root.getValue();\r\n  var inputNodes = this.editor.element.querySelectorAll('.tw-jsoneditor div.form-group .form-control');\r\n  inputNodes.forEach(function(node) {\r\n    if(node.nodeType == 1) {\r\n      if(isHiddenInput(node)) {\r\n        node.setAttribute(\"hidden\", true);\r\n        var itemName = node.getAttribute(\"name\");\r\n        if(typeof itemName == typeof null || typeof itemName === \"undefined\") return;\r\n        var itemPath = itemName.replace(self.jsonRoot+\"[\", \"/\").replace(/\\]\\[/g, '/').replace(/\\]/g, '');\r\n        var itemText = $tw.utils.jsonGet(currentValue, itemPath);\r\n        /* Render the widget into the fakeDom */\r\n        var parsed = $tw.wiki.parseText(\"text/vnd.tiddlywiki\", itemText, {});\r\n        var widgetTree = self.makeChildWidget(parsed.tree[0] || [], {variables: self.variables});\r\n        widgetTree.parentWidget = self;\r\n                /* Create a parent dom node for the content */\r\n        var container = self.document.createElement(\"div\");\r\n        widgetTree.render(container, null);\r\n        //var div = self.document.createElement(\"div\");\r\n        container.setAttribute(\"name\", node.getAttribute(\"name\"));\r\n        container.className = \"tc-jsoneditor-view\";\r\n        //div.innerHTML = container.innerHTML;\r\n        /* Insert rendered nodes into the editor's domTree @ here*/\r\n        var oldDiv = node.parentNode.querySelector(\".tc-jsoneditor-view\");\r\n        if (oldDiv) oldDiv.parentNode.replaceChild(container, oldDiv);\r\n        else node.parentNode.insertBefore(container, node.nextSibling);\r\n        /* push the widgetTree to this.children for the refresh mechanism*/\r\n        self.children.push(widgetTree);\r\n      }\r\n    }\r\n  });\r\n }\r\n\r\nJSONEditorWidget.prototype.rebuildEditorNodes = function() {\r\n  var self = this;\r\n  if(this.options.mode == \"view\") {\r\n    this.rebuildViewEditorNodes();\r\n  }\r\n  else if(this.options.mode == \"design\") { \r\n    // Add a save button / button template\r\n    var filename = 'schema.json';\r\n    var saveButtonLabel = 'Save';\r\n    var button = this.editor.root.getButton(saveButtonLabel, 'save', saveButtonLabel);\r\n    var button_holder = this.editor.root.theme.getHeaderButtonHolder();\r\n    button_holder.appendChild(button);\r\n    this.editor.root.header.parentNode.insertBefore(button_holder, this.editor.root.header.nextSibling);\r\n\r\n    var jsonEditor = this.editor;\r\n    button.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        var contents = jsonEditor.getValue();\r\n        var blob = new Blob([JSON.stringify(contents, null, 2)], {\r\n            type: \"application/json;charset=utf-8\"\r\n        });\r\n\r\n        if(window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveOrOpenBlob(blob, filename);\r\n        }\r\n        else {\r\n            var a = document.createElement('a');\r\n            a.download = filename;\r\n            a.href = URL.createObjectURL(blob);\r\n            a.dataset.downloadurl = ['text/plain', a.download, a.href].join(':');\r\n\r\n            a.dispatchEvent(new MouseEvent('click', {\r\n                'view': window,\r\n                'bubbles': true,\r\n                'cancelable': false\r\n            }));\r\n        }\r\n    }, false);\r\n  }\r\n  //Reset the collapsed states\r\n  if(this.stateObj.hasOwnProperty(\"collapsed\")) {\r\n    var keys = Object.keys(this.stateObj.collapsed);\r\n    if(keys.length > 0) keys.forEach((e) =>{\r\n      var editor = this.editor.editors[e];\r\n      if(!!editor && editor.hasOwnProperty(\"collapsed\")){\r\n        if(editor.collapsed !== this.stateObj.collapsed[e]){\r\n          editor.toggle_button.click();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  var editorEnabled = this.editor.root.isEnabled();\r\n  if((this.options.enabled == false) && editorEnabled) {\r\n    this.editor.disable();\r\n    this.editor.trigger(\"change\");\r\n  }\r\n  if((this.options.enabled == true) && !editorEnabled) {\r\n    this.editor.enable();\r\n    this.editor.trigger(\"change\");\r\n  }\r\n  //Handle edit/view toggle\r\n  if((this.options.mode == \"view\" || this.options.mode == \"edit\") && this.options.view_toggle == true){\r\n     // Add a view-edit button / button template\r\n     var toggleButtonLabel = (this.options.mode == \"view\") ? 'Edit' : 'View';\r\n     var button = this.editor.root.getButton(toggleButtonLabel, 'save', toggleButtonLabel);\r\n\r\n     var button_holder = this.editor.root.theme.getHeaderButtonHolder();\r\n     button_holder.appendChild(button);\r\n     this.editor.root.header.parentNode.insertBefore(button_holder, this.editor.root.header.nextSibling);\r\n \r\n     var jsonEditor = this.editor;\r\n     button.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        self.options.mode = (self.options.mode == \"view\") ? 'edit' : 'view';\r\n        self.saveState();\r\n        //reset to trigger dirty state refresh\r\n        self.options.mode = (self.options.mode == \"view\") ? 'edit' : 'view';\r\n     }, false);\r\n  }\r\n}\r\n\r\n/*\r\nDiff and save Json on each callback change.\r\n*/\r\nJSONEditorWidget.prototype.saveJson = function() {\r\n  if(!this.editor.ready) return;\r\n  var editorValue = this.editor.getValue(),\r\n  json = this.getJsonFromAttributes();\r\n  var rootObj = (typeof editorValue ==\"object\" && editorValue != null);\r\n  if(this.targets[this.jsonRoot].type == \"tiddler\" && !rootObj) editorValue = {};\r\n  if (!$tw.utils.jsonIsEqual(json, editorValue)) {\r\n    this.wiki.setTextReference(this.jsonRoot, $tw.utils.jsonOrderedStringify(editorValue), this.currentTiddler);\r\n  }  \r\n}\r\n\r\n/* Save State */\r\nJSONEditorWidget.prototype.saveState = function(e) {\r\n  if(!this.editor.ready) return;\r\n  this.stateObj = this.getState();\r\n  var twState = this.wiki.getTextReference(this.state, \"{}\", this.currentTiddler),\r\n  stateEq = $tw.utils.jsonIsEqual(this.stateObj, JSON.parse(twState));\r\n  if (!stateEq) {\r\n    this.wiki.setTextReference(this.state, $tw.utils.jsonOrderedStringify(this.stateObj), this.currentTiddler);\r\n  } \r\n  if(e){\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n}\r\n\r\nJSONEditorWidget.prototype.getState = function() {\r\n  var results = {mode: this.options.mode || \"edit\", collapsed: {}},\r\n  names = Object.keys(this.editor.editors);\r\n  names.forEach((n) => {\r\n    if(this.editor.editors[n] && this.editor.editors[n].hasOwnProperty(\"collapsed\")) {\r\n      results.collapsed[n] = this.editor.editors[n].collapsed;\r\n    }\r\n  });\r\n  return results;\r\n}\r\n\r\nJSONEditorWidget.prototype.addBoundCallbacks = function() {\r\n  var self=this;\r\n  this.editor.off(\"change\", this.bcb);\r\n  this.editor.on(\"change\", function() {      \r\n    self.saveJson(); // autosave changes\r\n  });\r\n}\r\n\r\n/*\r\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\r\n*/\r\nJSONEditorWidget.prototype.refresh = function(changedTiddlers) {\r\n  var changedAttributes = this.computeAttributes();\r\n  var modeEq = true, enabledEq = true;\r\n  var self = this;\r\n  var doRefresh = function () {\r\n    self.editor.off(\"change\");\r\n    self.refreshSelf();\r\n    return true;\r\n  }\r\n  if(changedTiddlers[this.state]){\r\n    var twState = this.wiki.getTextReference(this.state, \"{}\", this.currentTiddler);\r\n    this.stateObj = this.getState();\r\n    modeEq = $tw.utils.jsonIsEqual(this.stateObj.mode, JSON.parse(twState).mode);\r\n    enabledEq = $tw.utils.jsonIsEqual(this.stateObj.enabled, JSON.parse(twState).enabled);\r\n  }\r\n  //If the actual widget attributes have been modified, clear the event listeners and recreate the editor\r\n  if (!modeEq || !modeEq || changedAttributes.param || changedAttributes.schema || changedAttributes.json || changedAttributes.options) {\r\n    doRefresh();\r\n  }\r\n  //If the title of the `schema` target tiddler is in `changedTiddlers`,\r\n  //rebuild the widget\r\n  if (changedTiddlers[this.targets[this.schemaRef].title]){\r\n    var options = this.getOptionsFromAttributes();\r\n    options.startval = this.options.startval;\r\n    var opEq = $tw.utils.jsonIsEqual(this.options, options);\r\n    //console.log($tw.utils.jsonDiff(this.options, options)); \r\n    if(!opEq) {\r\n      doRefresh();\r\n    }\r\n  }\r\n  //If the title of the `json` target tiddler is in `changedTiddlers`,\r\n  //get the new json and set it on the editor\r\n  if (changedTiddlers[this.targets[this.jsonRoot].title]){\r\n    var json = this.getJsonFromAttributes(),\r\n    editorValue = this.editor.getValue();\r\n    var jsonEq = $tw.utils.jsonIsEqual(editorValue, json);\r\n    if(!jsonEq) {\r\n      if (this.options.mode ==\"design\") doRefresh();\r\n      this.editor.root.setValue(json, true);\r\n      if (this.options.mode ==\"view\") this.rebuildViewEditorNodes();\r\n    }\r\n  }\r\n  return this.refreshChildren(changedTiddlers);\r\n};\r\n\r\nexports.jsoneditor = JSONEditorWidget;\r\n\r\n})();\r\n\r\n",
            "type": "application/javascript",
            "module-type": "widget",
            "tags": ""
        },
        "D:\\tw\\plugins\\joshuafontany\\jsoneditor\\README.md": {
            "title": "D:\\tw\\plugins\\joshuafontany\\jsoneditor\\README.md",
            "text": "<h2 class=\"tc-title\">\r\n  Read Me\r\n</h2>\r\n<div class=\"tc-tiddler-body tc-reveal\">\r\n  <h1 class=\"\">Json Editor for <a class=\"tc-tiddlylink tc-tiddlylink-missing\" href=\"https://tiddlywiki.com/\" target=\"_blank\">TiddlyWiki5</a>,\r\n    Version 0.0.6</h1>\r\n    <p>Requires <i>TiddlyWiki 5.1.20</i></p>\r\n  <p>Automatically generate html forms in Tiddlywiki from JSON Schema files using:</p>\r\n  <p><a class=\"tc-tiddlylink-external\" href=\"https://github.com/json-editor/json-editor\" rel=\"noopener noreferrer\"\r\n      target=\"_blank\">Json-Editor for Javascript</a></p>\r\n  <p><a class=\"tc-tiddlylink-external\" href=\"https://github.com/joshuafontany/TW5-jsoneditor\" rel=\"noopener noreferrer\"\r\n      target=\"_blank\">Plugin source code</a> (Forked from <a class=\"tc-tiddlylink-external\" href=\"https://github.com/btheado/jsoneditor\"\r\n      rel=\"noopener noreferrer\" target=\"_blank\">jsoneditor</a>)</p>\r\n  <h1 class=\"\">Introduction</h1>\r\n  <p>The jsoneditor widget generates and displays an HTML form constructed from the given <a class=\"tc-tiddlylink-external\"\r\n      href=\"http://json-schema.org/\" rel=\"noopener noreferrer\" target=\"_blank\">JSON Schema</a>. It does this by\r\n    wrapping a <a class=\"tc-tiddlylink tc-tiddlylink-missing\" href=\"#TiddlyWiki\">TiddlyWiki</a> widget around the <a\r\n      class=\"tc-tiddlylink-external\" href=\"https://github.com/json-editor/json-editor\" rel=\"noopener noreferrer\" target=\"_blank\">json-editor</a>\r\n    package. None of the optional requirements (css frameworks, icons, etc.) of json-editor are included in this\r\n    plugin except for Bootstrap4 and FontAwesome5.</p>\r\n  <p>The schema must be in <a class=\"tc-tiddlylink-external\" href=\"http://json-schema.org/draft-04/json-schema-core.html\"\r\n      rel=\"noopener noreferrer\" target=\"_blank\">JSON Schema format</a> and can reside in:</p>\r\n  <ul>\r\n    <li>the text of any json tiddler</li>\r\n    <li>any index in any json tiddler</li>\r\n    <li>any field from any tiddler (using the text field by default)</li>\r\n  </ul>\r\n  <h1 class=\"\">Installation</h1>\r\n  \r\n<div><p>Go to the example wiki: https://joshuafontany.github.io/TW5-jsoneditor/</p><p>Drag and drop the following tiddlers into your own wiki:</p><ul><li><b>$:/plugin/joshuafontany/jsoneditor</b></li><li><b>$:/plugin/@oss/bootstrap4</b></li><li><b>$:/plugin/TheDiveO/FontAwesome</b></li><li><b>$:/plugin/joshuafontany/jsonmangler</b></li><li><b>$:/plugin/ebalster/modloader</b></li><li><b>$:/plugin/matabele/action-maketid</b></li></ul><p>Alternately clone this repository into your TiddlyWiki5 root into a `plugins/joshuafontany/jsoneditor` folder, and drag and drop the other tiddlers. If you want a \"minified\" version the Releases page has extractable packages for node.js served wikis. Place these in your TiddlyWiki5 root folder and unzip them by selecting `Extract Here` (7zip) or `Extract to here` (Winzip).</p></div>\r\n\r\n\r\n<h2>Using Json Editor</h2>\r\n\r\n<p>Examples are found in the `Using Json Editor` tiddler in the demo wiki:</p>\r\n<p>https://joshuafontany.github.io/TW5-jsoneditor/</p>\r\n<p>This plugin is a work in progress; please report any issues on GitHub: https://github.com/joshuafontany/TW5-jsoneditor/issues</p>\r\n<p>If you find this useful and would care to donate, please use my PayPal: https://paypal.me/JoshuaFontany</p>\r\n",
            "type": "text/x-markdown"
        },
        "$:/plugins/joshuafontany/jsoneditor/readme": {
            "title": "$:/plugins/joshuafontany/jsoneditor/readme",
            "text": "! Json Editor for TiddlyWiki5, Version {{$:/plugins/joshuafontany/jsoneditor!!version}}\n\nAutomatically generate html forms in Tiddlywiki from JSON Schema files using:\n\n[[Json-Editor for Javascript|https://github.com/json-editor/json-editor]]\n\n[[Plugin source code|https://github.com/joshuafontany/TW5-jsoneditor]]\n\n{{$:/plugins/joshuafontany/jsoneditor/usage}}\n\n!!!! Json-Editor Read Me\n\nThe original Read Me for json-editor can be found here for convenience:\n\nhttps://github.com/json-editor/json-editor\n\n"
        },
        "$:/plugins/joshuafontany/jsoneditor/usage": {
            "title": "$:/plugins/joshuafontany/jsoneditor/usage",
            "created": "20150830195535343",
            "modified": "20190314222813850",
            "tags": "",
            "text": "! Introduction\n\nThe jsoneditor widget generates and displays an HTML form constructed from a [[JSON Schema|http://json-schema.org/]].\n\nIt does this by wrapping a TiddlyWiki widget around the [[json-editor|https://github.com/json-editor/json-editor]] package. None of the optional requirements (css frameworks, icons, etc.) of json-editor are included in this plugin except for [[Bootstrap4]] and [[FontAwesome5]].\n\nThe schema must be in [[JSON Schema format|http://json-schema.org/draft-04/json-schema-core.html]] and can reside in:\n\n* the text of any json tiddler\n* any index in any json tiddler\n* any field from any tiddler (using the text field by default)\n\n! Attributes\n\nA [[TiddlyWiki|https://tiddlywiki.com]] [[TextReference|https://tiddlywiki.com/#TextReference]] is used to specify the `schema` attribute. The `json` attribute holds a [[TextReference|https://tiddlywiki.com/#TextReference]] corresponding to the location the data values are saved to and restored from.\n\nTwo optional attributes can be included. `param` can be used to include a schema object (or partial object) which overrides any options given in the `schema` attribute. This is useful for applying small modifications to an existing schema for specific cases. `options` is a way to change the default rendering setting: if in view or edit mode (see below), if collapsed, if fields show labels, the startval of the form, etc. These things cannot be set from within the `schema` object (which has it's own set of options).\n\nBoth attributes parse their value as a json object, such as ``{\"mode\":\"design\"}``. The value is parsed to generate the param and options objects. This is so we can pass data to the widget with triple-quoted text, transclusion, variables, macros, etc. Because the `json` and `schema` attributes are passed as Text References, these can also be stored in other locations in the wiki and transcluded into the widget using the normal wiki syntax.\n\n|!Attribute |!Description |\n| `json` |A [[TextReference|https://tiddlywiki.com/#TextReference]] telling where to load the JSON data from and save the JSON data to. Defaults to a [[New Json Tiddler]]|\n| `schema` |A [[TextReference|https://tiddlywiki.com/#TextReference]] pointing to the schema for the form. Will only be used if the `param` attribute is empty. Defaults to an empty schema. |\n| `param` |An optional parameter that will accept a literal schema object via triple quotes, transclusion, macro, etc |\n| `options` |An optional parameter that will accept a literal options object via triple quotes, transclusion, macro, etc |\n\n! Options\n\nAll json-editor options are described in the [[Json-Editor Read Me|$:/plugins/joshuafontany/jsoneditor/jsoneditor-readme.md]]. The jsoneditor widget accepts all native json-editor options in the `options` attribute - but the default options are setup slightly differently (see the [[tiddlywiki-specific defaults|$:/plugins/joshuafontany/jsoneditor/defaultOptions]]). You may edit the `defaultOptions` shadowtiddler to change the tiddilywiki-wide editor behaviour. The options attribute also accepts TW5 widget-specific options. These modify the behaviour of the tiddlywiki widget in the widget-tree, and thus affect the rendered DOM-tree and html output.\n\nThese are the most commonly used editor options, used to change the look of the editor:\n\n|!<span style=\"white-space: nowrap\">Editor Option</span> |!Description |\n| `iconlib` |Defaults to `fontawesome5`. An optional icon library to use. See the available Icon Libraries in the [[jsoneditor documentation|https://github.com/json-editor/json-editor]] |\n| `theme` |Defaults to `bootstrap4`. A value such as ``html``, ``bootstrap2``, ``bootstrap3``, ``foundation3``, etc. as describe in the [[jsoneditor documentation|https://github.com/json-editor/json-editor]]. Adding the given bootstrap, foundation, etc. stylesheet to your tiddlywiki is a prerequisite to using this option. For ``bootstrap4``, for example, you can use the [[bootstrap4 css|http://netdna.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css]] and  follow the instructions at [[using Stylesheets|http://tiddlywiki.com/#Using%20Stylesheets]]. The a schema with a ``format`` key set to  ``grid`` only work if you use a theme other than the default (``html``). |\n\nThese are tiddlywiki widget-specific options.\n\n|!<span style=\"white-space: nowrap\">Widget Option</span> |!Description |\n| `enabled` |Defaults to `true`. If set to `false`, all active editors within the widget are disabled. |\n| `mode` |Valid vaues are `edit`, `view`, `design`, and `preview`. Defaults to `edit` - the normal json-editor mode. See the table below for more details.|\n| `show_all` |Defaults to `true`, except in design-mode where it defaults to `false`. Due to the quirky way json-editor parses schemas, if a schema has the `required` key set but also has other non-required properties defined - AND the starting json value does not have existing data for the non-required properties, then those editors are not rendered. If `disable_properties` is also set to `true` then the user can never access those missing property editors. Setting `show_all` to `true` fills in the starting json's keys with blank strings, etc, as a patch around this problem. To disable this patch, set this option to `false`. |\n\n|!<span style=\"white-space: nowrap\">Widget Mode</span> |!Description |\n| `edit` |Default mode, renders a normal json-editor based on the options and schema inputs. |\n| `view` |When set to `view` mode the widget hides all \"text\",\"textarea\", \"tel\", \"url\", \"number\", and \"email\" input elements and instead displays the value found at that location in the input's place. All content displayed is fully wikified and active, meaning buttons can send messages to handlers, transcluded content is displayed correctly, etc. You can disable all of the input elements that remain active by also setting `\"enabled\": false` in the `options` object. If you set the `options` object to have `\"view_toggle\": true` then a button will be rendered allowing you to toggle between `view` and `edit` modes. |\n| `design` |Setting the mode to `design` creates an editor where the data json being edited is a Json Schema. This allows the user to design schemas (and thus forms) with UI assistance, instead of directly editing Json text. In `design` mode the `schema` and `param` attributes are not required, and the generated Json Schema is saved to the `json` attribute [[TextReference|https://tiddlywiki.com/#TextReference]]. |\n| `preview` |This mode is used to preview schemas designed by another widget in `design` mode. Set the `schema` attribute of this widget to the same [[TextReference|https://tiddlywiki.com/#TextReference]] as the `json` attribute of the designer widget. The data from editors in preview-mode is automatically saved to a temp tiddler. |\n\n!![[Using Json Editor]]\n\nExamples are found in the [[Using Json Editor]] tiddler in the demo wiki:\n\nhttps://joshuafontany.github.io/TW5-jsoneditor/"
        }
    }
}